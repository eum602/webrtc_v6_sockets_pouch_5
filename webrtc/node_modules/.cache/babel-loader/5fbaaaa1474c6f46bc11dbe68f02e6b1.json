{"ast":null,"code":"import _regeneratorRuntime from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_5/webrtc/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_5/webrtc/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_5/webrtc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_5/webrtc/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport React, { Component } from 'react';\nvar icesReq = [];\nvar socket = null;\nvar peer_id = null;\nvar told = false;\nvar rtcPeerConn = [];\nvar sendDataChannel = [];\nvar catchDataChannel = [];\nvar ices = [];\nvar caller = false;\nvar callee = false;\n\nvar NewPeer =\n/*#__PURE__*/\nfunction () {\n  function NewPeer(_socket, _peer_id) {\n    var _this = this;\n\n    _classCallCheck(this, NewPeer);\n\n    this.callee = function () {\n      callee = true; //this.will()\n\n      _this.did();\n    };\n\n    this.callAction = function () {\n      caller = true;\n      console.log('socket:', socket); //this.will()\n\n      _this.did(); //peer_id = this.props.peer_id\n\n\n      if (!told) {\n        told = true;\n        socket.emit('initSendCandidates', {\n          message: \"start\",\n          \"peer_id\": peer_id\n        });\n      } //sendFile.disabled = true\n\n\n      console.log('Starting operation call.'); //let i = null\n      //console.log(0, this.state)\n\n      new Promise(function (resolve, reject) {\n        //this.setState({i,rtcPeerConn,sendDataChannel,catchDataChannel})\n        resolve(_this.createPC());\n        reject('error...');\n      }).then(function (i) {\n        //console.log('state data after create: ' , this.state)\n        console.log('data after createPC function: ', i);\n        console.log(\"i after createPc fcn\", i);\n\n        if (i >= 0) {\n          return new Promise(function (resolve, reject) {\n            resolve(_this.setPC(i));\n            reject('Error on setPC...');\n          }).then(function (result) {\n            //displaySignalMessage('peerConnection createOffer start.')\n            //let [rtcPeerConn,sendDataChannel] = result\n            console.log('peerConnection createOffer start.');\n            rtcPeerConn[i].createOffer().then(function (e) {\n              return _this.createdOffer(e, i);\n            }).catch(_this.setSessionDescriptionError);\n          });\n        } else {\n          return new Promise(function (resolve, reject) {\n            reject('Error on nowhere...');\n          });\n        }\n      }).then(function (result) {\n        //let [rtcPeerConn,sendDataChannel] = result\n        console.log(result);\n      }).catch(function (e) {\n        return console.log(e);\n      });\n    };\n\n    this.createPC = function () {\n      //let {rtcPeerConn,sendDataChannel,catchDataChannel} = this.state\n      //let rtcPeerConn1 = [...this.state.rtcPeerConn]        \n      //let sendDataChannel1 = [...this.state.sendDataChannel]\n      //let catchDataChannel1 = [...this.state.catchDataChannel]\n      console.log(\"rtcPeerConn1: \", rtcPeerConn);\n      var i = rtcPeerConn.length;\n      console.log('is', i);\n      var initiator = null;\n      rtcPeerConn.push(initiator);\n      sendDataChannel.push(initiator);\n      catchDataChannel.push(initiator);\n      return i;\n    };\n\n    this.setPC = function (i) {\n      //let [i,rtcPeerConn,sendDataChannel,catchDataChannel] = [...result]\n      //let {i,rtcPeerConn,sendDataChannel,catchDataChannel} = this.state\n      var servers = {\n        'iceServers': [//{\n        //'url':'stun:stun.l.google.com:19302'\n        //},{'url': 'stun:stun.services.mozilla.com'}\n        {\n          'url': 'turn:kaydee@159.65.151.221',\n          'credential': 'userdeepak',\n          'username': 'kaydee'\n        }]\n      };\n      var dataChannelOptions = {\n        ordered: true //false, //not guaranteed delivery, unreliable but faster\n        //maxRetransmitTime:  1000 //miliseconds\n        //callButton.disabled = true;\n        //hangupButton.disabled = false;\n\n      };\n      console.log(\"Received data in setPC:rtcPeerConn[\".concat(i, \"]-> \").concat(rtcPeerConn[i]));\n      rtcPeerConn[i] = new window.webkitRTCPeerConnection(servers);\n      console.log('Created local peer connection object rtcPeerConn index: ' + i);\n      var name = 'textMessages' + i;\n      sendDataChannel[i] = rtcPeerConn[i].createDataChannel(name, dataChannelOptions);\n\n      rtcPeerConn[i].ondatachannel = function (e) {\n        return _this.receiveDataChannel(e, i);\n      };\n\n      rtcPeerConn[i].addEventListener('icecandidate', _this.handleConnection);\n      rtcPeerConn[i].addEventListener('iceconnectionstatechange', _this.handleConnectionChange);\n      return [rtcPeerConn, sendDataChannel];\n    };\n\n    this.receiveDataChannel = function (event, i) {\n      console.log(\"Receiving a data channel\");\n      catchDataChannel[i] = event.channel; //seteando el canal de datos a ser el que el   \n\n      catchDataChannel[i].onmessage = function (e) {\n        return _this.receiveDataChannelMessage(e, i);\n      };\n\n      catchDataChannel[i].onopen = function (e) {\n        return _this.dataChannelStateChanged(e, i, catchDataChannel);\n      };\n\n      catchDataChannel[i].onclose = function (e) {\n        return _this.dataChannelStateChanged(e, i, catchDataChannel);\n      }; //return catchDataChannel;\n      //this.setState({catchDataChannel})\n\n    };\n\n    this.receiveDataChannelMessage = function (event, i) {\n      var fileBuffer = _this.fileBuffer; //[...this.state.fileBuffer]\n\n      fileBuffer.push(event.data); //pushing each chunk of the incoming file\n      //into fileBuffer\n\n      var fileSize = _this.fileSize;\n      var receivedFileSize = _this.receivedFileSize;\n      fileSize += event.data.byteLength; //updating the size of the file    \n      //fileProgress.value = fileSize  //------------------------>>>\n\n      if (fileSize === receivedFileSize) {\n        //var received = new window.Blob(fileBuffer)\n        fileBuffer = []; //displaySignalMessage(\"clearing fileBuffer...\" + \"length buffer = \"+fileBuffer.length)\n\n        console.log(\"clearing fileBuffer...length buffer = \" + fileBuffer.length); //displaySignalMessage(\"all done... data received\")\n\n        console.log(\"all done... data received\"); //downloadLink.href = URL.createObjectURL(received)//finally when all is received\n        //the peer will get the link to download de file\n        //downloadLink.download = receivedFileName\n        //removeAllChildItems(downloadLink)\n        //downloadLink.appendChild(document.createTextNode(receivedFileName + \"(\" + \n        //fileSize + \") bytes\" ))\n        //displaySignalMessage(\"Received... \" + fileSize + \"/\" + receivedFileSize )\n\n        console.log(\"Received... \" + fileSize + \"/\" + receivedFileSize);\n        fileSize = 0;\n        receivedFileSize = 0; //this.setState({fileSize,receivedFileSize,fileBuffer})\n\n        _this.fileSize = fileSize;\n        _this.receivedFileSize = receivedFileSize;\n        _this.fileBuffer = fileBuffer;\n      } else {\n        //this.setState({fileSize,receivedFileSize,fileBuffer})\n        _this.fileSize = fileSize;\n        _this.receivedFileSize = receivedFileSize;\n        _this.fileBuffer = fileBuffer;\n      }\n    };\n\n    this.setSessionDescriptionError = function (error) {\n      //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n      console.log(\"Failed to create session description: \".concat(error.toString(), \".\"));\n    };\n\n    this.handleConnectionChange = function (event) {\n      var peerConnection = event.target;\n      console.log('ICE state change event: ', event);\n      if (peerConnection.iceConnectionState === \"connected\") ; //sendFile.disabled = false;\n      //displaySignalMessage(`ICE state: ` +\n      //        `${peerConnection.iceConnectionState}.`);\n\n      console.log(\"ICE state: \" + \"\".concat(peerConnection.iceConnectionState, \".\"));\n    };\n\n    this.createdOffer = function (description, i) {\n      console.log('offer from this local peer connection: ', description.sdp); //displaySignalMessage('localPeerConnection setLocalDescription start.');\n\n      console.log('localPeerConnection setLocalDescription start.');\n      rtcPeerConn[i].setLocalDescription(description).then(function () {\n        _this.setLocalDescriptionSuccess(i);\n\n        console.log('Local description created: ', rtcPeerConn[i].localDescription); //displaySignalMessage(\"Local description created..\")\n\n        console.log(\"Local description created..\");\n\n        _this.sendLocalDesc(rtcPeerConn[i].localDescription);\n      }).catch(_this.setSessionDescriptionError);\n    };\n\n    this.setLocalDescriptionSuccess = function (i) {\n      _this.setDescriptionSuccess(\"setLocalDescription number \".concat(i));\n    };\n\n    this.setDescriptionSuccess = function (functionName) {\n      //displaySignalMessage(`${functionName} complete.`);\n      console.log(\"\".concat(functionName, \" complete.\"));\n    };\n\n    this.sendLocalDesc = function (desc) {\n      //const {socket} = this.props\n      console.log(\"sending local description\", desc);\n\n      try {\n        //displaySignalMessage(\"16. Sending Local description\");\n        console.log(\"16. Sending Local description\");\n        var sdp = {\n          type: \"SDP\",\n          message: JSON.stringify({\n            'sdp': desc\n          }),\n          //room:SIGNAL_ROOM\n          peer_id: peer_id\n        };\n        console.log(\"sdp sent to other nodes in sendLocalDescription: \", sdp);\n        socket.emit('signal', sdp);\n      } catch (e) {\n        _this.logError1(e, \"sending local description\");\n      }\n    };\n\n    this.setSessionDescriptionError = function (error) {\n      //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n      console.log(\"Failed to create session description: \".concat(error.toString(), \".\"));\n    };\n\n    this.logError1 = function (error, where) {\n      //displaySignalMessage(\"problems in \" + where +\" \"+ error.name + ': ' + error.message );\n      console.log(\"problems in \" + where + \" \" + error.name + ': ' + error.message);\n    };\n\n    this.determineI = function () {\n      var i = 0;\n      return i;\n    };\n\n    this.signalingMessageHandler =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(data) {\n        var i, a, desc, c, m, ice;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log('data recibida en signalingMessageHandler ', data);\n                i = _this.determineI();\n                console.log(\"data\", data); //displaySignalMessage(\"data type: \" + data.type)\n\n                if (!rtcPeerConn[i]) _this.setPC(i);\n                _context.prev = 4;\n\n                if (!(data.type === \"SDP\")) {\n                  _context.next = 36;\n                  break;\n                }\n\n                a = JSON.parse(data.message);\n                desc = a.sdp;\n                console.log(\"desc: \", desc);\n                c = desc.type; //displaySignalMessage('working on sdp type ' + c)\n\n                console.log('working on sdp type ' + c); // if we get an offer, we need to reply with an answer\n\n                if (!(c === 'offer')) {\n                  _context.next = 27;\n                  break;\n                }\n\n                //displaySignalMessage(\"Entering to define an answer because of offer input..\")\n                console.log(\"Entering to define an answer because of offer input..\");\n                _context.next = 15;\n                return rtcPeerConn[i].setRemoteDescription(desc).then(function (r) {\n                  //displaySignalMessage(\"Remote description stored\")\n                  console.log(\"Remote description stored\");\n                }).catch(function (e) {\n                  //displaySignalMessage('error setting remote description ' + e.name)\n                  console.log(\"Error setting remote description: \", e);\n                });\n\n              case 15:\n                _context.t0 = rtcPeerConn[i];\n                _context.next = 18;\n                return rtcPeerConn[i].createAnswer();\n\n              case 18:\n                _context.t1 = _context.sent;\n\n                _context.t2 = function (r) {\n                  //displaySignalMessage(\"Created Local description\")\n                  console.log(\"Created Local description\");\n                };\n\n                _context.t3 = function (e) {\n                  //displaySignalMessage(\"Error setting local description when receiving an offer: \" + \n                  //e.name)\n                  console.log(\"Error setting local description when receiving an offer: \" + e.name);\n                };\n\n                _context.next = 23;\n                return _context.t0.setLocalDescription.call(_context.t0, _context.t1).then(_context.t2).catch(_context.t3);\n\n              case 23:\n                console.log('local description-answer: ', rtcPeerConn[i].localDescription);\n\n                _this.sendLocalDesc(rtcPeerConn[i].localDescription);\n\n                _context.next = 34;\n                break;\n\n              case 27:\n                if (!(c === 'answer')) {\n                  _context.next = 33;\n                  break;\n                }\n\n                //displaySignalMessage(\"Entering to store the answer remote description..\")\n                console.log(\"Entering to store the answer remote description..\");\n                _context.next = 31;\n                return rtcPeerConn[i].setRemoteDescription(desc).then(function (r) {\n                  //displaySignalMessage(\"Remote answer stored\")\n                  console.log(\"Remote answer stored :\", rtcPeerConn[i].remoteDescription);\n                }).catch(function (e) {\n                  //displaySignalMessage('error setting remote descrition: '+ e.name)\n                  console.log('error setting remote descrition: ', e);\n                });\n\n              case 31:\n                _context.next = 34;\n                break;\n\n              case 33:\n                console.log('Unsupported SDP type.');\n\n              case 34:\n                _context.next = 37;\n                break;\n\n              case 36:\n                if (data.type === \"ice candidate\") {\n                  //displaySignalMessage(\"Adding foreign Ice candidate..\")\n                  console.log(\"Adding foreign Ice candidate..\");\n                  m = JSON.parse(data.message);\n                  ice = m.candidate;\n                  console.log('ice candidate: ', ice);\n                  ices.push(ice);\n                } else if (ices.length > 0 && data.type === \"noIce\") {\n                  ices.forEach(function (ice) {\n                    rtcPeerConn[i].addIceCandidate(ice).then(function (r) {\n                      //displaySignalMessage('added a foreign candidate')\n                      console.log('added a foreign candidate');\n                    }).catch(function (e) {\n                      //displaySignalMessage(\"3. Failure during addIceCandidate(): \" + e.name)\n                      console.log('error adding iceCandidate: ', e);\n                    });\n                  });\n                } else if (data.type === \"endCall\") {\n                  rtcPeerConn[i].close();\n\n                  if (sendDataChannel[i]) {\n                    sendDataChannel[i].close();\n                    sendDataChannel[i] = null;\n                  }\n\n                  if (catchDataChannel[i]) {\n                    catchDataChannel[i].close();\n                    catchDataChannel[i] = null;\n                  }\n\n                  rtcPeerConn[i] = null; //sendFile.disabled = true\n\n                  icesReq = []; //hangupButton.disabled = true;\n                  //callButton.disabled = false;                \n\n                  _this.closed = true;\n                }\n\n              case 37:\n                _context.next = 42;\n                break;\n\n              case 39:\n                _context.prev = 39;\n                _context.t4 = _context[\"catch\"](4);\n                //displaySignalMessage(\"error on signaling message: \" + err.name);\n                console.log(\"error on signaling message: \", _context.t4);\n\n              case 42:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 39]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.fileBuffer = [];\n    this.fileSize = [];\n    this.receivedFileSize = 0;\n    this.closed = false;\n    this.socket = _socket;\n    this.peer_id = _peer_id;\n  }\n  /*will() {\n      socket = this.props.socket\n      peer_id = this.props.peer_id\n      console.log(\"Entrando a component will mount...socket: \", this.props)\n  }*/\n\n\n  _createClass(NewPeer, [{\n    key: \"did\",\n    value: function did() {\n      var _this2 = this;\n\n      socket.on('signaling_message', function (data) {\n        return socket.emit('xyz', data, _this2.signalingMessageHandler);\n      });\n\n      window.onbeforeunload = function () {\n        socket.emit('signal', {\n          \"type\": \"endCall\",\n          \"message\": \"finishing call\",\n          \"peer_id\": peer_id\n        });\n      };\n    }\n  }, {\n    key: \"dataChannelStateChanged\",\n    value: function dataChannelStateChanged(e, i, catchDataChannel) {\n      if (catchDataChannel[i] !== null) {\n        if (catchDataChannel[i].readyState === 'open') {\n          //si el readyState es abierto\n          //displaySignalMessage(\"Data Channel Opened\")\n          console.log(\"Data Channel Opened\");\n\n          if (callee === true) {\n            console.log('rtcPeerConn[i].iceCandidate: ', rtcPeerConn[i]);\n            console.log(\"I am a callee and I am ready\");\n          }\n        } else {\n          //displaySignalMessage(\"data channel is : \" + catchDataChannel[i].readyState)\n          console.log(\"data channel is : \" + catchDataChannel[i].readyState);\n        }\n      }\n    }\n  }, {\n    key: \"handleConnection\",\n    value: function handleConnection(event) {\n      var iceCandidate = event.candidate;\n\n      if (iceCandidate) {\n        //console.log('state data after create.....: ' , this.state)\n        //let icesReq = [...this.state.icesReq]\n        icesReq.push(iceCandidate); //this.setState({icesReq})\n      } //else if (!iceCandidate && this.state.icesReq.length>0) {\n      else if (!iceCandidate && icesReq.length > 0) {\n          console.log(\"icesReq: \", icesReq); //const {socket} = this.props\n          //let len = this.state.icesReq.length\n\n          var len = icesReq.length;\n          var iter = 0; //displaySignalMessage(\"ICE protocol gathered \" + len + \" candidates..\" )\n\n          console.log(\"ICE protocol gathered \" + len + \" candidates..\");\n          var newIceCandidate; //let icesReq = [...this.state.icesReq]\n\n          icesReq.forEach(function (iceCandidate) {\n            iter++;\n            newIceCandidate = iceCandidate;\n            console.log(\"candidate created ready to be sent: \", newIceCandidate);\n            socket.emit('signal', {\n              \"type\": \"ice candidate\",\n              \"message\": JSON.stringify({\n                'candidate': newIceCandidate\n              }),\n              //\"room\":SIGNAL_ROOM\n              \"peer_id\": peer_id\n            }); //displaySignalMessage( iter +\". Sending Ice candidate ...\");\n\n            console.log(\"\".concat(iter, \" . Sending Ice candidate al peer \").concat(peer_id));\n          });\n          socket.emit('signal', {\n            \"type\": \"noIce\",\n            \"message\": \"\",\n            //\"room\":SIGNAL_ROOM})\n            \"peer_id\": peer_id\n          });\n          console.log(\"ending noIce signal to peer \".concat(peer_id)); //icesReq = []\n        } //else if(!iceCandidate && this.state.icesReq.length==0){\n        else if (!iceCandidate && icesReq.length === 0) {\n            //displaySignalMessage(\"Candidate received is null, no candidates received yet, check your code!..\")\n            console.log(\"Candidate received is null, no candidates received yet, check your code!..\");\n          }\n    }\n  }]);\n\n  return NewPeer;\n}();\n\nexport { NewPeer as default };","map":{"version":3,"sources":["/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_5/webrtc/src/wrtconf/NewPeer.js"],"names":["React","Component","icesReq","socket","peer_id","told","rtcPeerConn","sendDataChannel","catchDataChannel","ices","caller","callee","NewPeer","did","callAction","console","log","emit","message","Promise","resolve","reject","createPC","then","i","setPC","result","createOffer","e","createdOffer","catch","setSessionDescriptionError","length","initiator","push","servers","dataChannelOptions","ordered","window","webkitRTCPeerConnection","name","createDataChannel","ondatachannel","receiveDataChannel","addEventListener","handleConnection","handleConnectionChange","event","channel","onmessage","receiveDataChannelMessage","onopen","dataChannelStateChanged","onclose","fileBuffer","data","fileSize","receivedFileSize","byteLength","error","toString","peerConnection","target","iceConnectionState","description","sdp","setLocalDescription","setLocalDescriptionSuccess","localDescription","sendLocalDesc","setDescriptionSuccess","functionName","desc","type","JSON","stringify","logError1","where","determineI","signalingMessageHandler","a","parse","c","setRemoteDescription","r","createAnswer","remoteDescription","m","ice","candidate","forEach","addIceCandidate","close","closed","on","onbeforeunload","readyState","iceCandidate","len","iter","newIceCandidate"],"mappings":"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","sourcesContent":["import React , {Component} from 'react'\nlet icesReq = []\nlet socket = null\nlet peer_id = null\nlet told = false\nlet rtcPeerConn = []\nlet sendDataChannel = []\nlet catchDataChannel = []\nlet ices = []\nlet caller = false\nlet callee = false\n\nexport default class NewPeer{    \n\n    constructor(socket , peer_id) {\n        this.fileBuffer = []\n        this.fileSize = [] \n        this.receivedFileSize = 0\n        this.closed = false\n        this.socket = socket\n        this.peer_id = peer_id\n    }\n\n    /*will() {\n        socket = this.props.socket\n        peer_id = this.props.peer_id\n        console.log(\"Entrando a component will mount...socket: \", this.props)\n    }*/\n\n    did() {\n        socket.on('signaling_message',(data) => socket.emit('xyz',\n        data,this.signalingMessageHandler))\n\n        window.onbeforeunload = function() {\n            socket.emit('signal',{\"type\":\"endCall\",\"message\":\"finishing call\",\"peer_id\":peer_id})\n        }\n    }\n\n    callee = () => {\n        callee = true\n        //this.will()\n        this.did()\n    }\n\n    callAction = () => {\n        caller = true\n        console.log('socket:',socket)\n        //this.will()\n        this.did()\n        //peer_id = this.props.peer_id\n        if(!told){\n            told =true\n            socket.emit('initSendCandidates',{message:\"start\",\"peer_id\":peer_id})\n        }\n        \n        //sendFile.disabled = true\n        console.log('Starting operation call.')\n        //let i = null\n        //console.log(0, this.state)\n        new Promise((resolve,reject) => {\n                //this.setState({i,rtcPeerConn,sendDataChannel,catchDataChannel})\n                resolve(this.createPC())\n                reject('error...')\n            }).then(i =>{\n                //console.log('state data after create: ' , this.state)\n                console.log('data after createPC function: ',i)                \n                console.log(\"i after createPc fcn\",i)\n                if(i>=0){\n                    return new Promise((resolve,reject)=>{\n                        resolve(this.setPC(i))\n                        reject('Error on setPC...')\n                    }).then(result => {\n                        //displaySignalMessage('peerConnection createOffer start.')\n                        //let [rtcPeerConn,sendDataChannel] = result\n                        console.log('peerConnection createOffer start.')\n                        rtcPeerConn[i].createOffer()\n                        .then(e => this.createdOffer(e,i)).catch(this.setSessionDescriptionError)\n                    })\n                }else{\n                    return new Promise((resolve,reject)=>{                        \n                        reject('Error on nowhere...')\n                    })\n\n                }\n            }).then(result =>{    \n                //let [rtcPeerConn,sendDataChannel] = result\n                console.log(result)\n\n            }).catch(e=>console.log(e))       \n        \n    }\n\n    createPC = () => {\n        //let {rtcPeerConn,sendDataChannel,catchDataChannel} = this.state\n        //let rtcPeerConn1 = [...this.state.rtcPeerConn]        \n        //let sendDataChannel1 = [...this.state.sendDataChannel]\n        //let catchDataChannel1 = [...this.state.catchDataChannel]\n        console.log(\"rtcPeerConn1: \",rtcPeerConn)\n        const i = rtcPeerConn.length\n        console.log('is',i)\n        const initiator = null\n        rtcPeerConn.push(initiator)\n        sendDataChannel.push(initiator)\n        catchDataChannel.push(initiator)\n\n        return i\n    }\n\n    setPC = (i) => {\n        //let [i,rtcPeerConn,sendDataChannel,catchDataChannel] = [...result]\n        //let {i,rtcPeerConn,sendDataChannel,catchDataChannel} = this.state\n        const servers = {\n            'iceServers':[//{\n                //'url':'stun:stun.l.google.com:19302'\n            //},{'url': 'stun:stun.services.mozilla.com'}\n            {'url':'turn:kaydee@159.65.151.221','credential':'userdeepak','username':'kaydee'}\n        ]\n        }\n        const dataChannelOptions = {\n            ordered: true//false, //not guaranteed delivery, unreliable but faster\n            //maxRetransmitTime:  1000 //miliseconds\n        }\n        //callButton.disabled = true;\n        //hangupButton.disabled = false;\n        console.log(`Received data in setPC:rtcPeerConn[${i}]-> ${rtcPeerConn[i]}`)\n        rtcPeerConn[i] = new window.webkitRTCPeerConnection(servers)\n        console.log('Created local peer connection object rtcPeerConn index: ' + i )\n        const name = 'textMessages' + i\n        sendDataChannel[i] = rtcPeerConn[i].createDataChannel(name,dataChannelOptions)    \n        rtcPeerConn[i].ondatachannel = e=>this.receiveDataChannel(e,i)\n        rtcPeerConn[i].addEventListener('icecandidate', this.handleConnection)\n        rtcPeerConn[i].addEventListener(\n        'iceconnectionstatechange', this.handleConnectionChange)\n\n        return [rtcPeerConn,sendDataChannel]\n    }\n    \n    \n    receiveDataChannel = (event,i)=>{\n        console.log(\"Receiving a data channel\")\n        catchDataChannel[i] = event.channel;//seteando el canal de datos a ser el que el   \n        catchDataChannel[i].onmessage = e=>this.receiveDataChannelMessage(e,i);\n        catchDataChannel[i].onopen = e=>this.dataChannelStateChanged(e,i,catchDataChannel);\n        catchDataChannel[i].onclose = e => this.dataChannelStateChanged(e,i,catchDataChannel);\n        //return catchDataChannel;\n        //this.setState({catchDataChannel})\n    }\n    \n    receiveDataChannelMessage = (event, i) => {\n        let fileBuffer = this.fileBuffer//[...this.state.fileBuffer]\n        fileBuffer.push(event.data) //pushing each chunk of the incoming file\n        //into fileBuffer\n        let fileSize = this.fileSize\n        let receivedFileSize = this.receivedFileSize\n        fileSize += event.data.byteLength //updating the size of the file    \n        //fileProgress.value = fileSize  //------------------------>>>\n        if(fileSize === receivedFileSize){\n            //var received = new window.Blob(fileBuffer)\n            fileBuffer = []\n            //displaySignalMessage(\"clearing fileBuffer...\" + \"length buffer = \"+fileBuffer.length)\n            console.log(\"clearing fileBuffer...length buffer = \" + fileBuffer.length)\n            //displaySignalMessage(\"all done... data received\")\n            console.log(\"all done... data received\")\n            //downloadLink.href = URL.createObjectURL(received)//finally when all is received\n            //the peer will get the link to download de file\n            //downloadLink.download = receivedFileName\n            //removeAllChildItems(downloadLink)\n            //downloadLink.appendChild(document.createTextNode(receivedFileName + \"(\" + \n            //fileSize + \") bytes\" ))\n            //displaySignalMessage(\"Received... \" + fileSize + \"/\" + receivedFileSize )\n            console.log(\"Received... \" + fileSize + \"/\" + receivedFileSize)\n            fileSize = 0\n            receivedFileSize = 0\n            //this.setState({fileSize,receivedFileSize,fileBuffer})\n            this.fileSize = fileSize\n            this.receivedFileSize = receivedFileSize\n            this.fileBuffer = fileBuffer\n        }else{\n            //this.setState({fileSize,receivedFileSize,fileBuffer})\n            this.fileSize = fileSize\n            this.receivedFileSize = receivedFileSize\n            this.fileBuffer = fileBuffer\n        }\n    }\n\n    dataChannelStateChanged(e,i,catchDataChannel){\n        if(catchDataChannel[i]!==null){\n            if(catchDataChannel[i].readyState === 'open'){//si el readyState es abierto\n                //displaySignalMessage(\"Data Channel Opened\")\n                console.log(\"Data Channel Opened\")\n                if(callee===true){\n                    console.log('rtcPeerConn[i].iceCandidate: ' , rtcPeerConn[i])\n                    console.log(`I am a callee and I am ready`)\n                }\n            }else{\n                //displaySignalMessage(\"data channel is : \" + catchDataChannel[i].readyState)\n                console.log(\"data channel is : \" + catchDataChannel[i].readyState)\n            }\n        }\n    }\n\n    handleConnection(event) {\n        const iceCandidate = event.candidate;\n        if(iceCandidate){\n            //console.log('state data after create.....: ' , this.state)\n            //let icesReq = [...this.state.icesReq]\n            icesReq.push(iceCandidate)\n            //this.setState({icesReq})\n        }\n        //else if (!iceCandidate && this.state.icesReq.length>0) {\n        else if (!iceCandidate && icesReq.length>0) {           \n            console.log(\"icesReq: \",icesReq)\n            //const {socket} = this.props\n            //let len = this.state.icesReq.length\n            let len = icesReq.length\n            let iter = 0\n            //displaySignalMessage(\"ICE protocol gathered \" + len + \" candidates..\" )\n            console.log(\"ICE protocol gathered \" + len + \" candidates..\")\n            let newIceCandidate\n            //let icesReq = [...this.state.icesReq]\n            icesReq.forEach(iceCandidate=>{\n                iter++\n                newIceCandidate = iceCandidate\n                console.log(\"candidate created ready to be sent: \", newIceCandidate)\n                socket.emit('signal',{\n                    \"type\":\"ice candidate\",\n                    \"message\":JSON.stringify({'candidate':newIceCandidate}),\n                    //\"room\":SIGNAL_ROOM\n                    \"peer_id\":peer_id\n                })\n                //displaySignalMessage( iter +\". Sending Ice candidate ...\");\n                console.log(`${iter} . Sending Ice candidate al peer ${peer_id}`)\n            })\n            socket.emit('signal',{\n                \"type\":\"noIce\",\n                \"message\":\"\",\n                //\"room\":SIGNAL_ROOM})\n                \"peer_id\":peer_id\n            })\n                console.log(`ending noIce signal to peer ${peer_id}`)\n            //icesReq = []\n        }//else if(!iceCandidate && this.state.icesReq.length==0){\n            else if(!iceCandidate && icesReq.length===0){\n            //displaySignalMessage(\"Candidate received is null, no candidates received yet, check your code!..\")\n            console.log(\"Candidate received is null, no candidates received yet, check your code!..\")\n        }\n    }\n\n    setSessionDescriptionError = (error) => {\n        //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n        console.log(`Failed to create session description: ${error.toString()}.`);\n    }\n\n    handleConnectionChange = (event) => {\n        const peerConnection = event.target;\n        console.log('ICE state change event: ', event);\n        if(peerConnection.iceConnectionState === \"connected\"); //sendFile.disabled = false;\n        //displaySignalMessage(`ICE state: ` +\n        //        `${peerConnection.iceConnectionState}.`);\n        console.log(`ICE state: ` +\n                `${peerConnection.iceConnectionState}.`)        \n    }\n    \n    createdOffer = (description , i) => {\n        console.log('offer from this local peer connection: ',description.sdp)\n        //displaySignalMessage('localPeerConnection setLocalDescription start.');\n        console.log('localPeerConnection setLocalDescription start.');\n        rtcPeerConn[i].setLocalDescription(description)\n        .then(() => {\n        this.setLocalDescriptionSuccess(i);\n        console.log('Local description created: ',rtcPeerConn[i].localDescription)\n        //displaySignalMessage(\"Local description created..\")\n        console.log(\"Local description created..\")\n        this.sendLocalDesc(rtcPeerConn[i].localDescription)\n        }).catch(this.setSessionDescriptionError);\n    }\n\n    setLocalDescriptionSuccess = (i) => {\n        this.setDescriptionSuccess(`setLocalDescription number ${i}`);\n    }\n\n    setDescriptionSuccess = (functionName) => {\n        //displaySignalMessage(`${functionName} complete.`);\n        console.log(`${functionName} complete.`)\n    }\n\n    sendLocalDesc = (desc) => {    \n        //const {socket} = this.props\n        console.log(\"sending local description\",desc)\n        try{\n            //displaySignalMessage(\"16. Sending Local description\");\n            console.log(\"16. Sending Local description\")\n            var sdp = {\n                type:\"SDP\",\n                message:JSON.stringify({'sdp':desc}),              \n                //room:SIGNAL_ROOM\n                peer_id:peer_id\n            }\n            console.log(\"sdp sent to other nodes in sendLocalDescription: \",sdp)\n            socket.emit('signal',sdp);\n        }catch(e){\n            this.logError1(e,\"sending local description\");\n        }\n    }\n\n    setSessionDescriptionError = error => {\n        //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n        console.log(`Failed to create session description: ${error.toString()}.`);\n    }\n\n    logError1 = (error,where) => {\n        //displaySignalMessage(\"problems in \" + where +\" \"+ error.name + ': ' + error.message );\n        console.log(\"problems in \" + where +\" \"+ error.name + ': ' + error.message )\n    }\n\n    determineI = () => {\n        let i = 0    \n        return i\n    }\n\n    signalingMessageHandler = async (data)=>{\n        console.log('data recibida en signalingMessageHandler ',data)\n        let i = this.determineI()\n        console.log(\"data\",data)\n        //displaySignalMessage(\"data type: \" + data.type)\n        if (!rtcPeerConn[i]) this.setPC(i);\n        try {\n            if (data.type===\"SDP\") {\n                var a = JSON.parse(data.message)\n                var desc = a.sdp\n                console.log(\"desc: \",desc)\n                var c = desc.type          \n                //displaySignalMessage('working on sdp type ' + c)\n                console.log('working on sdp type ' + c)\n                // if we get an offer, we need to reply with an answer\n                if (c === 'offer') {\n                    //displaySignalMessage(\"Entering to define an answer because of offer input..\")\n                    console.log(\"Entering to define an answer because of offer input..\")\n                    await rtcPeerConn[i].setRemoteDescription(desc).then(r=>{\n                        //displaySignalMessage(\"Remote description stored\")\n                        console.log(\"Remote description stored\")\n                    }).catch(e=>{\n                        //displaySignalMessage('error setting remote description ' + e.name)\n                        console.log(\"Error setting remote description: \", e)\n                    });\n                    await rtcPeerConn[i].setLocalDescription(await rtcPeerConn[i].createAnswer()).then(r=>{\n                        //displaySignalMessage(\"Created Local description\")\n                        console.log(\"Created Local description\")\n                    }).catch(e=>{\n                        //displaySignalMessage(\"Error setting local description when receiving an offer: \" + \n                        //e.name)\n                        console.log(\"Error setting local description when receiving an offer: \" + e.name)\n                    });\n                    console.log('local description-answer: ',rtcPeerConn[i].localDescription)\n                    this.sendLocalDesc(rtcPeerConn[i].localDescription)\n                } else if (c === 'answer') {\n                    //displaySignalMessage(\"Entering to store the answer remote description..\")\n                    console.log(\"Entering to store the answer remote description..\")\n                    await rtcPeerConn[i].setRemoteDescription(desc).then(r=>{\n                        //displaySignalMessage(\"Remote answer stored\")\n                        console.log(\"Remote answer stored :\",rtcPeerConn[i].remoteDescription)                            \n                    }).catch(e=>{\n                    //displaySignalMessage('error setting remote descrition: '+ e.name)\n                    console.log('error setting remote descrition: ', e)\n                    });                     \n                } else {\n                    console.log('Unsupported SDP type.');\n                }\n            } else if (data.type === \"ice candidate\") {\n                //displaySignalMessage(\"Adding foreign Ice candidate..\")\n                console.log(\"Adding foreign Ice candidate..\")\n                var m = JSON.parse(data.message)\n                const ice = m.candidate\n                console.log('ice candidate: ',ice)                \n                ices.push(ice)\n            } else if(ices.length>0 && data.type ===\"noIce\"){                    \n                    ices.forEach(ice=>{\n                        rtcPeerConn[i].addIceCandidate(ice).then(r=>{\n                            //displaySignalMessage('added a foreign candidate')\n                            console.log('added a foreign candidate')\n                        }).catch(e => {\n                        //displaySignalMessage(\"3. Failure during addIceCandidate(): \" + e.name)\n                        console.log('error adding iceCandidate: ', e)\n                        })\n                    })\n                }\n            else if(data.type ===\"endCall\"){\n                rtcPeerConn[i].close()\n                if(sendDataChannel[i]){\n                    sendDataChannel[i].close()\n                    sendDataChannel[i] = null\n                }\n                if(catchDataChannel[i]){\n                    catchDataChannel[i].close()\n                    catchDataChannel[i] = null\n                }\n                rtcPeerConn[i] = null;\n                //sendFile.disabled = true\n                icesReq = []\n                //hangupButton.disabled = true;\n                //callButton.disabled = false;                \n                this.closed = true\n            }\n        } catch (err) {\n            //displaySignalMessage(\"error on signaling message: \" + err.name);\n            console.log(\"error on signaling message: \" , err)\n        }\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}