{"ast":null,"code":"import _regeneratorRuntime from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_3/webrtc/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_3/webrtc/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_3/webrtc/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_3/webrtc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_3/webrtc/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_3/webrtc/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_3/webrtc/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_3/webrtc/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_3/webrtc/src/wrtconf/NewPeer.js\";\nimport React, { Component } from 'react';\n\nvar NewPeer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewPeer, _Component);\n\n  function NewPeer() {\n    var _this;\n\n    _classCallCheck(this, NewPeer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(NewPeer).call(this));\n    _this.state = {\n      fileBuffer: [],\n      fileSize: []\n    };\n\n    _this.callAction = function () {\n      //peer_id = this.props.peer_id\n      if (!told) {\n        told = true;\n        socket.emit('initSendCandidates', {\n          message: \"start\",\n          \"peer_id\": peer_id\n        });\n      } //sendFile.disabled = true\n\n\n      console.log('Starting operation call.'); //let i = null\n\n      console.log(0, _this.state);\n      new Promise(function (resolve, reject) {\n        //this.setState({i,rtcPeerConn,sendDataChannel,catchDataChannel})\n        resolve(_this.createPC());\n        reject('error...');\n      }).then(function (i) {\n        //console.log('state data after create: ' , this.state)\n        console.log('data after createPC function: ', i);\n        console.log(\"i after createPc fcn\", i);\n\n        if (i >= 0) {\n          return new Promise(function (resolve, reject) {\n            resolve(_this.setPC(i));\n            reject('Error on setPC...');\n          }).then(function (result) {\n            //displaySignalMessage('peerConnection createOffer start.')\n            //let [rtcPeerConn,sendDataChannel] = result\n            console.log('peerConnection createOffer start.');\n            rtcPeerConn[i].createOffer().then(function (e) {\n              return _this.createdOffer(e, i);\n            }).catch(_this.setSessionDescriptionError);\n          });\n        } else {\n          return new Promise(function (resolve, reject) {\n            reject('Error on nowhere...');\n          });\n        }\n      }).then(function (result) {\n        //let [rtcPeerConn,sendDataChannel] = result\n        console.log(result);\n      }).catch(function (e) {\n        return console.log(e);\n      });\n    };\n\n    _this.createPC = function () {\n      //let {rtcPeerConn,sendDataChannel,catchDataChannel} = this.state\n      //let rtcPeerConn1 = [...this.state.rtcPeerConn]        \n      //let sendDataChannel1 = [...this.state.sendDataChannel]\n      //let catchDataChannel1 = [...this.state.catchDataChannel]\n      console.log(\"rtcPeerConn1: \", rtcPeerConn);\n      var i = rtcPeerConn.length;\n      console.log('is', i);\n      var initiator = null;\n      rtcPeerConn.push(initiator);\n      sendDataChannel.push(initiator);\n      catchDataChannel.push(initiator);\n      return i;\n    };\n\n    _this.setPC = function (i) {\n      //let [i,rtcPeerConn,sendDataChannel,catchDataChannel] = [...result]\n      //let {i,rtcPeerConn,sendDataChannel,catchDataChannel} = this.state\n      var servers = {\n        'iceServers': [{\n          'url': 'stun:stun.l.google.com:19302'\n        }, {\n          'url': 'stun:stun.services.mozilla.com'\n        }]\n      };\n      var dataChannelOptions = {\n        ordered: true //false, //not guaranteed delivery, unreliable but faster\n        //maxRetransmitTime:  1000 //miliseconds\n        //callButton.disabled = true;\n        //hangupButton.disabled = false;\n\n      };\n      console.log(\"Received data in setPC:rtcPeerConn[\".concat(i, \"]-> \").concat(rtcPeerConn[i]));\n      rtcPeerConn[i] = new window.webkitRTCPeerConnection(servers);\n      console.log('Created local peer connection object rtcPeerConn index: ' + i);\n      var name = 'textMessages' + i;\n      sendDataChannel[i] = rtcPeerConn[i].createDataChannel(name, dataChannelOptions);\n\n      rtcPeerConn[i].ondatachannel = function (e) {\n        return _this.receiveDataChannel(e, i, catchDataChannel);\n      };\n\n      rtcPeerConn[i].addEventListener('icecandidate', _this.handleConnection);\n      rtcPeerConn[i].addEventListener('iceconnectionstatechange', _this.handleConnectionChange);\n      return [rtcPeerConn, sendDataChannel];\n    };\n\n    _this.receiveDataChannel = function (event, i, catchDataChannel) {\n      console.log(\"Receiving a data channel\");\n      catchDataChannel[i] = event.channel; //seteando el canal de datos a ser el que el   \n\n      catchDataChannel[i].onmessage = function (e) {\n        return _this.receiveDataChannelMessage(e, i);\n      };\n\n      catchDataChannel[i].onopen = function (e) {\n        return _this.dataChannelStateChanged(e, i, catchDataChannel);\n      };\n\n      catchDataChannel[i].onclose = function (e) {\n        return _this.dataChannelStateChanged(e, i, catchDataChannel);\n      }; //return catchDataChannel;\n\n\n      _this.setState({\n        catchDataChannel: catchDataChannel\n      });\n    };\n\n    _this.receiveDataChannelMessage = function (event, i) {\n      var fileBuffer = _toConsumableArray(_this.state.fileBuffer);\n\n      fileBuffer.push(event.data); //pushing each chunk of the incoming file\n      //into fileBuffer\n\n      var fileSize = _this.state.fileSize;\n      var receivedFileSize = _this.state.receivedFileSize;\n      fileSize += event.data.byteLength; //updating the size of the file    \n      //fileProgress.value = fileSize  //------------------------>>>\n\n      if (fileSize === receivedFileSize) {\n        //var received = new window.Blob(fileBuffer)\n        fileBuffer = []; //displaySignalMessage(\"clearing fileBuffer...\" + \"length buffer = \"+fileBuffer.length)\n\n        console.log(\"clearing fileBuffer...length buffer = \" + fileBuffer.length); //displaySignalMessage(\"all done... data received\")\n\n        console.log(\"all done... data received\"); //downloadLink.href = URL.createObjectURL(received)//finally when all is received\n        //the peer will get the link to download de file\n        //downloadLink.download = receivedFileName\n        //removeAllChildItems(downloadLink)\n        //downloadLink.appendChild(document.createTextNode(receivedFileName + \"(\" + \n        //fileSize + \") bytes\" ))\n        //displaySignalMessage(\"Received... \" + fileSize + \"/\" + receivedFileSize )\n\n        console.log(\"Received... \" + fileSize + \"/\" + receivedFileSize);\n        fileSize = 0;\n        receivedFileSize = 0;\n\n        _this.setState({\n          fileSize: fileSize,\n          receivedFileSize: receivedFileSize,\n          fileBuffer: fileBuffer\n        });\n      } else {\n        _this.setState({\n          fileSize: fileSize,\n          receivedFileSize: receivedFileSize,\n          fileBuffer: fileBuffer\n        });\n      }\n    };\n\n    _this.setSessionDescriptionError = function (error) {\n      //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n      console.log(\"Failed to create session description: \".concat(error.toString(), \".\"));\n    };\n\n    _this.handleConnectionChange = function (event) {\n      var peerConnection = event.target;\n      console.log('ICE state change event: ', event);\n      if (peerConnection.iceConnectionState === \"connected\") ; //sendFile.disabled = false;\n      //displaySignalMessage(`ICE state: ` +\n      //        `${peerConnection.iceConnectionState}.`);\n\n      console.log(\"ICE state: \" + \"\".concat(peerConnection.iceConnectionState, \".\"));\n    };\n\n    _this.createdOffer = function (description, i) {\n      console.log('offer from this local peer connection: ', description.sdp); //displaySignalMessage('localPeerConnection setLocalDescription start.');\n\n      console.log('localPeerConnection setLocalDescription start.');\n      rtcPeerConn[i].setLocalDescription(description).then(function () {\n        _this.setLocalDescriptionSuccess(i);\n\n        console.log('Local description created: ', rtcPeerConn[i].localDescription); //displaySignalMessage(\"Local description created..\")\n\n        console.log(\"Local description created..\");\n\n        _this.sendLocalDesc(rtcPeerConn[i].localDescription);\n      }).catch(_this.setSessionDescriptionError);\n    };\n\n    _this.setLocalDescriptionSuccess = function (i) {\n      _this.setDescriptionSuccess(\"setLocalDescription number \".concat(i));\n    };\n\n    _this.setDescriptionSuccess = function (functionName) {\n      //displaySignalMessage(`${functionName} complete.`);\n      console.log(\"\".concat(functionName, \" complete.\"));\n    };\n\n    _this.sendLocalDesc = function (desc) {\n      //const {socket} = this.props\n      console.log(\"sending local description\", desc);\n\n      try {\n        //displaySignalMessage(\"16. Sending Local description\");\n        console.log(\"16. Sending Local description\");\n        var sdp = {\n          type: \"SDP\",\n          message: JSON.stringify({\n            'sdp': desc\n          }),\n          //room:SIGNAL_ROOM\n          peer_id: peer_id\n        };\n        console.log(\"sdp sent to other nodes in sendLocalDescription: \", sdp);\n        socket.emit('signal', sdp);\n      } catch (e) {\n        _this.logError1(e, \"sending local description\");\n      }\n    };\n\n    _this.setSessionDescriptionError = function (error) {\n      //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n      console.log(\"Failed to create session description: \".concat(error.toString(), \".\"));\n    };\n\n    _this.logError1 = function (error, where) {\n      //displaySignalMessage(\"problems in \" + where +\" \"+ error.name + ': ' + error.message );\n      console.log(\"problems in \" + where + \" \" + error.name + ': ' + error.message);\n    };\n\n    _this.determineI = function () {\n      var i = 0;\n      return i;\n    };\n\n    _this.signalingMessageHandler =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(data) {\n        var i, a, desc, c, m, ice;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log('data recibida en signalingMessageHandler ', data);\n                i = _this.determineI();\n                console.log(\"data\", data); //displaySignalMessage(\"data type: \" + data.type)\n\n                if (!rtcPeerConn[i]) _this.setPC(i);\n                _context.prev = 4;\n\n                if (!(data.type === \"SDP\")) {\n                  _context.next = 36;\n                  break;\n                }\n\n                a = JSON.parse(data.message);\n                desc = a.sdp;\n                console.log(\"desc: \", desc);\n                c = desc.type; //displaySignalMessage('working on sdp type ' + c)\n\n                console.log('working on sdp type ' + c); // if we get an offer, we need to reply with an answer\n\n                if (!(c === 'offer')) {\n                  _context.next = 27;\n                  break;\n                }\n\n                //displaySignalMessage(\"Entering to define an answer because of offer input..\")\n                console.log(\"Entering to define an answer because of offer input..\");\n                _context.next = 15;\n                return rtcPeerConn[i].setRemoteDescription(desc).then(function (r) {\n                  //displaySignalMessage(\"Remote description stored\")\n                  console.log(\"Remote description stored\");\n                }).catch(function (e) {\n                  //displaySignalMessage('error setting remote description ' + e.name)\n                  console.log(\"Error setting remote description: \", e);\n                });\n\n              case 15:\n                _context.t0 = rtcPeerConn[i];\n                _context.next = 18;\n                return rtcPeerConn[i].createAnswer();\n\n              case 18:\n                _context.t1 = _context.sent;\n\n                _context.t2 = function (r) {\n                  //displaySignalMessage(\"Created Local description\")\n                  console.log(\"Created Local description\");\n                };\n\n                _context.t3 = function (e) {\n                  //displaySignalMessage(\"Error setting local description when receiving an offer: \" + \n                  //e.name)\n                  console.log(\"Error setting local description when receiving an offer: \" + e.name);\n                };\n\n                _context.next = 23;\n                return _context.t0.setLocalDescription.call(_context.t0, _context.t1).then(_context.t2).catch(_context.t3);\n\n              case 23:\n                console.log('local description-answer: ', rtcPeerConn[i].localDescription);\n\n                _this.sendLocalDesc(rtcPeerConn[i].localDescription);\n\n                _context.next = 34;\n                break;\n\n              case 27:\n                if (!(c === 'answer')) {\n                  _context.next = 33;\n                  break;\n                }\n\n                //displaySignalMessage(\"Entering to store the answer remote description..\")\n                console.log(\"Entering to store the answer remote description..\");\n                _context.next = 31;\n                return rtcPeerConn[i].setRemoteDescription(desc).then(function (r) {\n                  //displaySignalMessage(\"Remote answer stored\")\n                  console.log(\"Remote answer stored :\", rtcPeerConn[i].remoteDescription);\n                }).catch(function (e) {\n                  //displaySignalMessage('error setting remote descrition: '+ e.name)\n                  console.log('error setting remote descrition: ', e);\n                });\n\n              case 31:\n                _context.next = 34;\n                break;\n\n              case 33:\n                console.log('Unsupported SDP type.');\n\n              case 34:\n                _context.next = 37;\n                break;\n\n              case 36:\n                if (data.type === \"ice candidate\") {\n                  //displaySignalMessage(\"Adding foreign Ice candidate..\")\n                  console.log(\"Adding foreign Ice candidate..\");\n                  m = JSON.parse(data.message);\n                  ice = m.candidate;\n                  console.log('ice candidate: ', ice);\n                  ices.push(ice);\n                } else if (ices.length > 0 && data.type === \"noIce\") {\n                  ices.forEach(function (ice) {\n                    rtcPeerConn[i].addIceCandidate(ice).then(function (r) {\n                      //displaySignalMessage('added a foreign candidate')\n                      console.log('added a foreign candidate');\n                    }).catch(function (e) {\n                      //displaySignalMessage(\"3. Failure during addIceCandidate(): \" + e.name)\n                      console.log('error adding iceCandidate: ', e);\n                    });\n                  });\n                } else if (data.type === \"endCall\") {\n                  rtcPeerConn[i].close();\n\n                  if (sendDataChannel[i]) {\n                    sendDataChannel[i].close();\n                    sendDataChannel[i] = null;\n                  }\n\n                  if (catchDataChannel[i]) {\n                    catchDataChannel[i].close();\n                    catchDataChannel[i] = null;\n                  }\n\n                  rtcPeerConn[i] = null; //sendFile.disabled = true\n\n                  icesReq = []; //hangupButton.disabled = true;\n                  //callButton.disabled = false;\n                }\n\n              case 37:\n                _context.next = 42;\n                break;\n\n              case 39:\n                _context.prev = 39;\n                _context.t4 = _context[\"catch\"](4);\n                //displaySignalMessage(\"error on signaling message: \" + err.name);\n                console.log(\"error on signaling message: \", _context.t4);\n\n              case 42:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 39]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    global.icesReq = [];\n    global.socket = null;\n    global.peer_id = null;\n    global.told = false;\n    global.rtcPeerConn = [];\n    global.sendDataChannel = [];\n    global.catchDataChannel = [];\n    global.ices = [];\n    return _this;\n  }\n\n  _createClass(NewPeer, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      global.socket = this.props.socket;\n      peer_id = this.props.peer_id;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      socket.on('signaling_message', function (data) {\n        return socket.emit('xyz', data, _this2.signalingMessageHandler);\n      });\n\n      window.onbeforeunload = function () {\n        socket.emit('signal', {\n          \"type\": \"endCall\",\n          \"message\": \"finishing call\",\n          \"peer_id\": peer_id\n        });\n      };\n    }\n  }, {\n    key: \"dataChannelStateChanged\",\n    value: function dataChannelStateChanged(e, i, catchDataChannel) {\n      if (catchDataChannel[i].readyState === 'open') {\n        //si el readyState es abierto\n        //displaySignalMessage(\"Data Channel Opened\")\n        console.log(\"Data Channel Opened\");\n      } else {\n        //displaySignalMessage(\"data channel is : \" + catchDataChannel[i].readyState)\n        console.log(\"data channel is : \" + catchDataChannel[i].readyState);\n      }\n    }\n  }, {\n    key: \"handleConnection\",\n    value: function handleConnection(event) {\n      var iceCandidate = event.candidate;\n\n      if (iceCandidate) {\n        //console.log('state data after create.....: ' , this.state)\n        //let icesReq = [...this.state.icesReq]\n        icesReq.push(iceCandidate); //this.setState({icesReq})\n      } //else if (!iceCandidate && this.state.icesReq.length>0) {\n      else if (!iceCandidate && icesReq.length > 0) {\n          console.log(\"icesReq: \", icesReq); //const {socket} = this.props\n          //let len = this.state.icesReq.length\n\n          var len = icesReq.length;\n          var iter = 0; //displaySignalMessage(\"ICE protocol gathered \" + len + \" candidates..\" )\n\n          console.log(\"ICE protocol gathered \" + len + \" candidates..\");\n          var newIceCandidate; //let icesReq = [...this.state.icesReq]\n\n          icesReq.forEach(function (iceCandidate) {\n            iter++;\n            newIceCandidate = iceCandidate;\n            console.log(\"candidate created ready to be sent: \", newIceCandidate);\n            socket.emit('signal', {\n              \"type\": \"ice candidate\",\n              \"message\": JSON.stringify({\n                'candidate': newIceCandidate\n              }),\n              //\"room\":SIGNAL_ROOM\n              \"peer_id\": peer_id\n            }); //displaySignalMessage( iter +\". Sending Ice candidate ...\");\n\n            console.log(\"\".concat(iter, \" . Sending Ice candidate al peer \").concat(peer_id));\n          });\n          socket.emit('signal', {\n            \"type\": \"noIce\",\n            \"message\": \"\",\n            //\"room\":SIGNAL_ROOM})\n            \"peer_id\": peer_id\n          });\n          console.log(\"ending noIce signal to peer \".concat(peer_id)); //icesReq = []\n        } //else if(!iceCandidate && this.state.icesReq.length==0){\n        else if (!iceCandidate && icesReq.length === 0) {\n            //displaySignalMessage(\"Candidate received is null, no candidates received yet, check your code!..\")\n            console.log(\"Candidate received is null, no candidates received yet, check your code!..\");\n          }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.callAction,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 386\n        },\n        __self: this\n      }, \"start Call\"));\n    }\n  }]);\n\n  return NewPeer;\n}(Component);\n\nexport { NewPeer as default };","map":{"version":3,"sources":["/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_3/webrtc/src/wrtconf/NewPeer.js"],"names":["React","Component","NewPeer","state","fileBuffer","fileSize","callAction","told","socket","emit","message","peer_id","console","log","Promise","resolve","reject","createPC","then","i","setPC","result","rtcPeerConn","createOffer","e","createdOffer","catch","setSessionDescriptionError","length","initiator","push","sendDataChannel","catchDataChannel","servers","dataChannelOptions","ordered","window","webkitRTCPeerConnection","name","createDataChannel","ondatachannel","receiveDataChannel","addEventListener","handleConnection","handleConnectionChange","event","channel","onmessage","receiveDataChannelMessage","onopen","dataChannelStateChanged","onclose","setState","data","receivedFileSize","byteLength","error","toString","peerConnection","target","iceConnectionState","description","sdp","setLocalDescription","setLocalDescriptionSuccess","localDescription","sendLocalDesc","setDescriptionSuccess","functionName","desc","type","JSON","stringify","logError1","where","determineI","signalingMessageHandler","a","parse","c","setRemoteDescription","r","createAnswer","remoteDescription","m","ice","candidate","ices","forEach","addIceCandidate","close","icesReq","global","props","on","onbeforeunload","readyState","iceCandidate","len","iter","newIceCandidate"],"mappings":"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","sourcesContent":["import React , {Component} from 'react'\n\n\nexport default class NewPeer extends Component {\n    constructor() {\n        super()\n\n        global.icesReq = []\n        global.socket = null\n        global.peer_id = null\n        global.told = false\n        global.rtcPeerConn = []\n        global.sendDataChannel = []\n        global.catchDataChannel = []\n        global.ices = []\n    }\n    state = {\n        fileBuffer : [],\n        fileSize : []   \n    }\n\n    componentWillMount() {        \n        global.socket = this.props.socket\n        peer_id = this.props.peer_id\n    }\n\n    componentDidMount() {\n        socket.on('signaling_message',(data) => socket.emit('xyz',\n        data,this.signalingMessageHandler))\n\n        window.onbeforeunload = function() {\n            socket.emit('signal',{\"type\":\"endCall\",\"message\":\"finishing call\",\"peer_id\":peer_id})\n        };\n    }\n\n    callAction = () => {\n        //peer_id = this.props.peer_id\n        if(!told){\n            told =true\n            socket.emit('initSendCandidates',{message:\"start\",\"peer_id\":peer_id})\n        }\n        \n        //sendFile.disabled = true\n        console.log('Starting operation call.')\n        //let i = null\n        console.log(0, this.state)\n        new Promise((resolve,reject) => {\n                //this.setState({i,rtcPeerConn,sendDataChannel,catchDataChannel})\n                resolve(this.createPC())\n                reject('error...')\n            }).then(i =>{\n                //console.log('state data after create: ' , this.state)\n                console.log('data after createPC function: ',i)                \n                console.log(\"i after createPc fcn\",i)\n                if(i>=0){\n                    return new Promise((resolve,reject)=>{\n                        resolve(this.setPC(i))\n                        reject('Error on setPC...')\n                    }).then(result => {\n                        //displaySignalMessage('peerConnection createOffer start.')\n                        //let [rtcPeerConn,sendDataChannel] = result\n                        console.log('peerConnection createOffer start.')\n                        rtcPeerConn[i].createOffer()\n                        .then(e => this.createdOffer(e,i)).catch(this.setSessionDescriptionError)\n                    })\n                }else{\n                    return new Promise((resolve,reject)=>{                        \n                        reject('Error on nowhere...')\n                    })\n\n                }\n            }).then(result =>{    \n                //let [rtcPeerConn,sendDataChannel] = result\n                console.log(result)\n\n            }).catch(e=>console.log(e))       \n        \n    }\n\n    createPC = () => {\n        //let {rtcPeerConn,sendDataChannel,catchDataChannel} = this.state\n        //let rtcPeerConn1 = [...this.state.rtcPeerConn]        \n        //let sendDataChannel1 = [...this.state.sendDataChannel]\n        //let catchDataChannel1 = [...this.state.catchDataChannel]\n        console.log(\"rtcPeerConn1: \",rtcPeerConn)\n        const i = rtcPeerConn.length\n        console.log('is',i)\n        const initiator = null\n        rtcPeerConn.push(initiator)\n        sendDataChannel.push(initiator)\n        catchDataChannel.push(initiator)\n\n        return i\n    }\n\n    setPC = (i) => {\n        //let [i,rtcPeerConn,sendDataChannel,catchDataChannel] = [...result]\n        //let {i,rtcPeerConn,sendDataChannel,catchDataChannel} = this.state\n        const servers = {\n            'iceServers':[{\n                'url':'stun:stun.l.google.com:19302'\n            },{'url': 'stun:stun.services.mozilla.com'}]\n        }\n        const dataChannelOptions = {\n            ordered: true//false, //not guaranteed delivery, unreliable but faster\n            //maxRetransmitTime:  1000 //miliseconds\n        }\n        //callButton.disabled = true;\n        //hangupButton.disabled = false;\n        console.log(`Received data in setPC:rtcPeerConn[${i}]-> ${rtcPeerConn[i]}`)\n        rtcPeerConn[i] = new window.webkitRTCPeerConnection(servers)\n        console.log('Created local peer connection object rtcPeerConn index: ' + i )\n        const name = 'textMessages' + i\n        sendDataChannel[i] = rtcPeerConn[i].createDataChannel(name,dataChannelOptions)    \n        rtcPeerConn[i].ondatachannel = e=>this.receiveDataChannel(e,i,catchDataChannel)\n        rtcPeerConn[i].addEventListener('icecandidate', this.handleConnection)\n        rtcPeerConn[i].addEventListener(\n        'iceconnectionstatechange', this.handleConnectionChange)\n\n        return [rtcPeerConn,sendDataChannel]\n    }\n    \n    \n    receiveDataChannel = (event,i,catchDataChannel)=>{\n        console.log(\"Receiving a data channel\")\n        catchDataChannel[i] = event.channel;//seteando el canal de datos a ser el que el   \n        catchDataChannel[i].onmessage = e=>this.receiveDataChannelMessage(e,i);\n        catchDataChannel[i].onopen = e=>this.dataChannelStateChanged(e,i,catchDataChannel);\n        catchDataChannel[i].onclose = e => this.dataChannelStateChanged(e,i,catchDataChannel);\n        //return catchDataChannel;\n        this.setState({catchDataChannel})\n    }\n    \n    receiveDataChannelMessage = (event, i) => {\n        let fileBuffer = [...this.state.fileBuffer]\n        fileBuffer.push(event.data) //pushing each chunk of the incoming file\n        //into fileBuffer\n        let fileSize = this.state.fileSize\n        let receivedFileSize = this.state.receivedFileSize\n        fileSize += event.data.byteLength //updating the size of the file    \n        //fileProgress.value = fileSize  //------------------------>>>\n        if(fileSize === receivedFileSize){\n            //var received = new window.Blob(fileBuffer)\n            fileBuffer = []\n            //displaySignalMessage(\"clearing fileBuffer...\" + \"length buffer = \"+fileBuffer.length)\n            console.log(\"clearing fileBuffer...length buffer = \" + fileBuffer.length)\n            //displaySignalMessage(\"all done... data received\")\n            console.log(\"all done... data received\")\n            //downloadLink.href = URL.createObjectURL(received)//finally when all is received\n            //the peer will get the link to download de file\n            //downloadLink.download = receivedFileName\n            //removeAllChildItems(downloadLink)\n            //downloadLink.appendChild(document.createTextNode(receivedFileName + \"(\" + \n            //fileSize + \") bytes\" ))\n            //displaySignalMessage(\"Received... \" + fileSize + \"/\" + receivedFileSize )\n            console.log(\"Received... \" + fileSize + \"/\" + receivedFileSize)\n            fileSize = 0\n            receivedFileSize = 0\n            this.setState({fileSize,receivedFileSize,fileBuffer})\n        }else{\n            this.setState({fileSize,receivedFileSize,fileBuffer})\n        }\n    }\n\n    dataChannelStateChanged(e,i,catchDataChannel){\n        if(catchDataChannel[i].readyState === 'open'){//si el readyState es abierto\n            //displaySignalMessage(\"Data Channel Opened\")\n            console.log(\"Data Channel Opened\")\n        }else{\n            //displaySignalMessage(\"data channel is : \" + catchDataChannel[i].readyState)\n            console.log(\"data channel is : \" + catchDataChannel[i].readyState)\n        }\n    }\n\n    handleConnection(event) {\n        const iceCandidate = event.candidate;\n        if(iceCandidate){\n            //console.log('state data after create.....: ' , this.state)\n            //let icesReq = [...this.state.icesReq]\n            icesReq.push(iceCandidate)\n            //this.setState({icesReq})\n        }\n        //else if (!iceCandidate && this.state.icesReq.length>0) {\n        else if (!iceCandidate && icesReq.length>0) {           \n            console.log(\"icesReq: \",icesReq)\n            //const {socket} = this.props\n            //let len = this.state.icesReq.length\n            let len = icesReq.length\n            let iter = 0\n            //displaySignalMessage(\"ICE protocol gathered \" + len + \" candidates..\" )\n            console.log(\"ICE protocol gathered \" + len + \" candidates..\")\n            let newIceCandidate\n            //let icesReq = [...this.state.icesReq]\n            icesReq.forEach(iceCandidate=>{\n                iter++\n                newIceCandidate = iceCandidate\n                console.log(\"candidate created ready to be sent: \", newIceCandidate)\n                socket.emit('signal',{\n                    \"type\":\"ice candidate\",\n                    \"message\":JSON.stringify({'candidate':newIceCandidate}),\n                    //\"room\":SIGNAL_ROOM\n                    \"peer_id\":peer_id\n                })\n                //displaySignalMessage( iter +\". Sending Ice candidate ...\");\n                console.log(`${iter} . Sending Ice candidate al peer ${peer_id}`)\n            })\n            socket.emit('signal',{\n                \"type\":\"noIce\",\n                \"message\":\"\",\n                //\"room\":SIGNAL_ROOM})\n                \"peer_id\":peer_id\n            })\n                console.log(`ending noIce signal to peer ${peer_id}`)\n            //icesReq = []\n        }//else if(!iceCandidate && this.state.icesReq.length==0){\n            else if(!iceCandidate && icesReq.length===0){\n            //displaySignalMessage(\"Candidate received is null, no candidates received yet, check your code!..\")\n            console.log(\"Candidate received is null, no candidates received yet, check your code!..\")\n        }\n    }\n\n    setSessionDescriptionError = (error) => {\n        //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n        console.log(`Failed to create session description: ${error.toString()}.`);\n    }\n\n    handleConnectionChange = (event) => {\n        const peerConnection = event.target;\n        console.log('ICE state change event: ', event);\n        if(peerConnection.iceConnectionState === \"connected\"); //sendFile.disabled = false;\n        //displaySignalMessage(`ICE state: ` +\n        //        `${peerConnection.iceConnectionState}.`);\n        console.log(`ICE state: ` +\n                `${peerConnection.iceConnectionState}.`)\n    }\n    \n    createdOffer = (description , i) => {\n        console.log('offer from this local peer connection: ',description.sdp)\n        //displaySignalMessage('localPeerConnection setLocalDescription start.');\n        console.log('localPeerConnection setLocalDescription start.');\n        rtcPeerConn[i].setLocalDescription(description)\n        .then(() => {\n        this.setLocalDescriptionSuccess(i);\n        console.log('Local description created: ',rtcPeerConn[i].localDescription)\n        //displaySignalMessage(\"Local description created..\")\n        console.log(\"Local description created..\")\n        this.sendLocalDesc(rtcPeerConn[i].localDescription)\n        }).catch(this.setSessionDescriptionError);\n    }\n\n    setLocalDescriptionSuccess = (i) => {\n        this.setDescriptionSuccess(`setLocalDescription number ${i}`);\n    }\n\n    setDescriptionSuccess = (functionName) => {\n        //displaySignalMessage(`${functionName} complete.`);\n        console.log(`${functionName} complete.`)\n    }\n\n    sendLocalDesc = (desc) => {    \n        //const {socket} = this.props\n        console.log(\"sending local description\",desc)\n        try{\n            //displaySignalMessage(\"16. Sending Local description\");\n            console.log(\"16. Sending Local description\")\n            var sdp = {\n                type:\"SDP\",\n                message:JSON.stringify({'sdp':desc}),              \n                //room:SIGNAL_ROOM\n                peer_id:peer_id\n            }\n            console.log(\"sdp sent to other nodes in sendLocalDescription: \",sdp)\n            socket.emit('signal',sdp);\n        }catch(e){\n            this.logError1(e,\"sending local description\");\n        }\n    }\n\n    setSessionDescriptionError = error => {\n        //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n        console.log(`Failed to create session description: ${error.toString()}.`);\n    }\n\n    logError1 = (error,where) => {\n        //displaySignalMessage(\"problems in \" + where +\" \"+ error.name + ': ' + error.message );\n        console.log(\"problems in \" + where +\" \"+ error.name + ': ' + error.message )\n    }\n\n    determineI = () => {\n        let i = 0    \n        return i\n    }\n\n    signalingMessageHandler = async (data)=>{\n        console.log('data recibida en signalingMessageHandler ',data)\n        let i = this.determineI()\n        console.log(\"data\",data)\n        //displaySignalMessage(\"data type: \" + data.type)\n        if (!rtcPeerConn[i]) this.setPC(i);\n        try {\n            if (data.type===\"SDP\") {\n                var a = JSON.parse(data.message)\n                var desc = a.sdp\n                console.log(\"desc: \",desc)\n                var c = desc.type          \n                //displaySignalMessage('working on sdp type ' + c)\n                console.log('working on sdp type ' + c)\n                // if we get an offer, we need to reply with an answer\n                if (c === 'offer') {\n                    //displaySignalMessage(\"Entering to define an answer because of offer input..\")\n                    console.log(\"Entering to define an answer because of offer input..\")\n                    await rtcPeerConn[i].setRemoteDescription(desc).then(r=>{\n                        //displaySignalMessage(\"Remote description stored\")\n                        console.log(\"Remote description stored\")\n                    }).catch(e=>{\n                        //displaySignalMessage('error setting remote description ' + e.name)\n                        console.log(\"Error setting remote description: \", e)\n                    });\n                    await rtcPeerConn[i].setLocalDescription(await rtcPeerConn[i].createAnswer()).then(r=>{\n                        //displaySignalMessage(\"Created Local description\")\n                        console.log(\"Created Local description\")\n                    }).catch(e=>{\n                        //displaySignalMessage(\"Error setting local description when receiving an offer: \" + \n                        //e.name)\n                        console.log(\"Error setting local description when receiving an offer: \" + e.name)\n                    });\n                    console.log('local description-answer: ',rtcPeerConn[i].localDescription)\n                    this.sendLocalDesc(rtcPeerConn[i].localDescription)\n                } else if (c === 'answer') {\n                    //displaySignalMessage(\"Entering to store the answer remote description..\")\n                    console.log(\"Entering to store the answer remote description..\")\n                    await rtcPeerConn[i].setRemoteDescription(desc).then(r=>{\n                        //displaySignalMessage(\"Remote answer stored\")\n                        console.log(\"Remote answer stored :\",rtcPeerConn[i].remoteDescription)                            \n                    }).catch(e=>{\n                    //displaySignalMessage('error setting remote descrition: '+ e.name)\n                    console.log('error setting remote descrition: ', e)\n                    });                     \n                } else {\n                    console.log('Unsupported SDP type.');\n                }\n            } else if (data.type === \"ice candidate\") {\n                //displaySignalMessage(\"Adding foreign Ice candidate..\")\n                console.log(\"Adding foreign Ice candidate..\")\n                var m = JSON.parse(data.message)\n                const ice = m.candidate\n                console.log('ice candidate: ',ice)                \n                ices.push(ice)\n            } else if(ices.length>0 && data.type ===\"noIce\"){                    \n                    ices.forEach(ice=>{\n                        rtcPeerConn[i].addIceCandidate(ice).then(r=>{\n                            //displaySignalMessage('added a foreign candidate')\n                            console.log('added a foreign candidate')\n                        }).catch(e => {\n                        //displaySignalMessage(\"3. Failure during addIceCandidate(): \" + e.name)\n                        console.log('error adding iceCandidate: ', e)\n                        })\n                    })\n                }\n            else if(data.type ===\"endCall\"){\n                rtcPeerConn[i].close()\n                if(sendDataChannel[i]){\n                    sendDataChannel[i].close()\n                    sendDataChannel[i] = null\n                }\n                if(catchDataChannel[i]){\n                    catchDataChannel[i].close()\n                    catchDataChannel[i] = null\n                }\n                rtcPeerConn[i] = null;\n                //sendFile.disabled = true\n                icesReq = []\n                //hangupButton.disabled = true;\n                //callButton.disabled = false;\n            }\n        } catch (err) {\n            //displaySignalMessage(\"error on signaling message: \" + err.name);\n            console.log(\"error on signaling message: \" , err)\n        }\n    }\n\n    render() {\n        \n        return(\n            <div>\n                <button onClick = {this.callAction}>start Call</button>                \n            </div>\n        )\n    }    \n}"]},"metadata":{},"sourceType":"module"}