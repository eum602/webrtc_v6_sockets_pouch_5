{"ast":null,"code":"import _regeneratorRuntime from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_5/webrtc/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_5/webrtc/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_5/webrtc/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_5/webrtc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_5/webrtc/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_5/webrtc/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_5/webrtc/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_5/webrtc/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_5/webrtc/src/pages/index.js\";\nimport React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport DB from '../DB';\nimport CreateBlockchain from '../Blockchain/CreateBlockchain';\nimport Layout from '../Style/Layout';\nimport NewPeer from '../wrtconf/NewPeer';\nvar endpoint = \"http://localhost:4001\"; // this is where we are connecting to with sockets\n\nvar Mean =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Mean, _Component);\n\n  function Mean() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Mean);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Mean)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      db: new DB('blockchain'),\n      otherNodes_id: [],\n      flag: true,\n      cPc: []\n    };\n\n    _this.createSocketHandler = function () {\n      new Promise(function (resolve, reject) {\n        resolve(_this.showUUID());\n        reject('Error getting UUID');\n      }).then(function (r) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          var _loop = function _loop() {\n            var socket = _step.value;\n            socket.on('newCandidate', function (candidatesSocket) {\n              return socket.emit('xyz', candidatesSocket, _this.receiveCandidateHandler);\n            });\n            socket.on('startCallee', function (data) {\n              console.log(\"receiving call from peer: \", data.candidate_socket_id);\n              socket.emit('xyz', data, _this.becomeCallee);\n            });\n            console.log('socket and uuid triggered', {\n              'id': socket.id,\n              'node_uuid': _this.state.node_uuid\n            });\n            socket.emit('searchingPeer', {\n              'id': socket.id,\n              'node_uuid': _this.state.node_uuid\n            });\n          };\n\n          for (var _iterator = _this.state.sockets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            _loop();\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      });\n    };\n\n    _this.receiveCandidateHandler = function (data) {\n      new Promise(function (resolve, reject) {\n        resolve(_this.signalingMessageHandler(data));\n        reject(\"Error in receiveCandidateHandler\");\n      }).then(function (i) {\n        return _this.state.cPc[i].callAction();\n      }).catch(function (e) {\n        return console.log(\"Error in receive signalingMessageHandler: \".concat(e));\n      });\n    };\n\n    _this.becomeCallee = function (data) {\n      new Promise(function (resolve, reject) {\n        resolve(_this.signalingMessageHandler(data));\n        reject(\"Error in becomeCallee\");\n      }).then(function (i) {\n        return _this.state.cPc[i].callee();\n      }).catch(function (e) {\n        return console.log(\"Error in receive signalingMessageHandler: \".concat(e));\n      });\n    };\n\n    _this.signalingMessageHandler = function (data) {\n      console.log(\"candidate received\", data);\n      console.log(\"signalingMessageHandler en App.js\");\n      var candidate_socket_id = data.candidate_socket_id,\n          socket = data.socket;\n\n      if (candidate_socket_id && socket) {\n        var otherNodes_id = _toConsumableArray(_this.state.otherNodes_id);\n\n        otherNodes_id.push(candidate_socket_id);\n        var i = otherNodes_id.length - 1;\n        var pc = new NewPeer(socket, candidate_socket_id);\n\n        var cPc = _toConsumableArray(_this.state.cPc);\n\n        cPc.push(pc);\n\n        _this.setState({\n          otherNodes_id: otherNodes_id,\n          cPc: cPc\n        });\n\n        console.log(\"indice i\", i);\n        return i;\n      }\n    };\n\n    _this.showUUID =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var node_uuid, msg;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              node_uuid = _this.state.db.createUUID();\n              msg = null;\n              _context2.next = 4;\n              return _this.state.db.getUUID().then(function (r) {\n                if (r === 'not_found') {\n                  console.log('creando uuid...');\n\n                  var fcn_uuid =\n                  /*#__PURE__*/\n                  function () {\n                    var _ref2 = _asyncToGenerator(\n                    /*#__PURE__*/\n                    _regeneratorRuntime.mark(function _callee() {\n                      return _regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              _context.next = 2;\n                              return _this.state.db.saveUUID(node_uuid);\n\n                            case 2:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee, this);\n                    }));\n\n                    return function fcn_uuid() {\n                      return _ref2.apply(this, arguments);\n                    };\n                  }();\n\n                  fcn_uuid(node_uuid);\n                  console.log('uuid', node_uuid);\n                  msg = 'uuid created!... : ';\n                } else {\n                  node_uuid = r;\n                  msg = 'uuid catched!... : ';\n                }\n\n                _this.setState({\n                  node_uuid: node_uuid\n                }, function () {\n                  return console.log(msg, node_uuid);\n                });\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    _this.connect_peer = function () {\n      if (_this.state.otherNodes_id.length > 0) {\n        //console.log(this.state.cPc[0].render())\n        var i = 0;\n        console.log(\"Peers created are \".concat(_this.state.cPc.length));\n\n        _this.state.cPc.forEach(function (pc) {\n          i++;\n          console.log(\"\".concat(i, \". State of peer:\"), pc); //return this.state.cPc[i].render()\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Mean, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var sockets = [];\n\n      var _loop2 = function _loop2(i) {\n        var socket = io.connect(endpoint);\n        socket.on('connect', function () {\n          console.log(\"triggered socket.id: \", socket.id);\n        });\n        sockets.push(socket);\n      };\n\n      for (var i = 0; i < 4; i++) {\n        _loop2(i);\n      }\n\n      this.setState({\n        sockets: sockets\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.createSocketHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Connect\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, this.state.node_uuid), this.connect_peer(), React.createElement(CreateBlockchain, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return Mean;\n}(Component);\n\nexport default Mean;","map":{"version":3,"sources":["/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_5/webrtc/src/pages/index.js"],"names":["React","Component","io","DB","CreateBlockchain","Layout","NewPeer","endpoint","Mean","state","db","otherNodes_id","flag","cPc","createSocketHandler","Promise","resolve","reject","showUUID","then","r","socket","on","candidatesSocket","emit","receiveCandidateHandler","data","console","log","candidate_socket_id","becomeCallee","id","node_uuid","sockets","signalingMessageHandler","i","callAction","catch","e","callee","push","length","pc","setState","createUUID","msg","getUUID","fcn_uuid","saveUUID","connect_peer","forEach","connect"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport io from 'socket.io-client'\nimport DB from '../DB'\nimport CreateBlockchain from '../Blockchain/CreateBlockchain'\nimport Layout from '../Style/Layout'\nimport NewPeer from '../wrtconf/NewPeer'\n\nconst endpoint = \"http://localhost:4001\" // this is where we are connecting to with sockets\nclass Mean extends Component {\n    state = {\n      db:new DB('blockchain'),          \n      otherNodes_id:[],\n      flag:true,\n      cPc:[]    \n    }\n\n    componentWillMount(){\n      let sockets = []\n      for(let i=0 ; i < 4;i++){\n        const socket = io.connect(endpoint)\n        socket.on('connect', ()=>{\n          console.log(\"triggered socket.id: \",socket.id)\n        })\n        sockets.push(socket)\n      }\n      this.setState({sockets})      \n    }\n  createSocketHandler = () => {\n    new Promise((resolve,reject) => {\n      resolve(this.showUUID())\n      reject('Error getting UUID')\n    }).then(r=> {\n      for(let socket of this.state.sockets){        \n        socket.on('newCandidate', candidatesSocket => socket.emit('xyz',\n        candidatesSocket,this.receiveCandidateHandler))\n        socket.on('startCallee', data => {\n        console.log(\"receiving call from peer: \", data.candidate_socket_id)\n        socket.emit('xyz',\n        data,this.becomeCallee)})\n        console.log('socket and uuid triggered',{'id':socket.id,'node_uuid':this.state.node_uuid})\n        socket.emit('searchingPeer',{'id':socket.id,'node_uuid':this.state.node_uuid})\n      }\n    })\n  }\n\n  \n  receiveCandidateHandler = data => {\n    new Promise((resolve,reject)=>{\n      resolve(this.signalingMessageHandler(data))\n      reject(\"Error in receiveCandidateHandler\")\n    }).then(i=>this.state.cPc[i].callAction()).catch(e=>\n      console.log(`Error in receive signalingMessageHandler: ${e}`))\n  }\n\n  becomeCallee = (data) => {\n    new Promise((resolve,reject)=>{\n      resolve(this.signalingMessageHandler(data))\n      reject(\"Error in becomeCallee\")\n    }).then(i=>this.state.cPc[i].callee())\n    .catch(e=>console.log(`Error in receive signalingMessageHandler: ${e}`))\n  }\n\n  signalingMessageHandler = data => {\n    console.log(\"candidate received\",data)\n    console.log(\"signalingMessageHandler en App.js\")\n    const {candidate_socket_id,socket} = data\n    if(candidate_socket_id && socket){\n      let otherNodes_id = [...this.state.otherNodes_id]\n      otherNodes_id.push(candidate_socket_id)\n      const i = otherNodes_id.length - 1      \n      let pc = new NewPeer(socket , candidate_socket_id)\n      let cPc = [...this.state.cPc]\n      cPc.push(pc)\n      this.setState({otherNodes_id,cPc})\n      console.log(\"indice i\", i)\n      return i\n    }\n  }\n\n  showUUID = async () => {\n    let node_uuid = this.state.db.createUUID()\n    let msg = null\n    await this.state.db.getUUID().then(r=>{\n      if(r==='not_found'){\n        console.log('creando uuid...')\n        const fcn_uuid = async()=>{await this.state.db.saveUUID(node_uuid)}\n        fcn_uuid(node_uuid)\n        console.log('uuid',node_uuid)\n        msg='uuid created!... : '\n      }else{\n        node_uuid = r\n        msg='uuid catched!... : '\n      }\n      this.setState({node_uuid},()=>console.log(msg , node_uuid))\n    })\n  }\n  \n  connect_peer = () =>{\n    if(this.state.otherNodes_id.length>0){\n      //console.log(this.state.cPc[0].render())\n      let i = 0\n      console.log(`Peers created are ${this.state.cPc.length}` )\n      this.state.cPc.forEach(pc =>{\n        i++\n        console.log(`${i}. State of peer:`,pc )\n        //return this.state.cPc[i].render()\n      })\n    }\n  }\n\n\n  render() {\n    return (\n      <Layout>\n        <button onClick = {this.createSocketHandler} >Connect</button>\n        <h2>{this.state.node_uuid}</h2>\n        {this.connect_peer()}\n        <CreateBlockchain />\n      </Layout>\n    )\n  }\n}\n\nexport default Mean"]},"metadata":{},"sourceType":"module"}