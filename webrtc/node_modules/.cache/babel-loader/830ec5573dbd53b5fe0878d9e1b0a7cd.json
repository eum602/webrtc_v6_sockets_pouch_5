{"ast":null,"code":"import _classCallCheck from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/src/App.js\";\n// import packages\nimport React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client'; // Making the App component\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      endpoint: \"http://localhost:4001\",\n      // this is where we are connecting to with sockets\n      newReload: true // method for emitting a socket.io event\n\n    };\n\n    _this.send = function () {\n      var socket = socketIOClient(_this.state.endpoint); // this emits an event to the socket (your server) with an argument of 'red'\n      // you can make the argument any color you would like, or any kind of data you want to send.\n\n      socket.emit('change color', _this.state.color); //'red'\n      // socket.emit('change color', 'red', 'yellow') | you can have multiple arguments\n    };\n\n    _this.setColor = function (color) {\n      _this.setState({\n        color: color\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    // render method that renders in code if the state is updated\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.newReload) {\n        this.setState({\n          newReload: false\n        });\n      } // Within the render method, we will be checking for any sockets.\n      // We do it in the render method because it is ran very often.\n\n\n      var socket = socketIOClient(this.state.endpoint); // socket.on is another method that checks for incoming events from the server\n      // This method is looking for the event 'change color'\n      // socket.on takes a callback function for the first argument\n\n      socket.on('change color', function (color) {\n        // setting the color of our button\n        document.body.style.backgroundColor = color;\n      });\n      return React.createElement(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.send();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Change Color\"), React.createElement(\"button\", {\n        id: \"blue\",\n        onClick: function onClick() {\n          return _this2.setColor('blue');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Blue\"), React.createElement(\"button\", {\n        id: \"red\",\n        onClick: function onClick() {\n          return _this2.setColor('red');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Red\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/src/App.js"],"names":["React","Component","socketIOClient","App","state","endpoint","newReload","send","socket","emit","color","setColor","setState","on","document","body","style","backgroundColor","textAlign"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B,C,CAEA;;IACMC,G;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAE,uBADJ;AAC6B;AACnCC,MAAAA,SAAS,EAAE,IAFL,CAMV;;AANU,K;;UAOVC,I,GAAO,YAAM;AACX,UAAMC,MAAM,GAAGN,cAAc,CAAC,MAAKE,KAAL,CAAWC,QAAZ,CAA7B,CADW,CAGX;AACA;;AAEAG,MAAAA,MAAM,CAACC,IAAP,CAAY,cAAZ,EAA4B,MAAKL,KAAL,CAAWM,KAAvC,EANW,CAMmC;AAC9C;AACD,K;;UAEDC,Q,GAAW,UAACD,KAAD,EAAW;AACpB,YAAKE,QAAL,CAAc;AAAEF,QAAAA,KAAK,EAALA;AAAF,OAAd;AACD,K;;;;;;;AAED;6BACS;AAAA;;AACP,UAAG,KAAKN,KAAL,CAAWE,SAAd,EAAwB;AAEtB,aAAKM,QAAL,CAAc;AAACN,UAAAA,SAAS,EAAC;AAAX,SAAd;AACD,OAJM,CAKP;AACA;;;AACA,UAAME,MAAM,GAAGN,cAAc,CAAC,KAAKE,KAAL,CAAWC,QAAZ,CAA7B,CAPO,CASP;AACA;AACA;;AACAG,MAAAA,MAAM,CAACK,EAAP,CAAU,cAAV,EAA0B,UAACH,KAAD,EAAW;AACnC;AACAI,QAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,eAApB,GAAsCP,KAAtC;AACD,OAHD;AAKA,aACE;AAAK,QAAA,KAAK,EAAE;AAAEQ,UAAAA,SAAS,EAAE;AAAb,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACX,IAAL,EAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE;AAAQ,QAAA,EAAE,EAAC,MAAX;AAAkB,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACI,QAAL,CAAc,MAAd,CAAN;AAAA,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,EAGE;AAAQ,QAAA,EAAE,EAAC,KAAX;AAAiB,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACA,QAAL,CAAc,KAAd,CAAN;AAAA,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHF,CADF;AAOD;;;;EA/CeV,S;;AAkDlB,eAAeE,GAAf","sourcesContent":["// import packages\nimport React, { Component } from 'react'\nimport socketIOClient from 'socket.io-client'\n\n// Making the App component\nclass App extends Component {  \n    state = {\n      endpoint: \"http://localhost:4001\", // this is where we are connecting to with sockets\n      newReload: true\n    }\n  \n  \n  // method for emitting a socket.io event\n  send = () => {\n    const socket = socketIOClient(this.state.endpoint)\n    \n    // this emits an event to the socket (your server) with an argument of 'red'\n    // you can make the argument any color you would like, or any kind of data you want to send.\n    \n    socket.emit('change color', this.state.color) //'red'\n    // socket.emit('change color', 'red', 'yellow') | you can have multiple arguments\n  }\n\n  setColor = (color) => {\n    this.setState({ color })\n  }\n  \n  // render method that renders in code if the state is updated\n  render() {\n    if(this.state.newReload){\n      \n      this.setState({newReload:false})\n    }\n    // Within the render method, we will be checking for any sockets.\n    // We do it in the render method because it is ran very often.\n    const socket = socketIOClient(this.state.endpoint)\n    \n    // socket.on is another method that checks for incoming events from the server\n    // This method is looking for the event 'change color'\n    // socket.on takes a callback function for the first argument\n    socket.on('change color', (color) => {\n      // setting the color of our button\n      document.body.style.backgroundColor = color\n    })\n     \n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <button onClick={() => this.send()}>Change Color</button>\n        <button id=\"blue\" onClick={() => this.setColor('blue')}>Blue</button>\n        <button id=\"red\" onClick={() => this.setColor('red')}>Red</button>\n      </div>\n    )\n  }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}