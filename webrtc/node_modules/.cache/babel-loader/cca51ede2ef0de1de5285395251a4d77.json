{"ast":null,"code":"import _toConsumableArray from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/src/wrtconf/NewPeer.js\";\nimport React, { Component } from 'react';\n\nvar NewPeer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewPeer, _Component);\n\n  function NewPeer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NewPeer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NewPeer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fileBuffer: [],\n      fileSize: [],\n      icesReq: [],\n      rtcPeerConn: [],\n      sendDataChannel: [],\n      catchDataChannel: []\n    };\n\n    _this.callAction = function () {\n      //sendFile.disabled = true\n      console.log('Starting operation call.'); //let i = null        \n\n      console.log(0, _this.state);\n      var createPC = new Promise(function (resolve, reject) {\n        var _this$state = _this.state,\n            rtcPeerConn = _this$state.rtcPeerConn,\n            sendDataChannel = _this$state.sendDataChannel,\n            catchDataChannel = _this$state.catchDataChannel;\n        var i = rtcPeerConn.length;\n        var initiator = null;\n        rtcPeerConn.push(initiator);\n        sendDataChannel.push(initiator);\n        catchDataChannel.push(initiator);\n\n        _this.setState({\n          i: i,\n          rtcPeerConn: rtcPeerConn,\n          sendDataChannel: sendDataChannel,\n          catchDataChannel: catchDataChannel\n        });\n\n        resolve([i, rtcPeerConn, sendDataChannel, catchDataChannel]);\n        reject('error...');\n      }).then(function (result) {\n        console.log('data after createPC function: ', result);\n        /*\n        return new Promise((resolve,reject)=>{\n            let {i,rtcPeerConn,sendDataChannel,catchDataChannel} = this.state\n            const servers = {\n                'iceServers':[{\n                    'url':'stun:stun.l.google.com:19302'\n                },{'url': 'stun:stun.services.mozilla.com'}]\n            }\n            const dataChannelOptions = {\n                ordered: true//false, //not guaranteed delivery, unreliable but faster\n                //maxRetransmitTime:  1000 //miliseconds\n            }\n            //callButton.disabled = true;\n            //hangupButton.disabled = false;\n            console.log(rtcPeerConn,i)\n            rtcPeerConn[i] = new window.webkitRTCPeerConnection(servers)\n            console.log(\"a\")\n            console.log('Created local peer connection object rtcPeerConn index: ' + i )\n            const name = 'textMessages' + i\n            sendDataChannel[i] = rtcPeerConn[i].createDataChannel(name,dataChannelOptions)    \n            rtcPeerConn[i].ondatachannel = e=>this.receiveDataChannel(e,i,catchDataChannel)\n            rtcPeerConn[i].addEventListener('icecandidate', this.handleConnection)\n            rtcPeerConn[i].addEventListener(\n            'iceconnectionstatechange', this.handleConnectionChange)\n            resolve([rtcPeerConn,sendDataChannel])\n            reject('Error on setPC...')\n        }\n        \n        )*/\n      });\n      /*.then(result =>{\n        let [rtcPeerConn,sendDataChannel] = result\n        console.log([rtcPeerConn,sendDataChannel])\n      })*/\n      //createPC.then(r=>{\n      //let {i,rtcPeerConn,sendDataChannel,catchDataChannel} = this.state\n      //let [i,rtcPeerConn,sendDataChannel,catchDataChannel] = r\n      //console.log('data after createPC function: ',[i,rtcPeerConn,sendDataChannel,catchDataChannel]);\n      //setPc.then(r=>{\n      //let [rtcPeerConn,sendDataChannel] = r\n      //console.log('data after setPC function: ',[rtcPeerConn,sendDataChannel])\n      //  console.log(r)\n      //})\n      //})\n      //let j=i \n      //displaySignalMessage('peerConnection createOffer start.')\n      //console.log('peerConnection createOffer start.')\n      //rtcPeerConn[i].createOffer()\n      //.then(e => this.createdOffer(rtcPeerConn,e,i)).catch(this.setSessionDescriptionError)\n    };\n\n    _this.receiveDataChannel = function (event, i, catchDataChannel) {\n      console.log(\"Receiving a data channel\");\n      catchDataChannel[i] = event.channel; //seteando el canal de datos a ser el que el   \n\n      catchDataChannel[i].onmessage = function (e) {\n        return _this.receiveDataChannelMessage(e, i);\n      };\n\n      catchDataChannel[i].onopen = function (e) {\n        return _this.dataChannelStateChanged(e, i, catchDataChannel);\n      };\n\n      catchDataChannel[i].onclose = function (e) {\n        return _this.dataChannelStateChanged(e, i, catchDataChannel);\n      }; //return catchDataChannel;\n\n\n      _this.setState({\n        catchDataChannel: catchDataChannel\n      });\n    };\n\n    _this.receiveDataChannelMessage = function (event, i) {\n      var fileBuffer = _toConsumableArray(_this.state.fileBuffer);\n\n      fileBuffer.push(event.data); //pushing each chunk of the incoming file\n      //into fileBuffer\n\n      var fileSize = _this.state.fileSize;\n      var receivedFileSize = _this.state.receivedFileSize;\n      fileSize += event.data.byteLength; //updating the size of the file    \n      //fileProgress.value = fileSize  //------------------------>>>\n\n      if (fileSize === receivedFileSize) {\n        //var received = new window.Blob(fileBuffer)\n        fileBuffer = []; //displaySignalMessage(\"clearing fileBuffer...\" + \"length buffer = \"+fileBuffer.length)\n\n        console.log(\"clearing fileBuffer...\" + \"length buffer = \" + fileBuffer.length); //displaySignalMessage(\"all done... data received\")\n\n        console.log(\"all done... data received\"); //downloadLink.href = URL.createObjectURL(received)//finally when all is received\n        //the peer will get the link to download de file\n        //downloadLink.download = receivedFileName\n        //removeAllChildItems(downloadLink)\n        //downloadLink.appendChild(document.createTextNode(receivedFileName + \"(\" + \n        //fileSize + \") bytes\" ))\n        //displaySignalMessage(\"Received... \" + fileSize + \"/\" + receivedFileSize )\n\n        console.log(\"Received... \" + fileSize + \"/\" + receivedFileSize);\n        fileSize = 0;\n        receivedFileSize = 0;\n\n        _this.setState({\n          fileSize: fileSize,\n          receivedFileSize: receivedFileSize,\n          fileBuffer: fileBuffer\n        });\n      } else {\n        _this.setState({\n          fileSize: fileSize,\n          receivedFileSize: receivedFileSize,\n          fileBuffer: fileBuffer\n        });\n      }\n    };\n\n    _this.setSessionDescriptionError = function (error) {\n      //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n      console.log(\"Failed to create session description: \".concat(error.toString(), \".\"));\n    };\n\n    _this.handleConnectionChange = function (event) {\n      var peerConnection = event.target;\n      console.log('ICE state change event: ', event);\n      if (peerConnection.iceConnectionState == \"connected\") ; //sendFile.disabled = false;\n      //displaySignalMessage(`ICE state: ` +\n      //        `${peerConnection.iceConnectionState}.`);\n\n      console.log(\"ICE state: \" + \"\".concat(peerConnection.iceConnectionState, \".\"));\n    };\n\n    _this.createdOffer = function (rtcPeerConn, description, i) {\n      console.log('offer from this local peer connection: ', description.sdp); //displaySignalMessage('localPeerConnection setLocalDescription start.');\n\n      console.log('localPeerConnection setLocalDescription start.');\n      rtcPeerConn[i].setLocalDescription(description).then(function () {\n        _this.setLocalDescriptionSuccess(rtcPeerConn[i]);\n\n        console.log('Local description created: ', rtcPeerConn[i].localDescription); //displaySignalMessage(\"Local description created..\")\n\n        console.log(\"Local description created..\");\n\n        _this.sendLocalDesc(rtcPeerConn[i].localDescription);\n      }).catch(_this.setSessionDescriptionError);\n    };\n\n    _this.setLocalDescriptionSuccess = function (peerConnection) {\n      _this.setDescriptionSuccess(peerConnection, 'setLocalDescription');\n    };\n\n    _this.setDescriptionSuccess = function (peerConnection, functionName) {\n      //displaySignalMessage(`${functionName} complete.`);\n      console.log(\"\".concat(functionName, \" complete.\"));\n    };\n\n    _this.sendLocalDesc = function (desc) {\n      var socket = _this.props.socket;\n      console.log(\"sending local description\", desc);\n\n      try {\n        //displaySignalMessage(\"16. Sending Local description\");\n        console.log(\"16. Sending Local description\");\n        var sdp = {\n          type: \"SDP\",\n          message: JSON.stringify({\n            'sdp': desc\n          }) //room:SIGNAL_ROOM\n\n        };\n        console.log(\"sdp sent to other nodes in sendLocalDescription: \", sdp);\n        socket.emit('signal', sdp);\n      } catch (e) {\n        _this.logError1(e, \"sending local description\");\n      }\n    };\n\n    _this.setSessionDescriptionError = function (error) {\n      //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n      console.log(\"Failed to create session description: \".concat(error.toString(), \".\"));\n    };\n\n    _this.logError1 = function (error, where) {\n      //displaySignalMessage(\"problems in \" + where +\" \"+ error.name + ': ' + error.message );\n      console.log(\"problems in \" + where + \" \" + error.name + ': ' + error.message);\n    };\n\n    return _this;\n  }\n\n  _createClass(NewPeer, [{\n    key: \"dataChannelStateChanged\",\n    value: function dataChannelStateChanged(e, i, catchDataChannel) {\n      if (catchDataChannel[i].readyState === 'open') {\n        //si el readyState es abierto\n        //displaySignalMessage(\"Data Channel Opened\")\n        console.log(\"Data Channel Opened\");\n      } else {\n        //displaySignalMessage(\"data channel is : \" + catchDataChannel[i].readyState)\n        console.log(\"data channel is : \" + catchDataChannel[i].readyState);\n      }\n    }\n  }, {\n    key: \"handleConnection\",\n    value: function handleConnection(event) {\n      var iceCandidate = event.candidate;\n\n      if (iceCandidate) {\n        var icesReq = this.state.icesReq;\n        icesReq.push(iceCandidate);\n        this.setState({\n          icesReq: icesReq\n        });\n      } else if (!iceCandidate && this.state.icesReq.length > 0) {\n        var socket = this.props.socket;\n        var len = this.state.icesReq.length;\n        var iter = 0; //displaySignalMessage(\"ICE protocol gathered \" + len + \" candidates..\" )\n\n        console.log(\"ICE protocol gathered \" + len + \" candidates..\");\n        var newIceCandidate;\n\n        var _icesReq = _toConsumableArray(this.state.icesReq);\n\n        _icesReq.forEach(function (iceCandidate) {\n          iter++;\n          newIceCandidate = iceCandidate;\n          console.log(\"candidate created ready to be sent: \", newIceCandidate);\n          socket.emit('signal', {\n            \"type\": \"ice candidate\",\n            \"message\": JSON.stringify({\n              'candidate': newIceCandidate\n            }) //\"room\":SIGNAL_ROOM\n\n          }); //displaySignalMessage( iter +\". Sending Ice candidate ...\");\n\n          console.log(iter + \". Sending Ice candidate ...\");\n        });\n\n        socket.emit('signal', {\n          \"type\": \"noIce\",\n          \"message\": \"\" //\"room\":SIGNAL_ROOM})\n\n        }); //icesReq = []\n      } else if (!iceCandidate && this.state.icesReq.length == 0) {\n        //displaySignalMessage(\"Candidate received is null, no candidates received yet, check your code!..\")\n        console.log(\"Candidate received is null, no candidates received yet, check your code!..\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.callAction,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, \"start Call\"));\n    }\n  }]);\n\n  return NewPeer;\n}(Component);\n\nexport { NewPeer as default };","map":{"version":3,"sources":["/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/src/wrtconf/NewPeer.js"],"names":["React","Component","NewPeer","state","fileBuffer","fileSize","icesReq","rtcPeerConn","sendDataChannel","catchDataChannel","callAction","console","log","createPC","Promise","resolve","reject","i","length","initiator","push","setState","then","result","receiveDataChannel","event","channel","onmessage","e","receiveDataChannelMessage","onopen","dataChannelStateChanged","onclose","data","receivedFileSize","byteLength","setSessionDescriptionError","error","toString","handleConnectionChange","peerConnection","target","iceConnectionState","createdOffer","description","sdp","setLocalDescription","setLocalDescriptionSuccess","localDescription","sendLocalDesc","catch","setDescriptionSuccess","functionName","desc","socket","props","type","message","JSON","stringify","emit","logError1","where","name","readyState","iceCandidate","candidate","len","iter","newIceCandidate","forEach"],"mappings":"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","sourcesContent":["import React , {Component} from 'react'\n\nexport default class NewPeer extends Component {    \n\n    state = {\n        fileBuffer : [],\n        fileSize : [],\n        icesReq : [],\n        rtcPeerConn : [],\n        sendDataChannel : [],\n        catchDataChannel : []\n    }\n\n    callAction = () => {\n        //sendFile.disabled = true\n        console.log('Starting operation call.')\n        //let i = null        \n        console.log(0, this.state)\n\n        let createPC = new Promise((resolve,reject) => {              \n                let {rtcPeerConn,sendDataChannel,catchDataChannel} = this.state                \n                const i = rtcPeerConn.length\n                const initiator = null\n                rtcPeerConn.push(initiator)             \n                sendDataChannel.push(initiator)\n                catchDataChannel.push(initiator)                \n                this.setState({i,rtcPeerConn,sendDataChannel,catchDataChannel})                \n                resolve([i,rtcPeerConn,sendDataChannel,catchDataChannel])\n                reject('error...')\n            }).then(result =>{\n                console.log('data after createPC function: ',result)\n                /*\n                return new Promise((resolve,reject)=>{\n                    let {i,rtcPeerConn,sendDataChannel,catchDataChannel} = this.state\n                    const servers = {\n                        'iceServers':[{\n                            'url':'stun:stun.l.google.com:19302'\n                        },{'url': 'stun:stun.services.mozilla.com'}]\n                    }\n                    const dataChannelOptions = {\n                        ordered: true//false, //not guaranteed delivery, unreliable but faster\n                        //maxRetransmitTime:  1000 //miliseconds\n                    }\n                    //callButton.disabled = true;\n                    //hangupButton.disabled = false;\n                    console.log(rtcPeerConn,i)\n                    rtcPeerConn[i] = new window.webkitRTCPeerConnection(servers)\n                    console.log(\"a\")\n                    console.log('Created local peer connection object rtcPeerConn index: ' + i )\n                    const name = 'textMessages' + i\n                    sendDataChannel[i] = rtcPeerConn[i].createDataChannel(name,dataChannelOptions)    \n                    rtcPeerConn[i].ondatachannel = e=>this.receiveDataChannel(e,i,catchDataChannel)\n                    rtcPeerConn[i].addEventListener('icecandidate', this.handleConnection)\n                    rtcPeerConn[i].addEventListener(\n                    'iceconnectionstatechange', this.handleConnectionChange)\n                    resolve([rtcPeerConn,sendDataChannel])\n                    reject('Error on setPC...')\n                }\n                \n                )*/\n                \n            })/*.then(result =>{\n                let [rtcPeerConn,sendDataChannel] = result\n                console.log([rtcPeerConn,sendDataChannel])\n            })*/\n\n        //createPC.then(r=>{\n            //let {i,rtcPeerConn,sendDataChannel,catchDataChannel} = this.state\n            //let [i,rtcPeerConn,sendDataChannel,catchDataChannel] = r\n           //console.log('data after createPC function: ',[i,rtcPeerConn,sendDataChannel,catchDataChannel]);\n            //setPc.then(r=>{\n                //let [rtcPeerConn,sendDataChannel] = r\n                //console.log('data after setPC function: ',[rtcPeerConn,sendDataChannel])\n              //  console.log(r)\n            //})\n        //})\n        //let j=i \n        //displaySignalMessage('peerConnection createOffer start.')\n        //console.log('peerConnection createOffer start.')\n        //rtcPeerConn[i].createOffer()\n        //.then(e => this.createdOffer(rtcPeerConn,e,i)).catch(this.setSessionDescriptionError)\n    }\n\n    \n    \n    \n    receiveDataChannel = (event,i,catchDataChannel)=>{\n        console.log(\"Receiving a data channel\")\n        catchDataChannel[i] = event.channel;//seteando el canal de datos a ser el que el   \n        catchDataChannel[i].onmessage = e=>this.receiveDataChannelMessage(e,i);\n        catchDataChannel[i].onopen = e=>this.dataChannelStateChanged(e,i,catchDataChannel);\n        catchDataChannel[i].onclose = e => this.dataChannelStateChanged(e,i,catchDataChannel);\n        //return catchDataChannel;\n        this.setState({catchDataChannel})\n    }\n    \n    receiveDataChannelMessage = (event, i) => {\n        let fileBuffer = [...this.state.fileBuffer]\n        fileBuffer.push(event.data) //pushing each chunk of the incoming file\n        //into fileBuffer\n        let fileSize = this.state.fileSize\n        let receivedFileSize = this.state.receivedFileSize\n        fileSize += event.data.byteLength //updating the size of the file    \n        //fileProgress.value = fileSize  //------------------------>>>\n        if(fileSize === receivedFileSize){\n            //var received = new window.Blob(fileBuffer)\n            fileBuffer = []\n            //displaySignalMessage(\"clearing fileBuffer...\" + \"length buffer = \"+fileBuffer.length)\n            console.log(\"clearing fileBuffer...\" + \"length buffer = \"+fileBuffer.length)\n            //displaySignalMessage(\"all done... data received\")\n            console.log(\"all done... data received\")\n            //downloadLink.href = URL.createObjectURL(received)//finally when all is received\n            //the peer will get the link to download de file\n            //downloadLink.download = receivedFileName\n            //removeAllChildItems(downloadLink)\n            //downloadLink.appendChild(document.createTextNode(receivedFileName + \"(\" + \n            //fileSize + \") bytes\" ))\n            //displaySignalMessage(\"Received... \" + fileSize + \"/\" + receivedFileSize )\n            console.log(\"Received... \" + fileSize + \"/\" + receivedFileSize)\n            fileSize = 0\n            receivedFileSize = 0\n            this.setState({fileSize,receivedFileSize,fileBuffer})\n        }else{\n            this.setState({fileSize,receivedFileSize,fileBuffer})\n        }\n    }\n\n    dataChannelStateChanged(e,i,catchDataChannel){\n        if(catchDataChannel[i].readyState === 'open'){//si el readyState es abierto\n            //displaySignalMessage(\"Data Channel Opened\")\n            console.log(\"Data Channel Opened\")\n        }else{\n            //displaySignalMessage(\"data channel is : \" + catchDataChannel[i].readyState)\n            console.log(\"data channel is : \" + catchDataChannel[i].readyState)\n        }\n    }\n\n    handleConnection(event) {\n        const iceCandidate = event.candidate;\n        if(iceCandidate){\n            let icesReq = this.state.icesReq\n            icesReq.push(iceCandidate)\n            this.setState({icesReq})\n        }\n        else if (!iceCandidate && this.state.icesReq.length>0) {\n            const {socket} = this.props\n            let len = this.state.icesReq.length\n            let iter = 0\n            //displaySignalMessage(\"ICE protocol gathered \" + len + \" candidates..\" )\n            console.log(\"ICE protocol gathered \" + len + \" candidates..\")\n            let newIceCandidate\n            let icesReq = [...this.state.icesReq]\n            icesReq.forEach(iceCandidate=>{\n                iter++\n                newIceCandidate = iceCandidate\n                console.log(\"candidate created ready to be sent: \", newIceCandidate)\n                socket.emit('signal',{\n                    \"type\":\"ice candidate\",\n                    \"message\":JSON.stringify({'candidate':newIceCandidate}),\n                    //\"room\":SIGNAL_ROOM\n                })\n                //displaySignalMessage( iter +\". Sending Ice candidate ...\");\n                console.log(iter + \". Sending Ice candidate ...\")\n            })\n            socket.emit('signal',{\n                \"type\":\"noIce\",\n                \"message\":\"\",\n                //\"room\":SIGNAL_ROOM})\n            })\n            //icesReq = []\n        }else if(!iceCandidate && this.state.icesReq.length==0){\n            //displaySignalMessage(\"Candidate received is null, no candidates received yet, check your code!..\")\n            console.log(\"Candidate received is null, no candidates received yet, check your code!..\")\n        }\n    }\n\n    setSessionDescriptionError = (error) => {\n        //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n        console.log(`Failed to create session description: ${error.toString()}.`);\n    }\n\n    handleConnectionChange = (event) => {\n        const peerConnection = event.target;\n        console.log('ICE state change event: ', event);\n        if(peerConnection.iceConnectionState == \"connected\"); //sendFile.disabled = false;\n        //displaySignalMessage(`ICE state: ` +\n        //        `${peerConnection.iceConnectionState}.`);\n        console.log(`ICE state: ` +\n                `${peerConnection.iceConnectionState}.`)\n    }\n    \n    createdOffer = (rtcPeerConn,description , i) => {\n        console.log('offer from this local peer connection: ',description.sdp)\n        //displaySignalMessage('localPeerConnection setLocalDescription start.');\n        console.log('localPeerConnection setLocalDescription start.');\n        rtcPeerConn[i].setLocalDescription(description)\n        .then(() => {\n        this.setLocalDescriptionSuccess(rtcPeerConn[i]);\n        console.log('Local description created: ',rtcPeerConn[i].localDescription)\n        //displaySignalMessage(\"Local description created..\")\n        console.log(\"Local description created..\")\n        this.sendLocalDesc(rtcPeerConn[i].localDescription)\n        }).catch(this.setSessionDescriptionError);\n    }\n\n    setLocalDescriptionSuccess = (peerConnection) => {\n        this.setDescriptionSuccess(peerConnection, 'setLocalDescription');\n    }\n\n    setDescriptionSuccess = (peerConnection, functionName) => {\n        //displaySignalMessage(`${functionName} complete.`);\n        console.log(`${functionName} complete.`)\n    }\n\n    sendLocalDesc = (desc) => {\n        const {socket} = this.props\n        console.log(\"sending local description\",desc);\n        try{\n            //displaySignalMessage(\"16. Sending Local description\");\n            console.log(\"16. Sending Local description\")\n            var sdp = {\n                type:\"SDP\",\n                message:JSON.stringify({'sdp':desc}),\n                //room:SIGNAL_ROOM\n            }\n            console.log(\"sdp sent to other nodes in sendLocalDescription: \",sdp)\n            socket.emit('signal',sdp);\n        }catch(e){\n            this.logError1(e,\"sending local description\");\n        }\n    }\n\n    setSessionDescriptionError = error => {\n        //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n        console.log(`Failed to create session description: ${error.toString()}.`);\n    }\n\n    logError1 = (error,where) => {\n        //displaySignalMessage(\"problems in \" + where +\" \"+ error.name + ': ' + error.message );\n        console.log(\"problems in \" + where +\" \"+ error.name + ': ' + error.message )\n    }\n\n    render() {\n        return(\n            <div>\n                <button onClick = {this.callAction}>start Call</button>\n            </div>\n        )\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}