{"ast":null,"code":"import _regeneratorRuntime from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch/webrtc/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch/webrtc/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch/webrtc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport PouchDB from 'pouchdb';\nimport { v1 } from 'uuid';\n\nvar DB = function DB(name) {\n  var _this = this;\n\n  _classCallCheck(this, DB);\n\n  this.getUUID =\n  /*#__PURE__*/\n  _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var node_uuid;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _this.db.get('my_UUID').then(function (result) {\n              return node_uuid = result.value;\n            }).catch(function (e) {\n              return node_uuid = e.name;\n            });\n\n          case 2:\n            console.log(\"node_uuid\", node_uuid);\n            return _context.abrupt(\"return\", node_uuid);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  this.createUUID = function () {\n    return v1();\n  };\n\n  this.saveUUID =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(my_UUID) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _this.db.put({\n                _id: 'my_UUID',\n                value: my_UUID\n              }).then(function (r) {\n                return my_UUID;\n              }).catch(function (e) {\n                return console.log('Error saving id: ', e.name);\n              });\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  this.db = new PouchDB(name);\n};\n\nexport { DB as default };","map":{"version":3,"sources":["/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch/webrtc/src/DB.js"],"names":["PouchDB","v1","DB","name","getUUID","db","get","then","result","node_uuid","value","catch","e","console","log","createUUID","saveUUID","my_UUID","put","_id","r"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,SAASC,EAAT,QAAmB,MAAnB;;IAEqBC,E,GACjB,YAAYC,IAAZ,EAAiB;AAAA;;AAAA;;AAAA,OAIjBC,OAJiB;AAAA;AAAA;AAAA;AAAA,2BAIP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEA,KAAI,CAACC,EAAL,CAAQC,GAAR,CAAY,SAAZ,EAAuBC,IAAvB,CAA4B,UAAAC,MAAM;AAAA,qBAAIC,SAAS,GAAGD,MAAM,CAACE,KAAvB;AAAA,aAAlC,EAAiEC,KAAjE,CAAuE,UAAAC,CAAC;AAAA,qBAAIH,SAAS,GAAGG,CAAC,CAACT,IAAlB;AAAA,aAAxE,CAFA;;AAAA;AAGNU,YAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAwBL,SAAxB;AAHM,6CAICA,SAJD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAJO;;AAAA,OAWjBM,UAXiB,GAWJ,YAAK;AACd,WAAOd,EAAE,EAAT;AACH,GAbgB;;AAAA,OAejBe,QAfiB;AAAA;AAAA;AAAA;AAAA;AAAA,6BAeN,kBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AACP,cAAA,KAAI,CAACZ,EAAL,CAAQa,GAAR,CAAY;AAACC,gBAAAA,GAAG,EAAC,SAAL;AAAeT,gBAAAA,KAAK,EAACO;AAArB,eAAZ,EAA2CV,IAA3C,CAAgD,UAAAa,CAAC,EAAE;AAAC,uBAAOH,OAAP;AAAe,eAAnE,EACCN,KADD,CACO,UAAAC,CAAC;AAAA,uBAAEC,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,CAAC,CAACT,IAAnC,CAAF;AAAA,eADR;;AADO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAfM;;AAAA;AAAA;AAAA;AAAA;;AACb,OAAKE,EAAL,GAAU,IAAIL,OAAJ,CAAYG,IAAZ,CAAV;AACH,C;;SAHgBD,E","sourcesContent":["import PouchDB from 'pouchdb'\nimport { v1 } from 'uuid';\n\nexport default class DB {\n    constructor(name){\n        this.db = new PouchDB(name)\n    }\n\n    getUUID = async () => {\n        let node_uuid \n        await this.db.get('my_UUID').then(result => node_uuid = result.value ).catch(e => node_uuid = e.name)      \n        console.log(\"node_uuid\",node_uuid)\n        return node_uuid\n    }\n\n    createUUID = () =>{\n        return v1()\n    }\n\n    saveUUID = async (my_UUID) => {\n        this.db.put({_id:'my_UUID',value:my_UUID}).then(r=>{return my_UUID})\n        .catch(e=>console.log('Error saving id: ', e.name ))\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}