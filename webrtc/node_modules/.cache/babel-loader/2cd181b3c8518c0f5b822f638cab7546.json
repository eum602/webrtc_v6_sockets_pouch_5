{"ast":null,"code":"import _classCallCheck from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/src/App.js\";\n// import packages\nimport React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport { v1 } from 'uuid'; // Making the App component\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      //node_id:v1(),\n      endpoint: \"http://localhost:4001\",\n      // this is where we are connecting to with sockets\n      newReload: true\n    };\n\n    _this.send = function () {\n      var socket = socketIOClient(_this.state.endpoint); // this emits an event to the socket (your server) with an argument of 'red'\n      // you can make the argument any color you would like, or any kind of data you want to send.    \n\n      socket.emit('change color', _this.state.color); //'red'\n      // socket.emit('change color', 'red', 'yellow') | you can have multiple arguments\n    };\n\n    _this.setColor = function (color) {\n      _this.setState({\n        color: color\n      });\n    };\n\n    _this.setReload = function () {\n      _this.setState({\n        newReload: false\n      });\n    };\n\n    _this.addNewNodeHandler = function (otherNodes_id) {\n      _this.setState({\n        otherNodes_id: otherNodes_id\n      }); //displaySignalMessage('New candidate peer ... trying to connect ' + data.node_id)\n\n\n      console.log('New candidate peer ... trying to connect ', otherNodes_id[otherNodes_id.length - 1]);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var socket = socketIOClient(this.state.endpoint);\n      socket.on(\"confirmRegisteredSocket\", function (_ref) {\n        var id = _ref.id;\n        return console.log(id);\n      });\n      socket.on('newPeer', function (_ref2) {\n        var other_node = _ref2.other_node;\n        console.log(\"Entering to register new peer\");\n        var node_index = null;\n        var otherNodes_id = []; //if(this.state.nodes_id) {nodes_id = this.state.nodes_id}else{nodes_id = []}      \n\n        var k = 0;\n\n        for (var _i = 0; _i < otherNodes_id.length; _i++) {\n          var node_id = otherNodes_id[_i];\n\n          if (node_id === other_node) {\n            node_index = k;\n          }\n\n          k++;\n        }\n\n        if (!node_index) {\n          this.addNewNodeHandler(otherNodes_id);\n        }\n      });\n    } // method for emitting a socket.io event\n\n  }, {\n    key: \"render\",\n    // render method that renders in code if the state is updated\n    value: function render() {\n      var _this2 = this;\n\n      // Within the render method, we will be checking for any sockets.\n      // We do it in the render method because it is ran very often.\n      var socket = socketIOClient(this.state.endpoint);\n      console.log(socket.id);\n\n      if (this.state.newReload) {\n        socket.emit('initiate', {\n          \"set_room\": \"SET_ROOM\",\n          'node_id': socket.sessionid\n        }); //this.state.node_id})\n      } // socket.on is another method that checks for incoming events from the server\n      // This method is looking for the event 'change color'\n      // socket.on takes a callback function for the first argument\n\n\n      socket.on('change color', function (color) {\n        // setting the color of our button\n        document.body.style.backgroundColor = color;\n      });\n      return React.createElement(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.send();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Change Color\"), React.createElement(\"button\", {\n        id: \"blue\",\n        onClick: function onClick() {\n          return _this2.setColor('blue');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Blue\"), React.createElement(\"button\", {\n        id: \"red\",\n        onClick: function onClick() {\n          return _this2.setColor('red');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Red\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/src/App.js"],"names":["React","Component","socketIOClient","v1","App","state","endpoint","newReload","send","socket","emit","color","setColor","setState","setReload","addNewNodeHandler","otherNodes_id","console","log","length","on","id","other_node","node_index","k","node_id","sessionid","document","body","style","backgroundColor","textAlign"],"mappings":"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","sourcesContent":["// import packages\nimport React, { Component } from 'react'\nimport socketIOClient from 'socket.io-client'\nimport { v1 } from 'uuid';\n\n// Making the App component\nclass App extends Component {\n    state = {\n      //node_id:v1(),\n      endpoint: \"http://localhost:4001\", // this is where we are connecting to with sockets\n      newReload: true,      \n    }\n\n  componentWillMount() {\n    const socket = socketIOClient(this.state.endpoint)\n    socket.on(\"confirmRegisteredSocket\",({id})=>console.log(id))\n    socket.on('newPeer',function({other_node}){\n      console.log(\"Entering to register new peer\")\n      let node_index = null\n      const otherNodes_id = []\n      //if(this.state.nodes_id) {nodes_id = this.state.nodes_id}else{nodes_id = []}      \n      let k = 0\n      for(let node_id of otherNodes_id){\n          if(node_id === other_node){\n              node_index = k\n          }\n          k++\n      }\n      if(!node_index){\n        this.addNewNodeHandler(otherNodes_id)\n      }\n    })    \n  }\n  \n  \n  // method for emitting a socket.io event\n  send = () => {\n    const socket = socketIOClient(this.state.endpoint)    \n    // this emits an event to the socket (your server) with an argument of 'red'\n    // you can make the argument any color you would like, or any kind of data you want to send.    \n    socket.emit('change color', this.state.color) //'red'\n    // socket.emit('change color', 'red', 'yellow') | you can have multiple arguments\n  }\n\n  setColor = (color) => {\n    this.setState({ color })\n  }\n\n  setReload = () => {\n    this.setState({newReload:false})\n  }\n\n  addNewNodeHandler = (otherNodes_id) =>{\n    this.setState({otherNodes_id})\n    //displaySignalMessage('New candidate peer ... trying to connect ' + data.node_id)\n    console.log('New candidate peer ... trying to connect ' , otherNodes_id[otherNodes_id.length-1])\n  }\n  \n  // render method that renders in code if the state is updated\n  render() {\n    // Within the render method, we will be checking for any sockets.\n    // We do it in the render method because it is ran very often.\n    const socket = socketIOClient(this.state.endpoint)\n    console.log(socket.id)\n    if(this.state.newReload){\n      socket.emit('initiate',{\"set_room\":\"SET_ROOM\",'node_id':socket.sessionid})//this.state.node_id})\n    }    \n    \n    // socket.on is another method that checks for incoming events from the server\n    // This method is looking for the event 'change color'\n    // socket.on takes a callback function for the first argument\n    socket.on('change color', (color) => {\n      // setting the color of our button\n      document.body.style.backgroundColor = color\n    })\n\n\n     \n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <button onClick={() => this.send()}>Change Color</button>\n        <button id=\"blue\" onClick={() => this.setColor('blue')}>Blue</button>\n        <button id=\"red\" onClick={() => this.setColor('red')}>Red</button>\n      </div>\n    )\n  }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}