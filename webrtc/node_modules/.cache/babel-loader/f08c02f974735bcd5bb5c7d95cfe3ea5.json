{"ast":null,"code":"import _classCallCheck from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/src/App.js\";\n// import packages\nimport React, { Component } from 'react'; //import socketIOClient from 'socket.io-client'\n\nimport io from 'socket.io-client';\nimport { v1 } from 'uuid';\nvar endpoint = \"http://localhost:4001\"; // this is where we are connecting to with sockets\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      //node_id:v1(),\n      newReload: true,\n      socket: io(endpoint),\n      otherNodes_id: []\n    };\n\n    _this.send = function () {\n      _this.state.socket.emit('change color', _this.state.color); //'red'\n      // socket.emit('change color', 'red', 'yellow') | you can have multiple arguments\n\n    };\n\n    _this.setColor = function (color) {\n      _this.setState({\n        color: color\n      });\n    };\n\n    _this.setReload = function (e) {\n      console.log(\"e: \", e);\n      if (e === \"OK\") _this.setState({\n        newReload: false\n      });\n    };\n\n    _this.pqr = function (otherNodes_id) {\n      _this.setState({\n        otherNodes_id: otherNodes_id\n      }); //displaySignalMessage('New candidate peer ... trying to connect ' + data.node_id)\n\n\n      console.log('New candidate peer ... trying to connect ', otherNodes_id[otherNodes_id.length - 1]);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      var socket = this.state.socket;\n      socket.on('connect', function () {\n        console.log(\"triggered socket.id: \", _this2.state.socket.id);\n      });\n    } // method for emitting a socket.io event\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var socket = this.state.socket;\n      socket.on('newPeer', function (_ref) {\n        var other_node = _ref.other_node;\n        console.log(\"Entering to register new peer\");\n        var nodes_id = [];\n        var node_index = null;\n\n        if (_this3.state.otherNodes_id) {\n          nodes_id = _this3.state.otherNodes_id;\n          var k = 0;\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = nodes_id[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var node_id = _step.value;\n\n              if (node_id === other_node) {\n                node_index = k;\n              }\n\n              k++;\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n        }\n      });\n\n      if (this.state.newReload) {\n        socket.emit('initiate', {\n          \"set_room\": \"SET_ROOM\"\n        }, this.setReload);\n      }\n\n      if (!this.state.newReload) {\n        socket.emit('serachingPeer', {\n          id: socket.id\n        });\n      }\n\n      socket.on('change color', function (color) {\n        document.body.style.backgroundColor = color;\n      });\n      return React.createElement(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this3.send();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Change Color\"), React.createElement(\"button\", {\n        id: \"blue\",\n        onClick: function onClick() {\n          return _this3.setColor('blue');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Blue\"), React.createElement(\"button\", {\n        id: \"red\",\n        onClick: function onClick() {\n          return _this3.setColor('red');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Red\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/src/App.js"],"names":["React","Component","io","v1","endpoint","App","state","newReload","socket","otherNodes_id","send","emit","color","setColor","setState","setReload","e","console","log","pqr","length","on","id","other_node","nodes_id","node_index","k","node_id","document","body","style","backgroundColor","textAlign"],"mappings":"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","sourcesContent":["// import packages\nimport React, { Component } from 'react'\n//import socketIOClient from 'socket.io-client'\nimport io from 'socket.io-client'\nimport { v1 } from 'uuid';\nconst endpoint = \"http://localhost:4001\" // this is where we are connecting to with sockets\nclass App extends Component {\n    state = {\n      //node_id:v1(),\n      newReload: true,\n      socket:io(endpoint),\n      otherNodes_id:[]\n    }\n\n  componentWillMount() {\n    const {socket} =this.state\n    socket.on('connect', ()=>{      \n      console.log(\"triggered socket.id: \",this.state.socket.id)\n    })\n  }\n \n  // method for emitting a socket.io event\n  send = () => {\n    this.state.socket.emit('change color', this.state.color) //'red'\n    // socket.emit('change color', 'red', 'yellow') | you can have multiple arguments\n  }\n\n  setColor = (color) => {\n    this.setState({ color })\n  }\n\n  setReload = (e) => {\n    console.log(\"e: \",e)\n    if(e===\"OK\")this.setState({newReload:false});\n  }\n\n  pqr = (otherNodes_id) =>{\n    this.setState({otherNodes_id})\n    //displaySignalMessage('New candidate peer ... trying to connect ' + data.node_id)\n    console.log('New candidate peer ... trying to connect ' , otherNodes_id[otherNodes_id.length-1])\n  }\n  render() {\n    const {socket} = this.state    \n\n    socket.on('newPeer', ({other_node}) => {\n      console.log(\"Entering to register new peer\")\n      let nodes_id = []\n      let node_index = null\n      if(this.state.otherNodes_id) {\n        nodes_id = this.state.otherNodes_id;\n        let k = 0\n        for(let node_id of nodes_id){\n            if(node_id === other_node){\n                node_index = k\n            }\n            k++\n        }\n      }\n    })\n    \n    if(this.state.newReload){\n      socket.emit('initiate',\n      {\"set_room\":\"SET_ROOM\"},this.setReload)\n    }\n\n    if(!this.state.newReload){\n      socket.emit('serachingPeer',{id:socket.id})\n    }\n\n    socket.on('change color', (color) => {\n      document.body.style.backgroundColor = color\n    })\n    \n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <button onClick={() => this.send()}>Change Color</button>\n        <button id=\"blue\" onClick={() => this.setColor('blue')}>Blue</button>\n        <button id=\"red\" onClick={() => this.setColor('red')}>Red</button>\n      </div>\n    )\n  }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}