{"ast":null,"code":"import _objectSpread from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_4/webrtc/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_4/webrtc/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_4/webrtc/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_4/webrtc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport PouchDB from 'pouchdb';\nimport { v1 } from 'uuid';\nimport PouchdbFind from 'pouchdb-find'; //PouchDB.plugin(require('pouchdb-find'));\n\nvar DB = function DB(name) {\n  var _this = this;\n\n  _classCallCheck(this, DB);\n\n  this.getUUID =\n  /*#__PURE__*/\n  _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var node_uuid;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _this.db.get('my_UUID').then(function (result) {\n              return node_uuid = result.value;\n            }).catch(function (e) {\n              return node_uuid = e.name;\n            });\n\n          case 2:\n            return _context.abrupt(\"return\", node_uuid);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  this.createUUID = function () {\n    return v1();\n  };\n\n  this.saveUUID =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(my_UUID) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _this.db.put({\n                _id: 'my_UUID',\n                value: my_UUID\n              }).then(function (r) {\n                return my_UUID;\n              }).catch(function (e) {\n                return console.log('Error saving id: ', e.name);\n              });\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  this.saveBlockchain =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(B) {\n      var _id, block, res, message;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              _id = B.index.toString();\n              block = _objectSpread({}, B, {\n                _id: _id\n              });\n              _context3.next = 5;\n              return _this.db.post(block);\n\n            case 5:\n              res = _context3.sent;\n              return _context3.abrupt(\"return\", res);\n\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](0);\n              message = _context3.t0.message;\n              console.log('Error on saveBlockchain method in class DB.js: ', message);\n              return _context3.abrupt(\"return\", 'error');\n\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this, [[0, 9]]);\n    }));\n\n    return function (_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  this.saveTx =\n  /*#__PURE__*/\n  function () {\n    var _ref4 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4(newTx) {\n      var type, totalTx, res, message;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              type = 'pendingTransaction';\n              totalTx = _objectSpread({}, newTx, {\n                type: type\n              });\n              _context4.next = 5;\n              return _this.db.post(totalTx);\n\n            case 5:\n              res = _context4.sent;\n              return _context4.abrupt(\"return\", res);\n\n            case 9:\n              _context4.prev = 9;\n              _context4.t0 = _context4[\"catch\"](0);\n              message = _context4.t0.message;\n              console.log('Error saving new Transaction on DB.js: ', message);\n              return _context4.abrupt(\"return\", 'error');\n\n            case 14:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this, [[0, 9]]);\n    }));\n\n    return function (_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  PouchDB.plugin(PouchdbFind);\n  this.db = new PouchDB(name);\n};\n\nexport { DB as default };","map":{"version":3,"sources":["/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_4/webrtc/src/DB.js"],"names":["PouchDB","v1","PouchdbFind","DB","name","getUUID","db","get","then","result","node_uuid","value","catch","e","createUUID","saveUUID","my_UUID","put","_id","r","console","log","saveBlockchain","B","index","toString","block","post","res","message","saveTx","newTx","type","totalTx","plugin"],"mappings":"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","sourcesContent":["import PouchDB from 'pouchdb'\nimport { v1 } from 'uuid'\nimport PouchdbFind from 'pouchdb-find';\n//PouchDB.plugin(require('pouchdb-find'));\n\nexport default class DB {\n    constructor(name){\n        PouchDB.plugin(PouchdbFind)\n        this.db = new PouchDB(name)\n    }\n\n    getUUID = async () => {\n        let node_uuid \n        await this.db.get('my_UUID').then(result => node_uuid = result.value ).catch(e => node_uuid = e.name)        \n        return node_uuid\n    }\n\n    createUUID = () =>{\n        return v1()\n    }\n\n    saveUUID = async (my_UUID) => {\n        await this.db.put({_id:'my_UUID',value:my_UUID}).then(r=>{return my_UUID})\n        .catch(e=>console.log('Error saving id: ', e.name ))\n    }\n\n    saveBlockchain = async (B) =>{\n        try{\n            const _id = B.index.toString()\n            const block = {...B,_id}\n            const res = await this.db.post(block)\n            //const {id} = res\n            return res\n        }catch(e){\n            const {message} = e\n            console.log('Error on saveBlockchain method in class DB.js: ',message)\n            return 'error'\n        }\n    }\n\n    saveTx = async (newTx) =>{\n        try{            \n            const type = 'pendingTransaction'\n            const totalTx = {...newTx,type}\n            const res = await this.db.post(totalTx)\n            //const {id} = res\n            return res\n        }catch(e){\n            const {message} = e\n            console.log('Error saving new Transaction on DB.js: ',message)\n            return 'error'\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}