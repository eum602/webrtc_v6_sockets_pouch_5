{"ast":null,"code":"function pad(str, padWith, upToLength) {\n  var padding = '';\n  var targetLength = upToLength - str.length;\n  /* istanbul ignore next */\n\n  while (padding.length < targetLength) {\n    padding += padWith;\n  }\n\n  return padding;\n}\n\nfunction padLeft(str, padWith, upToLength) {\n  var padding = pad(str, padWith, upToLength);\n  return padding + str;\n}\n\nvar MIN_MAGNITUDE = -324; // verified by -Number.MIN_VALUE\n\nvar MAGNITUDE_DIGITS = 3; // ditto\n\nvar SEP = ''; // set to '_' for easier debugging \n\nfunction collate(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  a = normalizeKey(a);\n  b = normalizeKey(b);\n  var ai = collationIndex(a);\n  var bi = collationIndex(b);\n\n  if (ai - bi !== 0) {\n    return ai - bi;\n  }\n\n  switch (typeof a) {\n    case 'number':\n      return a - b;\n\n    case 'boolean':\n      return a < b ? -1 : 1;\n\n    case 'string':\n      return stringCollate(a, b);\n  }\n\n  return Array.isArray(a) ? arrayCollate(a, b) : objectCollate(a, b);\n} // couch considers null/NaN/Infinity/-Infinity === undefined,\n// for the purposes of mapreduce indexes. also, dates get stringified.\n\n\nfunction normalizeKey(key) {\n  switch (typeof key) {\n    case 'undefined':\n      return null;\n\n    case 'number':\n      if (key === Infinity || key === -Infinity || isNaN(key)) {\n        return null;\n      }\n\n      return key;\n\n    case 'object':\n      var origKey = key;\n\n      if (Array.isArray(key)) {\n        var len = key.length;\n        key = new Array(len);\n\n        for (var i = 0; i < len; i++) {\n          key[i] = normalizeKey(origKey[i]);\n        }\n        /* istanbul ignore next */\n\n      } else if (key instanceof Date) {\n        return key.toJSON();\n      } else if (key !== null) {\n        // generic object\n        key = {};\n\n        for (var k in origKey) {\n          if (origKey.hasOwnProperty(k)) {\n            var val = origKey[k];\n\n            if (typeof val !== 'undefined') {\n              key[k] = normalizeKey(val);\n            }\n          }\n        }\n      }\n\n  }\n\n  return key;\n}\n\nfunction indexify(key) {\n  if (key !== null) {\n    switch (typeof key) {\n      case 'boolean':\n        return key ? 1 : 0;\n\n      case 'number':\n        return numToIndexableString(key);\n\n      case 'string':\n        // We've to be sure that key does not contain \\u0000\n        // Do order-preserving replacements:\n        // 0 -> 1, 1\n        // 1 -> 1, 2\n        // 2 -> 2, 2\n\n        /* eslint-disable no-control-regex */\n        return key.replace(/\\u0002/g, \"\\x02\\x02\").replace(/\\u0001/g, \"\\x01\\x02\").replace(/\\u0000/g, \"\\x01\\x01\");\n\n      /* eslint-enable no-control-regex */\n\n      case 'object':\n        var isArray = Array.isArray(key);\n        var arr = isArray ? key : Object.keys(key);\n        var i = -1;\n        var len = arr.length;\n        var result = '';\n\n        if (isArray) {\n          while (++i < len) {\n            result += toIndexableString(arr[i]);\n          }\n        } else {\n          while (++i < len) {\n            var objKey = arr[i];\n            result += toIndexableString(objKey) + toIndexableString(key[objKey]);\n          }\n        }\n\n        return result;\n    }\n  }\n\n  return '';\n} // convert the given key to a string that would be appropriate\n// for lexical sorting, e.g. within a database, where the\n// sorting is the same given by the collate() function.\n\n\nfunction toIndexableString(key) {\n  var zero = \"\\0\";\n  key = normalizeKey(key);\n  return collationIndex(key) + SEP + indexify(key) + zero;\n}\n\nfunction parseNumber(str, i) {\n  var originalIdx = i;\n  var num;\n  var zero = str[i] === '1';\n\n  if (zero) {\n    num = 0;\n    i++;\n  } else {\n    var neg = str[i] === '0';\n    i++;\n    var numAsString = '';\n    var magAsString = str.substring(i, i + MAGNITUDE_DIGITS);\n    var magnitude = parseInt(magAsString, 10) + MIN_MAGNITUDE;\n    /* istanbul ignore next */\n\n    if (neg) {\n      magnitude = -magnitude;\n    }\n\n    i += MAGNITUDE_DIGITS;\n\n    while (true) {\n      var ch = str[i];\n\n      if (ch === \"\\0\") {\n        break;\n      } else {\n        numAsString += ch;\n      }\n\n      i++;\n    }\n\n    numAsString = numAsString.split('.');\n\n    if (numAsString.length === 1) {\n      num = parseInt(numAsString, 10);\n    } else {\n      /* istanbul ignore next */\n      num = parseFloat(numAsString[0] + '.' + numAsString[1]);\n    }\n    /* istanbul ignore next */\n\n\n    if (neg) {\n      num = num - 10;\n    }\n    /* istanbul ignore next */\n\n\n    if (magnitude !== 0) {\n      // parseFloat is more reliable than pow due to rounding errors\n      // e.g. Number.MAX_VALUE would return Infinity if we did\n      // num * Math.pow(10, magnitude);\n      num = parseFloat(num + 'e' + magnitude);\n    }\n  }\n\n  return {\n    num: num,\n    length: i - originalIdx\n  };\n} // move up the stack while parsing\n// this function moved outside of parseIndexableString for performance\n\n\nfunction pop(stack, metaStack) {\n  var obj = stack.pop();\n\n  if (metaStack.length) {\n    var lastMetaElement = metaStack[metaStack.length - 1];\n\n    if (obj === lastMetaElement.element) {\n      // popping a meta-element, e.g. an object whose value is another object\n      metaStack.pop();\n      lastMetaElement = metaStack[metaStack.length - 1];\n    }\n\n    var element = lastMetaElement.element;\n    var lastElementIndex = lastMetaElement.index;\n\n    if (Array.isArray(element)) {\n      element.push(obj);\n    } else if (lastElementIndex === stack.length - 2) {\n      // obj with key+value\n      var key = stack.pop();\n      element[key] = obj;\n    } else {\n      stack.push(obj); // obj with key only\n    }\n  }\n}\n\nfunction parseIndexableString(str) {\n  var stack = [];\n  var metaStack = []; // stack for arrays and objects\n\n  var i = 0;\n  /*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n\n  while (true) {\n    var collationIndex = str[i++];\n\n    if (collationIndex === \"\\0\") {\n      if (stack.length === 1) {\n        return stack.pop();\n      } else {\n        pop(stack, metaStack);\n        continue;\n      }\n    }\n\n    switch (collationIndex) {\n      case '1':\n        stack.push(null);\n        break;\n\n      case '2':\n        stack.push(str[i] === '1');\n        i++;\n        break;\n\n      case '3':\n        var parsedNum = parseNumber(str, i);\n        stack.push(parsedNum.num);\n        i += parsedNum.length;\n        break;\n\n      case '4':\n        var parsedStr = '';\n        /*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n\n        while (true) {\n          var ch = str[i];\n\n          if (ch === \"\\0\") {\n            break;\n          }\n\n          parsedStr += ch;\n          i++;\n        } // perform the reverse of the order-preserving replacement\n        // algorithm (see above)\n\n        /* eslint-disable no-control-regex */\n\n\n        parsedStr = parsedStr.replace(/\\u0001\\u0001/g, \"\\0\").replace(/\\u0001\\u0002/g, \"\\x01\").replace(/\\u0002\\u0002/g, \"\\x02\");\n        /* eslint-enable no-control-regex */\n\n        stack.push(parsedStr);\n        break;\n\n      case '5':\n        var arrayElement = {\n          element: [],\n          index: stack.length\n        };\n        stack.push(arrayElement.element);\n        metaStack.push(arrayElement);\n        break;\n\n      case '6':\n        var objElement = {\n          element: {},\n          index: stack.length\n        };\n        stack.push(objElement.element);\n        metaStack.push(objElement);\n        break;\n\n      /* istanbul ignore next */\n\n      default:\n        throw new Error('bad collationIndex or unexpectedly reached end of input: ' + collationIndex);\n    }\n  }\n}\n\nfunction arrayCollate(a, b) {\n  var len = Math.min(a.length, b.length);\n\n  for (var i = 0; i < len; i++) {\n    var sort = collate(a[i], b[i]);\n\n    if (sort !== 0) {\n      return sort;\n    }\n  }\n\n  return a.length === b.length ? 0 : a.length > b.length ? 1 : -1;\n}\n\nfunction stringCollate(a, b) {\n  // See: https://github.com/daleharvey/pouchdb/issues/40\n  // This is incompatible with the CouchDB implementation, but its the\n  // best we can do for now\n  return a === b ? 0 : a > b ? 1 : -1;\n}\n\nfunction objectCollate(a, b) {\n  var ak = Object.keys(a),\n      bk = Object.keys(b);\n  var len = Math.min(ak.length, bk.length);\n\n  for (var i = 0; i < len; i++) {\n    // First sort the keys\n    var sort = collate(ak[i], bk[i]);\n\n    if (sort !== 0) {\n      return sort;\n    } // if the keys are equal sort the values\n\n\n    sort = collate(a[ak[i]], b[bk[i]]);\n\n    if (sort !== 0) {\n      return sort;\n    }\n  }\n\n  return ak.length === bk.length ? 0 : ak.length > bk.length ? 1 : -1;\n} // The collation is defined by erlangs ordered terms\n// the atoms null, true, false come first, then numbers, strings,\n// arrays, then objects\n// null/undefined/NaN/Infinity/-Infinity are all considered null\n\n\nfunction collationIndex(x) {\n  var id = ['boolean', 'number', 'string', 'object'];\n  var idx = id.indexOf(typeof x); //false if -1 otherwise true, but fast!!!!1\n\n  if (~idx) {\n    if (x === null) {\n      return 1;\n    }\n\n    if (Array.isArray(x)) {\n      return 5;\n    }\n\n    return idx < 3 ? idx + 2 : idx + 3;\n  }\n  /* istanbul ignore next */\n\n\n  if (Array.isArray(x)) {\n    return 5;\n  }\n} // conversion:\n// x yyy zz...zz\n// x = 0 for negative, 1 for 0, 2 for positive\n// y = exponent (for negative numbers negated) moved so that it's >= 0\n// z = mantisse\n\n\nfunction numToIndexableString(num) {\n  if (num === 0) {\n    return '1';\n  } // convert number to exponential format for easier and\n  // more succinct string sorting\n\n\n  var expFormat = num.toExponential().split(/e\\+?/);\n  var magnitude = parseInt(expFormat[1], 10);\n  var neg = num < 0;\n  var result = neg ? '0' : '2'; // first sort by magnitude\n  // it's easier if all magnitudes are positive\n\n  var magForComparison = (neg ? -magnitude : magnitude) - MIN_MAGNITUDE;\n  var magString = padLeft(magForComparison.toString(), '0', MAGNITUDE_DIGITS);\n  result += SEP + magString; // then sort by the factor\n\n  var factor = Math.abs(parseFloat(expFormat[0])); // [1..10)\n\n  /* istanbul ignore next */\n\n  if (neg) {\n    // for negative reverse ordering\n    factor = 10 - factor;\n  }\n\n  var factorStr = factor.toFixed(20); // strip zeros from the end\n\n  factorStr = factorStr.replace(/\\.?0+$/, '');\n  result += SEP + factorStr;\n  return result;\n}\n\nexport { collate, normalizeKey, toIndexableString, parseIndexableString };","map":null,"metadata":{},"sourceType":"module"}