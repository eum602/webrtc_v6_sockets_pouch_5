{"ast":null,"code":"import _regeneratorRuntime from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_5/webrtc/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_5/webrtc/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_5/webrtc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_5/webrtc/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar NewPeer =\n/*#__PURE__*/\nfunction () {\n  function NewPeer(_socket, _peer_id) {\n    var _this = this;\n\n    _classCallCheck(this, NewPeer);\n\n    this.callee = function () {\n      _this.calleeVariable = true; //this.will()\n\n      _this.did();\n    };\n\n    this.callAction = function () {\n      _this.caller = true;\n      console.log('socket:', _this.socket);\n      var socket = _this.socket; //this.will()\n\n      _this.did(); //peer_id = this.props.peer_id\n\n\n      if (!_this.told) {\n        _this.told = true;\n        socket.emit('initSendCandidates', {\n          message: \"start\",\n          \"peer_id\": _this.peer_id\n        });\n      } //sendFile.disabled = true\n\n\n      console.log('Starting operation call.'); //let i = null\n      //console.log(0, this.state)\n\n      new Promise(function (resolve, reject) {\n        //this.setState({i,rtcPeerConn,sendDataChannel,catchDataChannel})\n        resolve(_this.createPC());\n        reject('error...');\n      }).then(function (i) {\n        //console.log('state data after create: ' , this.state)\n        console.log('data after createPC function: ', i);\n        console.log(\"i after createPc fcn\", i);\n\n        if (i >= 0) {\n          return new Promise(function (resolve, reject) {\n            resolve(_this.setPC(i));\n            reject('Error on setPC...');\n          }).then(function (result) {\n            //displaySignalMessage('peerConnection createOffer start.')\n            //let [rtcPeerConn,sendDataChannel] = result\n            console.log('peerConnection createOffer start.');\n\n            _this.rtcPeerConn[i].createOffer().then(function (e) {\n              return _this.createdOffer(e, i);\n            }).catch(_this.setSessionDescriptionError);\n          });\n        } else {\n          return new Promise(function (resolve, reject) {\n            reject('Error on nowhere...');\n          });\n        }\n      }).then(function (result) {\n        console.log(result);\n      }).catch(function (e) {\n        return console.log(e);\n      });\n    };\n\n    this.createPC = function () {\n      console.log(\"rtcPeerConn1: \", _this.rtcPeerConn);\n      var i = _this.rtcPeerConn.length;\n      console.log('is', i);\n      var initiator = null;\n\n      _this.rtcPeerConn.push(initiator);\n\n      _this.sendDataChannel.push(initiator);\n\n      _this.catchDataChannel.push(initiator);\n\n      return i;\n    };\n\n    this.setPC = function (i) {\n      var servers = {\n        'iceServers': [//{\n        //'url':'stun:stun.l.google.com:19302'\n        //},{'url': 'stun:stun.services.mozilla.com'}\n        {\n          'url': 'turn:kaydee@159.65.151.221',\n          'credential': 'userdeepak',\n          'username': 'kaydee'\n        }]\n      };\n      var dataChannelOptions = {\n        ordered: true //false, //not guaranteed delivery, unreliable but faster\n        //maxRetransmitTime:  1000 //miliseconds\n        //callButton.disabled = true;\n        //hangupButton.disabled = false;\n\n      };\n      console.log(\"Received data in setPC:rtcPeerConn[\".concat(i, \"]-> \").concat(_this.rtcPeerConn[i]));\n      _this.rtcPeerConn[i] = new window.webkitRTCPeerConnection(servers);\n      console.log('Created local peer connection object rtcPeerConn index: ' + i);\n      var name = 'textMessages' + i;\n      _this.sendDataChannel[i] = _this.rtcPeerConn[i].createDataChannel(name, dataChannelOptions);\n\n      _this.rtcPeerConn[i].ondatachannel = function (e) {\n        return _this.receiveDataChannel(e, i);\n      };\n\n      _this.rtcPeerConn[i].addEventListener('icecandidate', _this.handleConnection);\n\n      _this.rtcPeerConn[i].addEventListener('iceconnectionstatechange', _this.handleConnectionChange); //return [rtcPeerConn,sendDataChannel]\n\n    };\n\n    this.receiveDataChannel = function (event, i) {\n      console.log(\"Receiving a data channel\");\n      _this.catchDataChannel[i] = event.channel; //seteando el canal de datos a ser el que el   \n\n      _this.catchDataChannel[i].onmessage = function (e) {\n        return _this.receiveDataChannelMessage(e, i);\n      };\n\n      _this.catchDataChannel[i].onopen = function (e) {\n        return _this.dataChannelStateChanged(e, i);\n      };\n\n      _this.catchDataChannel[i].onclose = function (e) {\n        return _this.dataChannelStateChanged(e, i);\n      }; //return catchDataChannel;\n      //this.setState({catchDataChannel})\n\n    };\n\n    this.receiveDataChannelMessage = function (event, i) {\n      var fileBuffer = _this.fileBuffer; //[...this.state.fileBuffer]\n\n      fileBuffer.push(event.data); //pushing each chunk of the incoming file\n      //into fileBuffer\n\n      var fileSize = _this.fileSize;\n      var receivedFileSize = _this.receivedFileSize;\n      fileSize += event.data.byteLength; //updating the size of the file    \n      //fileProgress.value = fileSize  //------------------------>>>\n\n      if (fileSize === receivedFileSize) {\n        //var received = new window.Blob(fileBuffer)\n        fileBuffer = []; //displaySignalMessage(\"clearing fileBuffer...\" + \"length buffer = \"+fileBuffer.length)\n\n        console.log(\"clearing fileBuffer...length buffer = \" + fileBuffer.length); //displaySignalMessage(\"all done... data received\")\n\n        console.log(\"all done... data received\"); //downloadLink.href = URL.createObjectURL(received)//finally when all is received\n        //the peer will get the link to download de file\n        //downloadLink.download = receivedFileName\n        //removeAllChildItems(downloadLink)\n        //downloadLink.appendChild(document.createTextNode(receivedFileName + \"(\" + \n        //fileSize + \") bytes\" ))\n        //displaySignalMessage(\"Received... \" + fileSize + \"/\" + receivedFileSize )\n\n        console.log(\"Received... \" + fileSize + \"/\" + receivedFileSize);\n        fileSize = 0;\n        receivedFileSize = 0; //this.setState({fileSize,receivedFileSize,fileBuffer})\n\n        _this.fileSize = fileSize;\n        _this.receivedFileSize = receivedFileSize;\n        _this.fileBuffer = fileBuffer;\n      } else {\n        //this.setState({fileSize,receivedFileSize,fileBuffer})\n        _this.fileSize = fileSize;\n        _this.receivedFileSize = receivedFileSize;\n        _this.fileBuffer = fileBuffer;\n      }\n    };\n\n    this.dataChannelStateChanged = function (e, i) {\n      if (_this.catchDataChannel[i] !== null) {\n        if (_this.catchDataChannel[i].readyState === 'open') {\n          //si el readyState es abierto\n          //displaySignalMessage(\"Data Channel Opened\")\n          console.log(\"Data Channel Opened\");\n\n          if (_this.calleeVariable === true) {\n            console.log('rtcPeerConn[i].iceCandidate: ', _this.rtcPeerConn[i]);\n            console.log(\"I am a callee and I am ready\");\n          }\n        } else {\n          //displaySignalMessage(\"data channel is : \" + catchDataChannel[i].readyState)\n          console.log(\"data channel is : \" + _this.catchDataChannel[i].readyState);\n        }\n      }\n    };\n\n    this.handleConnection = function (event) {\n      var socket = _this.socket;\n      var peer_id = _this.peer_id;\n      var iceCandidate = event.candidate;\n\n      if (iceCandidate) {\n        //console.log('state data after create.....: ' , this.state)\n        //let icesReq = [...this.state.icesReq]\n        _this.icesReq.push(iceCandidate); //this.setState({icesReq})\n\n      } //else if (!iceCandidate && this.state.icesReq.length>0) {\n      else if (!iceCandidate && _this.icesReq.length > 0) {\n          console.log(\"icesReq: \", _this.icesReq); //const {socket} = this.props\n          //let len = this.state.icesReq.length\n\n          var len = _this.icesReq.length;\n          var iter = 0; //displaySignalMessage(\"ICE protocol gathered \" + len + \" candidates..\" )\n\n          console.log(\"ICE protocol gathered \" + len + \" candidates..\");\n          var newIceCandidate; //let icesReq = [...this.state.icesReq]\n\n          _this.icesReq.forEach(function (iceCandidate) {\n            iter++;\n            newIceCandidate = iceCandidate;\n            console.log(\"candidate created ready to be sent: \", newIceCandidate);\n            socket.emit('signal', {\n              \"type\": \"ice candidate\",\n              \"message\": JSON.stringify({\n                'candidate': newIceCandidate\n              }),\n              //\"room\":SIGNAL_ROOM\n              \"peer_id\": peer_id\n            }); //displaySignalMessage( iter +\". Sending Ice candidate ...\");\n\n            console.log(\"\".concat(iter, \" . Sending Ice candidate al peer \").concat(peer_id));\n          });\n\n          socket.emit('signal', {\n            \"type\": \"noIce\",\n            \"message\": \"\",\n            //\"room\":SIGNAL_ROOM})\n            \"peer_id\": peer_id\n          });\n          console.log(\"ending noIce signal to peer \".concat(peer_id)); //icesReq = []\n        } //else if(!iceCandidate && this.state.icesReq.length==0){\n        else if (!iceCandidate && _this.icesReq.length === 0) {\n            //displaySignalMessage(\"Candidate received is null, no candidates received yet, check your code!..\")\n            console.log(\"Candidate received is null, no candidates received yet, check your code!..\");\n          }\n    };\n\n    this.setSessionDescriptionError = function (error) {\n      //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n      console.log(\"Failed to create session description: \".concat(error.toString(), \".\"));\n    };\n\n    this.handleConnectionChange = function (event) {\n      var peerConnection = event.target;\n      console.log('ICE state change event: ', event);\n      if (peerConnection.iceConnectionState === \"connected\") ; //sendFile.disabled = false;\n      //displaySignalMessage(`ICE state: ` +\n      //        `${peerConnection.iceConnectionState}.`);\n\n      console.log(\"ICE state: \" + \"\".concat(peerConnection.iceConnectionState, \".\"));\n    };\n\n    this.createdOffer = function (description, i) {\n      console.log('offer from this local peer connection: ', description.sdp); //displaySignalMessage('localPeerConnection setLocalDescription start.');\n\n      console.log('localPeerConnection setLocalDescription start.');\n\n      _this.rtcPeerConn[i].setLocalDescription(description).then(function () {\n        _this.setLocalDescriptionSuccess(i);\n\n        console.log('Local description created: ', _this.rtcPeerConn[i].localDescription); //displaySignalMessage(\"Local description created..\")\n\n        console.log(\"Local description created..\");\n\n        _this.sendLocalDesc(_this.rtcPeerConn[i].localDescription);\n      }).catch(_this.setSessionDescriptionError);\n    };\n\n    this.setLocalDescriptionSuccess = function (i) {\n      _this.setDescriptionSuccess(\"setLocalDescription number \".concat(i));\n    };\n\n    this.setDescriptionSuccess = function (functionName) {\n      //displaySignalMessage(`${functionName} complete.`);\n      console.log(\"\".concat(functionName, \" complete.\"));\n    };\n\n    this.sendLocalDesc = function (desc) {\n      var socket = _this.socket;\n      var peer_id = _this.peer_id; //const {socket} = this.props\n\n      console.log(\"sending local description\", desc);\n\n      try {\n        //displaySignalMessage(\"16. Sending Local description\");\n        console.log(\"16. Sending Local description\");\n        var sdp = {\n          type: \"SDP\",\n          message: JSON.stringify({\n            'sdp': desc\n          }),\n          //room:SIGNAL_ROOM\n          peer_id: peer_id\n        };\n        console.log(\"sdp sent to other nodes in sendLocalDescription: \", sdp);\n        socket.emit('signal', sdp);\n      } catch (e) {\n        _this.logError1(e, \"sending local description\");\n      }\n    };\n\n    this.setSessionDescriptionError = function (error) {\n      //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n      console.log(\"Failed to create session description: \".concat(error.toString(), \".\"));\n    };\n\n    this.logError1 = function (error, where) {\n      //displaySignalMessage(\"problems in \" + where +\" \"+ error.name + ': ' + error.message );\n      console.log(\"problems in \" + where + \" \" + error.name + ': ' + error.message);\n    };\n\n    this.determineI = function () {\n      var i = 0;\n      return i;\n    };\n\n    this.signalingMessageHandler =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(data) {\n        var i, a, desc, c, m, ice;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                console.log('data recibida en signalingMessageHandler ', data);\n                i = _this.determineI(); //console.log(\"data\",data)\n                //displaySignalMessage(\"data type: \" + data.type)\n\n                if (!_this.rtcPeerConn[i]) _this.setPC(i);\n                _context.prev = 3;\n\n                if (!(data.type === \"SDP\")) {\n                  _context.next = 35;\n                  break;\n                }\n\n                a = JSON.parse(data.message);\n                desc = a.sdp;\n                console.log(\"desc: \", desc);\n                c = desc.type; //displaySignalMessage('working on sdp type ' + c)\n\n                console.log('working on sdp type ' + c); // if we get an offer, we need to reply with an answer\n\n                if (!(c === 'offer')) {\n                  _context.next = 26;\n                  break;\n                }\n\n                //displaySignalMessage(\"Entering to define an answer because of offer input..\")\n                console.log(\"Entering to define an answer because of offer input..\");\n                _context.next = 14;\n                return _this.rtcPeerConn[i].setRemoteDescription(desc).then(function (r) {\n                  //displaySignalMessage(\"Remote description stored\")\n                  console.log(\"Remote description stored\");\n                }).catch(function (e) {\n                  //displaySignalMessage('error setting remote description ' + e.name)\n                  console.log(\"Error setting remote description: \", e);\n                });\n\n              case 14:\n                _context.t0 = _this.rtcPeerConn[i];\n                _context.next = 17;\n                return _this.rtcPeerConn[i].createAnswer();\n\n              case 17:\n                _context.t1 = _context.sent;\n\n                _context.t2 = function (r) {\n                  //displaySignalMessage(\"Created Local description\")\n                  console.log(\"Created Local description\");\n                };\n\n                _context.t3 = function (e) {\n                  //displaySignalMessage(\"Error setting local description when receiving an offer: \" + \n                  //e.name)\n                  console.log(\"Error setting local description when receiving an offer: \" + e.name);\n                };\n\n                _context.next = 22;\n                return _context.t0.setLocalDescription.call(_context.t0, _context.t1).then(_context.t2).catch(_context.t3);\n\n              case 22:\n                console.log('local description-answer: ', _this.rtcPeerConn[i].localDescription);\n\n                _this.sendLocalDesc(_this.rtcPeerConn[i].localDescription);\n\n                _context.next = 33;\n                break;\n\n              case 26:\n                if (!(c === 'answer')) {\n                  _context.next = 32;\n                  break;\n                }\n\n                //displaySignalMessage(\"Entering to store the answer remote description..\")\n                console.log(\"Entering to store the answer remote description..\");\n                _context.next = 30;\n                return _this.rtcPeerConn[i].setRemoteDescription(desc).then(function (r) {\n                  //displaySignalMessage(\"Remote answer stored\")\n                  console.log(\"Remote answer stored :\", _this.rtcPeerConn[i].remoteDescription);\n                }).catch(function (e) {\n                  //displaySignalMessage('error setting remote descrition: '+ e.name)\n                  console.log('error setting remote descrition: ', e);\n                });\n\n              case 30:\n                _context.next = 33;\n                break;\n\n              case 32:\n                console.log('Unsupported SDP type.');\n\n              case 33:\n                _context.next = 36;\n                break;\n\n              case 35:\n                if (data.type === \"ice candidate\") {\n                  //displaySignalMessage(\"Adding foreign Ice candidate..\")\n                  console.log(\"Adding foreign Ice candidate..\");\n                  m = JSON.parse(data.message);\n                  ice = m.candidate;\n                  console.log('ice candidate: ', ice);\n\n                  _this.ices.push(ice);\n                } else if (_this.ices.length > 0 && data.type === \"noIce\") {\n                  _this.ices.forEach(function (ice) {\n                    _this.rtcPeerConn[i].addIceCandidate(ice).then(function (r) {\n                      //displaySignalMessage('added a foreign candidate')\n                      console.log('added a foreign candidate');\n                    }).catch(function (e) {\n                      //displaySignalMessage(\"3. Failure during addIceCandidate(): \" + e.name)\n                      console.log('error adding iceCandidate: ', e);\n                    });\n                  });\n                } else if (data.type === \"endCall\") {\n                  _this.rtcPeerConn[i].close();\n\n                  if (_this.sendDataChannel[i]) {\n                    _this.sendDataChannel[i].close();\n\n                    _this.sendDataChannel[i] = null;\n                  }\n\n                  if (_this.catchDataChannel[i]) {\n                    _this.catchDataChannel[i].close();\n\n                    _this.catchDataChannel[i] = null;\n                  }\n\n                  _this.rtcPeerConn[i] = null; //sendFile.disabled = true\n\n                  _this.icesReq = []; //hangupButton.disabled = true;\n                  //callButton.disabled = false;                \n\n                  _this.closed = true;\n                }\n\n              case 36:\n                _context.next = 41;\n                break;\n\n              case 38:\n                _context.prev = 38;\n                _context.t4 = _context[\"catch\"](3);\n                //displaySignalMessage(\"error on signaling message: \" + err.name);\n                console.log(\"error on signaling message: \", _context.t4);\n\n              case 41:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 38]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.fileBuffer = [];\n    this.fileSize = [];\n    this.receivedFileSize = 0;\n    this.closed = false;\n    this.socket = _socket;\n    this.peer_id = _peer_id;\n    this.told = false;\n    this.rtcPeerConn = [];\n    this.sendDataChannel = [];\n    this.catchDataChannel = [];\n    this.icesReq = [];\n    this.ices = [];\n    this.caller = false;\n    this.calleeVariable = false;\n  }\n\n  _createClass(NewPeer, [{\n    key: \"did\",\n    value: function did() {\n      var _this2 = this;\n\n      var socket = this.socket;\n      socket.on('signaling_message', function (data) {\n        return socket.emit('xyz', data, _this2.signalingMessageHandler);\n      });\n\n      window.onbeforeunload = function () {\n        socket.emit('signal', {\n          \"type\": \"endCall\",\n          \"message\": \"finishing call\",\n          \"peer_id\": _this2.peer_id\n        });\n      };\n    }\n  }]);\n\n  return NewPeer;\n}();\n\nexport { NewPeer as default };","map":{"version":3,"sources":["/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_5/webrtc/src/wrtconf/NewPeer.js"],"names":["NewPeer","socket","peer_id","callee","calleeVariable","did","callAction","caller","console","log","told","emit","message","Promise","resolve","reject","createPC","then","i","setPC","result","rtcPeerConn","createOffer","e","createdOffer","catch","setSessionDescriptionError","length","initiator","push","sendDataChannel","catchDataChannel","servers","dataChannelOptions","ordered","window","webkitRTCPeerConnection","name","createDataChannel","ondatachannel","receiveDataChannel","addEventListener","handleConnection","handleConnectionChange","event","channel","onmessage","receiveDataChannelMessage","onopen","dataChannelStateChanged","onclose","fileBuffer","data","fileSize","receivedFileSize","byteLength","readyState","iceCandidate","candidate","icesReq","len","iter","newIceCandidate","forEach","JSON","stringify","error","toString","peerConnection","target","iceConnectionState","description","sdp","setLocalDescription","setLocalDescriptionSuccess","localDescription","sendLocalDesc","setDescriptionSuccess","functionName","desc","type","logError1","where","determineI","signalingMessageHandler","a","parse","c","setRemoteDescription","r","createAnswer","remoteDescription","m","ice","ices","addIceCandidate","close","closed","on","onbeforeunload"],"mappings":"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","sourcesContent":["export default class NewPeer{    \n\n    constructor(socket , peer_id) {\n        this.fileBuffer = []\n        this.fileSize = [] \n        this.receivedFileSize = 0\n        this.closed = false\n        this.socket = socket\n        this.peer_id = peer_id\n        this.told = false\n        this.rtcPeerConn = []\n        this.sendDataChannel = []\n        this.catchDataChannel = []\n        this.icesReq = []\n        this.ices = []\n        this.caller = false\n        this.calleeVariable = false\n    }\n\n    did() {\n        const socket = this.socket\n        socket.on('signaling_message',(data) => socket.emit('xyz',\n        data,this.signalingMessageHandler))\n\n        window.onbeforeunload = () => {\n            socket.emit('signal',{\"type\":\"endCall\",\"message\":\"finishing call\",\"peer_id\":this.peer_id})\n        }\n    }\n\n    callee = () => {\n        this.calleeVariable = true\n        //this.will()\n        this.did()\n    }\n\n    callAction = () => {\n        this.caller = true\n        console.log('socket:',this.socket)\n        const socket = this.socket\n        //this.will()\n        this.did()\n        //peer_id = this.props.peer_id\n        if(!this.told){\n            this.told =true\n            socket.emit('initSendCandidates',{message:\"start\",\"peer_id\":this.peer_id})\n        }\n        \n        //sendFile.disabled = true\n        console.log('Starting operation call.')\n        //let i = null\n        //console.log(0, this.state)\n        new Promise((resolve,reject) => {\n                //this.setState({i,rtcPeerConn,sendDataChannel,catchDataChannel})\n                resolve(this.createPC())\n                reject('error...')\n            }).then(i =>{\n                //console.log('state data after create: ' , this.state)\n                console.log('data after createPC function: ',i)                \n                console.log(\"i after createPc fcn\",i)\n                if(i>=0){\n                    return new Promise((resolve,reject)=>{\n                        resolve(this.setPC(i))\n                        reject('Error on setPC...')\n                    }).then(result => {\n                        //displaySignalMessage('peerConnection createOffer start.')\n                        //let [rtcPeerConn,sendDataChannel] = result\n                        console.log('peerConnection createOffer start.')\n                        this.rtcPeerConn[i].createOffer()\n                        .then(e => this.createdOffer(e,i)).catch(this.setSessionDescriptionError)\n                    })\n                }else{\n                    return new Promise((resolve,reject)=>{                        \n                        reject('Error on nowhere...')\n                    })\n\n                }\n            }).then(result =>{                \n                console.log(result)\n\n            }).catch(e=>console.log(e))       \n        \n    }\n\n    createPC = () => {      \n        console.log(\"rtcPeerConn1: \",this.rtcPeerConn)\n        const i = this.rtcPeerConn.length\n        console.log('is',i)\n        const initiator = null\n        this.rtcPeerConn.push(initiator)\n        this.sendDataChannel.push(initiator)\n        this.catchDataChannel.push(initiator)\n\n        return i\n    }\n\n    setPC = (i) => {        \n        const servers = {\n            'iceServers':[//{\n                //'url':'stun:stun.l.google.com:19302'\n            //},{'url': 'stun:stun.services.mozilla.com'}\n            {'url':'turn:kaydee@159.65.151.221','credential':'userdeepak','username':'kaydee'}\n        ]\n        }\n        const dataChannelOptions = {\n            ordered: true//false, //not guaranteed delivery, unreliable but faster\n            //maxRetransmitTime:  1000 //miliseconds\n        }\n        //callButton.disabled = true;\n        //hangupButton.disabled = false;\n        console.log(`Received data in setPC:rtcPeerConn[${i}]-> ${this.rtcPeerConn[i]}`)\n        this.rtcPeerConn[i] = new window.webkitRTCPeerConnection(servers)\n        console.log('Created local peer connection object rtcPeerConn index: ' + i )\n        const name = 'textMessages' + i\n        this.sendDataChannel[i] = this.rtcPeerConn[i].createDataChannel(name,dataChannelOptions)    \n        this.rtcPeerConn[i].ondatachannel = e=>this.receiveDataChannel(e,i)\n        this.rtcPeerConn[i].addEventListener('icecandidate', this.handleConnection)\n        this.rtcPeerConn[i].addEventListener(\n        'iceconnectionstatechange', this.handleConnectionChange)\n\n        //return [rtcPeerConn,sendDataChannel]\n    }\n    \n    \n    receiveDataChannel = (event,i)=>{\n        console.log(\"Receiving a data channel\")\n        this.catchDataChannel[i] = event.channel;//seteando el canal de datos a ser el que el   \n        this.catchDataChannel[i].onmessage = e=>this.receiveDataChannelMessage(e,i);\n        this.catchDataChannel[i].onopen = e=>this.dataChannelStateChanged(e,i);\n        this.catchDataChannel[i].onclose = e => this.dataChannelStateChanged(e,i);\n        //return catchDataChannel;\n        //this.setState({catchDataChannel})\n    }\n    \n    receiveDataChannelMessage = (event, i) => {\n        let fileBuffer = this.fileBuffer//[...this.state.fileBuffer]\n        fileBuffer.push(event.data) //pushing each chunk of the incoming file\n        //into fileBuffer\n        let fileSize = this.fileSize\n        let receivedFileSize = this.receivedFileSize\n        fileSize += event.data.byteLength //updating the size of the file    \n        //fileProgress.value = fileSize  //------------------------>>>\n        if(fileSize === receivedFileSize){\n            //var received = new window.Blob(fileBuffer)\n            fileBuffer = []\n            //displaySignalMessage(\"clearing fileBuffer...\" + \"length buffer = \"+fileBuffer.length)\n            console.log(\"clearing fileBuffer...length buffer = \" + fileBuffer.length)\n            //displaySignalMessage(\"all done... data received\")\n            console.log(\"all done... data received\")\n            //downloadLink.href = URL.createObjectURL(received)//finally when all is received\n            //the peer will get the link to download de file\n            //downloadLink.download = receivedFileName\n            //removeAllChildItems(downloadLink)\n            //downloadLink.appendChild(document.createTextNode(receivedFileName + \"(\" + \n            //fileSize + \") bytes\" ))\n            //displaySignalMessage(\"Received... \" + fileSize + \"/\" + receivedFileSize )\n            console.log(\"Received... \" + fileSize + \"/\" + receivedFileSize)\n            fileSize = 0\n            receivedFileSize = 0\n            //this.setState({fileSize,receivedFileSize,fileBuffer})\n            this.fileSize = fileSize\n            this.receivedFileSize = receivedFileSize\n            this.fileBuffer = fileBuffer\n        }else{\n            //this.setState({fileSize,receivedFileSize,fileBuffer})\n            this.fileSize = fileSize\n            this.receivedFileSize = receivedFileSize\n            this.fileBuffer = fileBuffer\n        }\n    }\n\n    dataChannelStateChanged = (e,i) =>{\n        if(this.catchDataChannel[i]!==null){\n            if(this.catchDataChannel[i].readyState === 'open'){//si el readyState es abierto\n                //displaySignalMessage(\"Data Channel Opened\")\n                console.log(\"Data Channel Opened\")\n                if(this.calleeVariable===true){\n                    console.log('rtcPeerConn[i].iceCandidate: ' , this.rtcPeerConn[i])\n                    console.log(`I am a callee and I am ready`)\n                }\n            }else{\n                //displaySignalMessage(\"data channel is : \" + catchDataChannel[i].readyState)\n                console.log(\"data channel is : \" + this.catchDataChannel[i].readyState)\n            }\n        }\n    }\n\n    handleConnection = event => {\n        const socket=this.socket\n        const peer_id=this.peer_id\n        const iceCandidate = event.candidate;\n        if(iceCandidate){\n            //console.log('state data after create.....: ' , this.state)\n            //let icesReq = [...this.state.icesReq]\n            this.icesReq.push(iceCandidate)\n            //this.setState({icesReq})\n        }\n        //else if (!iceCandidate && this.state.icesReq.length>0) {\n        else if (!iceCandidate && this.icesReq.length>0) {           \n            console.log(\"icesReq: \",this.icesReq)\n            //const {socket} = this.props\n            //let len = this.state.icesReq.length\n            let len = this.icesReq.length\n            let iter = 0\n            //displaySignalMessage(\"ICE protocol gathered \" + len + \" candidates..\" )\n            console.log(\"ICE protocol gathered \" + len + \" candidates..\")\n            let newIceCandidate\n            //let icesReq = [...this.state.icesReq]\n            this.icesReq.forEach(iceCandidate=>{\n                iter++\n                newIceCandidate = iceCandidate\n                console.log(\"candidate created ready to be sent: \", newIceCandidate)\n                socket.emit('signal',{\n                    \"type\":\"ice candidate\",\n                    \"message\":JSON.stringify({'candidate':newIceCandidate}),\n                    //\"room\":SIGNAL_ROOM\n                    \"peer_id\":peer_id\n                })\n                //displaySignalMessage( iter +\". Sending Ice candidate ...\");\n                console.log(`${iter} . Sending Ice candidate al peer ${peer_id}`)\n            })\n            socket.emit('signal',{\n                \"type\":\"noIce\",\n                \"message\":\"\",\n                //\"room\":SIGNAL_ROOM})\n                \"peer_id\":peer_id\n            })\n                console.log(`ending noIce signal to peer ${peer_id}`)\n            //icesReq = []\n        }//else if(!iceCandidate && this.state.icesReq.length==0){\n            else if(!iceCandidate && this.icesReq.length===0){\n            //displaySignalMessage(\"Candidate received is null, no candidates received yet, check your code!..\")\n            console.log(\"Candidate received is null, no candidates received yet, check your code!..\")\n        }\n    }\n\n    setSessionDescriptionError = (error) => {\n        //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n        console.log(`Failed to create session description: ${error.toString()}.`);\n    }\n\n    handleConnectionChange = (event) => {\n        const peerConnection = event.target;\n        console.log('ICE state change event: ', event);\n        if(peerConnection.iceConnectionState === \"connected\"); //sendFile.disabled = false;\n        //displaySignalMessage(`ICE state: ` +\n        //        `${peerConnection.iceConnectionState}.`);\n        console.log(`ICE state: ` +\n                `${peerConnection.iceConnectionState}.`)        \n    }\n    \n    createdOffer = (description , i) => {\n        console.log('offer from this local peer connection: ',description.sdp)\n        //displaySignalMessage('localPeerConnection setLocalDescription start.');\n        console.log('localPeerConnection setLocalDescription start.');\n        this.rtcPeerConn[i].setLocalDescription(description)\n        .then(() => {\n        this.setLocalDescriptionSuccess(i);\n        console.log('Local description created: ',this.rtcPeerConn[i].localDescription)\n        //displaySignalMessage(\"Local description created..\")\n        console.log(\"Local description created..\")\n        this.sendLocalDesc(this.rtcPeerConn[i].localDescription)\n        }).catch(this.setSessionDescriptionError);\n    }\n\n    setLocalDescriptionSuccess = (i) => {\n        this.setDescriptionSuccess(`setLocalDescription number ${i}`);\n    }\n\n    setDescriptionSuccess = (functionName) => {\n        //displaySignalMessage(`${functionName} complete.`);\n        console.log(`${functionName} complete.`)\n    }\n\n    sendLocalDesc = (desc) => {\n        const socket = this.socket\n        const peer_id = this.peer_id\n        //const {socket} = this.props\n        console.log(\"sending local description\",desc)\n        try{\n            //displaySignalMessage(\"16. Sending Local description\");\n            console.log(\"16. Sending Local description\")\n            var sdp = {\n                type:\"SDP\",\n                message:JSON.stringify({'sdp':desc}),              \n                //room:SIGNAL_ROOM\n                peer_id:peer_id\n            }\n            console.log(\"sdp sent to other nodes in sendLocalDescription: \",sdp)\n            socket.emit('signal',sdp);\n        }catch(e){\n            this.logError1(e,\"sending local description\");\n        }\n    }\n\n    setSessionDescriptionError = error => {\n        //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n        console.log(`Failed to create session description: ${error.toString()}.`);\n    }\n\n    logError1 = (error,where) => {\n        //displaySignalMessage(\"problems in \" + where +\" \"+ error.name + ': ' + error.message );\n        console.log(\"problems in \" + where +\" \"+ error.name + ': ' + error.message )\n    }\n\n    determineI = () => {\n        let i = 0    \n        return i\n    }\n\n    signalingMessageHandler = async (data)=>{\n        console.log('data recibida en signalingMessageHandler ',data)\n        let i = this.determineI()\n        //console.log(\"data\",data)\n        //displaySignalMessage(\"data type: \" + data.type)\n        if (!this.rtcPeerConn[i]) this.setPC(i);\n        try {\n            if (data.type===\"SDP\") {\n                var a = JSON.parse(data.message)\n                var desc = a.sdp\n                console.log(\"desc: \",desc)\n                var c = desc.type          \n                //displaySignalMessage('working on sdp type ' + c)\n                console.log('working on sdp type ' + c)\n                // if we get an offer, we need to reply with an answer\n                if (c === 'offer') {\n                    //displaySignalMessage(\"Entering to define an answer because of offer input..\")\n                    console.log(\"Entering to define an answer because of offer input..\")\n                    await this.rtcPeerConn[i].setRemoteDescription(desc).then(r=>{\n                        //displaySignalMessage(\"Remote description stored\")\n                        console.log(\"Remote description stored\")\n                    }).catch(e=>{\n                        //displaySignalMessage('error setting remote description ' + e.name)\n                        console.log(\"Error setting remote description: \", e)\n                    });\n                    await this.rtcPeerConn[i].setLocalDescription(await this.rtcPeerConn[i].createAnswer()).then(r=>{\n                        //displaySignalMessage(\"Created Local description\")\n                        console.log(\"Created Local description\")\n                    }).catch(e=>{\n                        //displaySignalMessage(\"Error setting local description when receiving an offer: \" + \n                        //e.name)\n                        console.log(\"Error setting local description when receiving an offer: \" + e.name)\n                    });\n                    console.log('local description-answer: ',this.rtcPeerConn[i].localDescription)\n                    this.sendLocalDesc(this.rtcPeerConn[i].localDescription)\n                } else if (c === 'answer') {\n                    //displaySignalMessage(\"Entering to store the answer remote description..\")\n                    console.log(\"Entering to store the answer remote description..\")\n                    await this.rtcPeerConn[i].setRemoteDescription(desc).then(r=>{\n                        //displaySignalMessage(\"Remote answer stored\")\n                        console.log(\"Remote answer stored :\",this.rtcPeerConn[i].remoteDescription)                            \n                    }).catch(e=>{\n                    //displaySignalMessage('error setting remote descrition: '+ e.name)\n                    console.log('error setting remote descrition: ', e)\n                    });                     \n                } else {\n                    console.log('Unsupported SDP type.');\n                }\n            } else if (data.type === \"ice candidate\") {\n                //displaySignalMessage(\"Adding foreign Ice candidate..\")\n                console.log(\"Adding foreign Ice candidate..\")\n                var m = JSON.parse(data.message)\n                const ice = m.candidate\n                console.log('ice candidate: ',ice)                \n                this.ices.push(ice)\n            } else if(this.ices.length>0 && data.type ===\"noIce\"){                    \n                this.ices.forEach(ice=>{\n                        this.rtcPeerConn[i].addIceCandidate(ice).then(r=>{\n                            //displaySignalMessage('added a foreign candidate')\n                            console.log('added a foreign candidate')\n                        }).catch(e => {\n                        //displaySignalMessage(\"3. Failure during addIceCandidate(): \" + e.name)\n                        console.log('error adding iceCandidate: ', e)\n                        })\n                    })\n                }\n            else if(data.type ===\"endCall\"){\n                this.rtcPeerConn[i].close()\n                if(this.sendDataChannel[i]){\n                    this.sendDataChannel[i].close()\n                    this.sendDataChannel[i] = null\n                }\n                if(this.catchDataChannel[i]){\n                    this.catchDataChannel[i].close()\n                    this.catchDataChannel[i] = null\n                }\n                this.rtcPeerConn[i] = null;\n                //sendFile.disabled = true\n                this.icesReq = []\n                //hangupButton.disabled = true;\n                //callButton.disabled = false;                \n                this.closed = true\n            }\n        } catch (err) {\n            //displaySignalMessage(\"error on signaling message: \" + err.name);\n            console.log(\"error on signaling message: \" , err)\n        }\n    }    \n}"]},"metadata":{},"sourceType":"module"}