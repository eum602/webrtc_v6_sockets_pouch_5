{"ast":null,"code":"import _toConsumableArray from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/src/wrtconf/NewPeer.js\";\nimport React, { Component } from 'react';\n\nvar NewPeer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewPeer, _Component);\n\n  function NewPeer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NewPeer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NewPeer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fileBuffer: [],\n      fileSize: [],\n      icesReq: [],\n      rtcPeerConn: [],\n      sendDataChannel: [],\n      catchDataChannel: []\n    };\n\n    _this.callAction = function () {\n      var rtcPeerConn1 = _this.state.rtcPeerConn;\n      var sendDataChannel1 = _this.state.sendDataChannel;\n      var catchDataChannel1 = _this.state.catchDataChannel; //sendFile.disabled = true\n\n      console.log('Starting operation call.'); //let i = null\n\n      var _this$createPC = _this.createPC(rtcPeerConn1, sendDataChannel1, catchDataChannel1) //let j=i\n      //console.log('data after createPC function: ',[i,rtcPeerConn,sendDataChannel,catchDataChannel] )\n      [(rtcPeerConn, sendDataChannel)] = _this.setPc(i, rtcPeerConn, sendDataChannel, catchDataChannel),\n          _this$createPC2 = _slicedToArray(_this$createPC, 4),\n          i = _this$createPC2[0],\n          rtcPeerConn = _this$createPC2[1],\n          sendDataChannel = _this$createPC2[2],\n          catchDataChannel = _this$createPC2[3];\n\n      console.log('data after setPC function: ', [rtcPeerConn, sendDataChannel]); //displaySignalMessage('peerConnection createOffer start.')\n      //console.log('peerConnection createOffer start.')\n      //rtcPeerConn[i].createOffer()\n      //.then(e => this.createdOffer(rtcPeerConn,e,i)).catch(this.setSessionDescriptionError)\n    };\n\n    _this.createPC = function (rtcPeerConn, sendDataChannel, catchDataChannel) {\n      var i = rtcPeerConn.length;\n      var initiator = null;\n      rtcPeerConn.push(initiator);\n      sendDataChannel.push(initiator);\n      catchDataChannel.push(initiator);\n      return [i, rtcPeerConn, sendDataChannel, catchDataChannel];\n    };\n\n    _this.setPc = function (i, rtcPeerConn, sendDataChannel, catchDataChannel) {\n      var servers = {\n        'iceServers': [{\n          'url': 'stun:stun.l.google.com:19302'\n        }, {\n          'url': 'stun:stun.services.mozilla.com'\n        }]\n      };\n      var dataChannelOptions = {\n        ordered: true //false, //not guaranteed delivery, unreliable but faster\n        //maxRetransmitTime:  1000 //miliseconds\n        //callButton.disabled = true;\n        //hangupButton.disabled = false;\n        //console.log()\n\n      };\n      rtcPeerConn[i] = new window.webkitRTCPeerConnection(servers);\n      console.log('Created local peer connection object rtcPeerConn index: ' + i);\n      var name = 'textMessages' + i;\n      sendDataChannel[i] = rtcPeerConn[i].createDataChannel(name, dataChannelOptions);\n\n      rtcPeerConn[i].ondatachannel = function (e) {\n        return _this.receiveDataChannel(e, i, catchDataChannel);\n      };\n\n      rtcPeerConn[i].addEventListener('icecandidate', _this.handleConnection);\n      rtcPeerConn[i].addEventListener('iceconnectionstatechange', _this.handleConnectionChange);\n      return [rtcPeerConn, sendDataChannel];\n    };\n\n    _this.receiveDataChannel = function (event, i, catchDataChannel) {\n      console.log(\"Receiving a data channel\");\n      catchDataChannel[i] = event.channel; //seteando el canal de datos a ser el que el   \n\n      catchDataChannel[i].onmessage = function (e) {\n        return _this.receiveDataChannelMessage(e, i);\n      };\n\n      catchDataChannel[i].onopen = function (e) {\n        return _this.dataChannelStateChanged(e, i, catchDataChannel);\n      };\n\n      catchDataChannel[i].onclose = function (e) {\n        return _this.dataChannelStateChanged(e, i, catchDataChannel);\n      }; //return catchDataChannel;\n\n\n      _this.setState({\n        catchDataChannel: catchDataChannel\n      });\n    };\n\n    _this.receiveDataChannelMessage = function (event, i) {\n      var fileBuffer = _toConsumableArray(_this.state.fileBuffer);\n\n      fileBuffer.push(event.data); //pushing each chunk of the incoming file\n      //into fileBuffer\n\n      var fileSize = _this.state.fileSize;\n      var receivedFileSize = _this.state.receivedFileSize;\n      fileSize += event.data.byteLength; //updating the size of the file    \n      //fileProgress.value = fileSize  //------------------------>>>\n\n      if (fileSize === receivedFileSize) {\n        //var received = new window.Blob(fileBuffer)\n        fileBuffer = []; //displaySignalMessage(\"clearing fileBuffer...\" + \"length buffer = \"+fileBuffer.length)\n\n        console.log(\"clearing fileBuffer...\" + \"length buffer = \" + fileBuffer.length); //displaySignalMessage(\"all done... data received\")\n\n        console.log(\"all done... data received\"); //downloadLink.href = URL.createObjectURL(received)//finally when all is received\n        //the peer will get the link to download de file\n        //downloadLink.download = receivedFileName\n        //removeAllChildItems(downloadLink)\n        //downloadLink.appendChild(document.createTextNode(receivedFileName + \"(\" + \n        //fileSize + \") bytes\" ))\n        //displaySignalMessage(\"Received... \" + fileSize + \"/\" + receivedFileSize )\n\n        console.log(\"Received... \" + fileSize + \"/\" + receivedFileSize);\n        fileSize = 0;\n        receivedFileSize = 0;\n\n        _this.setState({\n          fileSize: fileSize,\n          receivedFileSize: receivedFileSize,\n          fileBuffer: fileBuffer\n        });\n      } else {\n        _this.setState({\n          fileSize: fileSize,\n          receivedFileSize: receivedFileSize,\n          fileBuffer: fileBuffer\n        });\n      }\n    };\n\n    _this.setSessionDescriptionError = function (error) {\n      //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n      console.log(\"Failed to create session description: \".concat(error.toString(), \".\"));\n    };\n\n    _this.handleConnectionChange = function (event) {\n      var peerConnection = event.target;\n      console.log('ICE state change event: ', event);\n      if (peerConnection.iceConnectionState == \"connected\") ; //sendFile.disabled = false;\n      //displaySignalMessage(`ICE state: ` +\n      //        `${peerConnection.iceConnectionState}.`);\n\n      console.log(\"ICE state: \" + \"\".concat(peerConnection.iceConnectionState, \".\"));\n    };\n\n    _this.createdOffer = function (rtcPeerConn, description, i) {\n      console.log('offer from this local peer connection: ', description.sdp); //displaySignalMessage('localPeerConnection setLocalDescription start.');\n\n      console.log('localPeerConnection setLocalDescription start.');\n      rtcPeerConn[i].setLocalDescription(description).then(function () {\n        _this.setLocalDescriptionSuccess(rtcPeerConn[i]);\n\n        console.log('Local description created: ', rtcPeerConn[i].localDescription); //displaySignalMessage(\"Local description created..\")\n\n        console.log(\"Local description created..\");\n\n        _this.sendLocalDesc(rtcPeerConn[i].localDescription);\n      }).catch(_this.setSessionDescriptionError);\n    };\n\n    _this.setLocalDescriptionSuccess = function (peerConnection) {\n      _this.setDescriptionSuccess(peerConnection, 'setLocalDescription');\n    };\n\n    _this.setDescriptionSuccess = function (peerConnection, functionName) {\n      //displaySignalMessage(`${functionName} complete.`);\n      console.log(\"\".concat(functionName, \" complete.\"));\n    };\n\n    _this.sendLocalDesc = function (desc) {\n      var socket = _this.props.socket;\n      console.log(\"sending local description\", desc);\n\n      try {\n        //displaySignalMessage(\"16. Sending Local description\");\n        console.log(\"16. Sending Local description\");\n        var sdp = {\n          type: \"SDP\",\n          message: JSON.stringify({\n            'sdp': desc\n          }) //room:SIGNAL_ROOM\n\n        };\n        console.log(\"sdp sent to other nodes in sendLocalDescription: \", sdp);\n        socket.emit('signal', sdp);\n      } catch (e) {\n        _this.logError1(e, \"sending local description\");\n      }\n    };\n\n    _this.setSessionDescriptionError = function (error) {\n      //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n      console.log(\"Failed to create session description: \".concat(error.toString(), \".\"));\n    };\n\n    _this.logError1 = function (error, where) {\n      //displaySignalMessage(\"problems in \" + where +\" \"+ error.name + ': ' + error.message );\n      console.log(\"problems in \" + where + \" \" + error.name + ': ' + error.message);\n    };\n\n    return _this;\n  }\n\n  _createClass(NewPeer, [{\n    key: \"dataChannelStateChanged\",\n    value: function dataChannelStateChanged(e, i, catchDataChannel) {\n      if (catchDataChannel[i].readyState === 'open') {\n        //si el readyState es abierto\n        //displaySignalMessage(\"Data Channel Opened\")\n        console.log(\"Data Channel Opened\");\n      } else {\n        //displaySignalMessage(\"data channel is : \" + catchDataChannel[i].readyState)\n        console.log(\"data channel is : \" + catchDataChannel[i].readyState);\n      }\n    }\n  }, {\n    key: \"handleConnection\",\n    value: function handleConnection(event) {\n      var iceCandidate = event.candidate;\n\n      if (iceCandidate) {\n        var icesReq = this.state.icesReq;\n        icesReq.push(iceCandidate);\n        this.setState({\n          icesReq: icesReq\n        });\n      } else if (!iceCandidate && this.state.icesReq.length > 0) {\n        var socket = this.props.socket;\n        var len = this.state.icesReq.length;\n        var iter = 0; //displaySignalMessage(\"ICE protocol gathered \" + len + \" candidates..\" )\n\n        console.log(\"ICE protocol gathered \" + len + \" candidates..\");\n        var newIceCandidate;\n\n        var _icesReq = _toConsumableArray(this.state.icesReq);\n\n        _icesReq.forEach(function (iceCandidate) {\n          iter++;\n          newIceCandidate = iceCandidate;\n          console.log(\"candidate created ready to be sent: \", newIceCandidate);\n          socket.emit('signal', {\n            \"type\": \"ice candidate\",\n            \"message\": JSON.stringify({\n              'candidate': newIceCandidate\n            }) //\"room\":SIGNAL_ROOM\n\n          }); //displaySignalMessage( iter +\". Sending Ice candidate ...\");\n\n          console.log(iter + \". Sending Ice candidate ...\");\n        });\n\n        socket.emit('signal', {\n          \"type\": \"noIce\",\n          \"message\": \"\" //\"room\":SIGNAL_ROOM})\n\n        }); //icesReq = []\n      } else if (!iceCandidate && this.state.icesReq.length == 0) {\n        //displaySignalMessage(\"Candidate received is null, no candidates received yet, check your code!..\")\n        console.log(\"Candidate received is null, no candidates received yet, check your code!..\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.callAction,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"start Call\"));\n    }\n  }]);\n\n  return NewPeer;\n}(Component);\n\nexport { NewPeer as default };","map":{"version":3,"sources":["/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/src/wrtconf/NewPeer.js"],"names":["React","Component","NewPeer","state","fileBuffer","fileSize","icesReq","rtcPeerConn","sendDataChannel","catchDataChannel","callAction","rtcPeerConn1","sendDataChannel1","catchDataChannel1","console","log","createPC","setPc","i","length","initiator","push","servers","dataChannelOptions","ordered","window","webkitRTCPeerConnection","name","createDataChannel","ondatachannel","e","receiveDataChannel","addEventListener","handleConnection","handleConnectionChange","event","channel","onmessage","receiveDataChannelMessage","onopen","dataChannelStateChanged","onclose","setState","data","receivedFileSize","byteLength","setSessionDescriptionError","error","toString","peerConnection","target","iceConnectionState","createdOffer","description","sdp","setLocalDescription","then","setLocalDescriptionSuccess","localDescription","sendLocalDesc","catch","setDescriptionSuccess","functionName","desc","socket","props","type","message","JSON","stringify","emit","logError1","where","readyState","iceCandidate","candidate","len","iter","newIceCandidate","forEach"],"mappings":"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","sourcesContent":["import React , {Component} from 'react'\n\nexport default class NewPeer extends Component {    \n\n    state = {\n        fileBuffer : [],\n        fileSize : [],\n        icesReq : [],\n        rtcPeerConn : [],\n        sendDataChannel : [],\n        catchDataChannel : []\n    }\n\n    callAction = () => {\n        let rtcPeerConn1 = this.state.rtcPeerConn\n        let sendDataChannel1=this.state.sendDataChannel\n        let catchDataChannel1=this.state.catchDataChannel\n        //sendFile.disabled = true\n        console.log('Starting operation call.')\n        //let i = null\n        let [i,rtcPeerConn,sendDataChannel,catchDataChannel] = this.createPC(rtcPeerConn1,\n            sendDataChannel1,catchDataChannel1)\n        //let j=i\n        //console.log('data after createPC function: ',[i,rtcPeerConn,sendDataChannel,catchDataChannel] )\n        [rtcPeerConn,sendDataChannel] = this.setPc(i,rtcPeerConn,sendDataChannel,catchDataChannel)\n        console.log('data after setPC function: ',[rtcPeerConn,sendDataChannel])\n        //displaySignalMessage('peerConnection createOffer start.')\n        //console.log('peerConnection createOffer start.')\n        //rtcPeerConn[i].createOffer()\n        //.then(e => this.createdOffer(rtcPeerConn,e,i)).catch(this.setSessionDescriptionError)\n    }\n    \n\n    createPC = (rtcPeerConn,sendDataChannel,catchDataChannel) => {\n        const i = rtcPeerConn.length\n        const initiator = null\n        rtcPeerConn.push(initiator)\n        sendDataChannel.push(initiator)\n        catchDataChannel.push(initiator)\n        return [i,rtcPeerConn,sendDataChannel,catchDataChannel]\n    }\n    \n    \n    setPc = (i,rtcPeerConn,sendDataChannel,catchDataChannel)  => {\n        const servers = {\n            'iceServers':[{\n                'url':'stun:stun.l.google.com:19302'\n            },{'url': 'stun:stun.services.mozilla.com'}]\n        }\n        const dataChannelOptions = {\n            ordered: true//false, //not guaranteed delivery, unreliable but faster\n            //maxRetransmitTime:  1000 //miliseconds\n        }\n        //callButton.disabled = true;\n        //hangupButton.disabled = false;\n        //console.log()\n        rtcPeerConn[i] = new window.webkitRTCPeerConnection(servers);\n        console.log('Created local peer connection object rtcPeerConn index: ' + i )\n        const name = 'textMessages' + i\n        sendDataChannel[i] = rtcPeerConn[i].createDataChannel(name,dataChannelOptions)    \n        rtcPeerConn[i].ondatachannel = e=>this.receiveDataChannel(e,i,catchDataChannel);\n        rtcPeerConn[i].addEventListener('icecandidate', this.handleConnection);\n        rtcPeerConn[i].addEventListener(\n           'iceconnectionstatechange', this.handleConnectionChange);\n        return [rtcPeerConn,sendDataChannel]\n    }\n    \n    \n    receiveDataChannel = (event,i,catchDataChannel)=>{\n        console.log(\"Receiving a data channel\")\n        catchDataChannel[i] = event.channel;//seteando el canal de datos a ser el que el   \n        catchDataChannel[i].onmessage = e=>this.receiveDataChannelMessage(e,i);\n        catchDataChannel[i].onopen = e=>this.dataChannelStateChanged(e,i,catchDataChannel);\n        catchDataChannel[i].onclose = e => this.dataChannelStateChanged(e,i,catchDataChannel);\n        //return catchDataChannel;\n        this.setState({catchDataChannel})\n    }\n    \n    receiveDataChannelMessage = (event, i) => {\n        let fileBuffer = [...this.state.fileBuffer]\n        fileBuffer.push(event.data) //pushing each chunk of the incoming file\n        //into fileBuffer\n        let fileSize = this.state.fileSize\n        let receivedFileSize = this.state.receivedFileSize\n        fileSize += event.data.byteLength //updating the size of the file    \n        //fileProgress.value = fileSize  //------------------------>>>\n        if(fileSize === receivedFileSize){\n            //var received = new window.Blob(fileBuffer)\n            fileBuffer = []\n            //displaySignalMessage(\"clearing fileBuffer...\" + \"length buffer = \"+fileBuffer.length)\n            console.log(\"clearing fileBuffer...\" + \"length buffer = \"+fileBuffer.length)\n            //displaySignalMessage(\"all done... data received\")\n            console.log(\"all done... data received\")\n            //downloadLink.href = URL.createObjectURL(received)//finally when all is received\n            //the peer will get the link to download de file\n            //downloadLink.download = receivedFileName\n            //removeAllChildItems(downloadLink)\n            //downloadLink.appendChild(document.createTextNode(receivedFileName + \"(\" + \n            //fileSize + \") bytes\" ))\n            //displaySignalMessage(\"Received... \" + fileSize + \"/\" + receivedFileSize )\n            console.log(\"Received... \" + fileSize + \"/\" + receivedFileSize)\n            fileSize = 0\n            receivedFileSize = 0\n            this.setState({fileSize,receivedFileSize,fileBuffer})\n        }else{\n            this.setState({fileSize,receivedFileSize,fileBuffer})\n        }\n    }\n\n    dataChannelStateChanged(e,i,catchDataChannel){\n        if(catchDataChannel[i].readyState === 'open'){//si el readyState es abierto\n            //displaySignalMessage(\"Data Channel Opened\")\n            console.log(\"Data Channel Opened\")\n        }else{\n            //displaySignalMessage(\"data channel is : \" + catchDataChannel[i].readyState)\n            console.log(\"data channel is : \" + catchDataChannel[i].readyState)\n        }\n    }\n\n    handleConnection(event) {\n        const iceCandidate = event.candidate;\n        if(iceCandidate){\n            let icesReq = this.state.icesReq\n            icesReq.push(iceCandidate)\n            this.setState({icesReq})\n        }\n        else if (!iceCandidate && this.state.icesReq.length>0) {\n            const {socket} = this.props\n            let len = this.state.icesReq.length\n            let iter = 0\n            //displaySignalMessage(\"ICE protocol gathered \" + len + \" candidates..\" )\n            console.log(\"ICE protocol gathered \" + len + \" candidates..\")\n            let newIceCandidate\n            let icesReq = [...this.state.icesReq]\n            icesReq.forEach(iceCandidate=>{\n                iter++\n                newIceCandidate = iceCandidate\n                console.log(\"candidate created ready to be sent: \", newIceCandidate)\n                socket.emit('signal',{\n                    \"type\":\"ice candidate\",\n                    \"message\":JSON.stringify({'candidate':newIceCandidate}),\n                    //\"room\":SIGNAL_ROOM\n                })\n                //displaySignalMessage( iter +\". Sending Ice candidate ...\");\n                console.log(iter + \". Sending Ice candidate ...\")\n            })\n            socket.emit('signal',{\n                \"type\":\"noIce\",\n                \"message\":\"\",\n                //\"room\":SIGNAL_ROOM})\n            })\n            //icesReq = []\n        }else if(!iceCandidate && this.state.icesReq.length==0){\n            //displaySignalMessage(\"Candidate received is null, no candidates received yet, check your code!..\")\n            console.log(\"Candidate received is null, no candidates received yet, check your code!..\")\n        }\n    }\n\n    setSessionDescriptionError = (error) => {\n        //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n        console.log(`Failed to create session description: ${error.toString()}.`);\n    }\n\n    handleConnectionChange = (event) => {\n        const peerConnection = event.target;\n        console.log('ICE state change event: ', event);\n        if(peerConnection.iceConnectionState == \"connected\"); //sendFile.disabled = false;\n        //displaySignalMessage(`ICE state: ` +\n        //        `${peerConnection.iceConnectionState}.`);\n        console.log(`ICE state: ` +\n                `${peerConnection.iceConnectionState}.`)\n    }\n    \n    createdOffer = (rtcPeerConn,description , i) => {\n        console.log('offer from this local peer connection: ',description.sdp)\n        //displaySignalMessage('localPeerConnection setLocalDescription start.');\n        console.log('localPeerConnection setLocalDescription start.');\n        rtcPeerConn[i].setLocalDescription(description)\n        .then(() => {\n        this.setLocalDescriptionSuccess(rtcPeerConn[i]);\n        console.log('Local description created: ',rtcPeerConn[i].localDescription)\n        //displaySignalMessage(\"Local description created..\")\n        console.log(\"Local description created..\")\n        this.sendLocalDesc(rtcPeerConn[i].localDescription)\n        }).catch(this.setSessionDescriptionError);\n    }\n\n    setLocalDescriptionSuccess = (peerConnection) => {\n        this.setDescriptionSuccess(peerConnection, 'setLocalDescription');\n    }\n\n    setDescriptionSuccess = (peerConnection, functionName) => {\n        //displaySignalMessage(`${functionName} complete.`);\n        console.log(`${functionName} complete.`)\n    }\n\n    sendLocalDesc = (desc) => {\n        const {socket} = this.props\n        console.log(\"sending local description\",desc);\n        try{\n            //displaySignalMessage(\"16. Sending Local description\");\n            console.log(\"16. Sending Local description\")\n            var sdp = {\n                type:\"SDP\",\n                message:JSON.stringify({'sdp':desc}),\n                //room:SIGNAL_ROOM\n            }\n            console.log(\"sdp sent to other nodes in sendLocalDescription: \",sdp)\n            socket.emit('signal',sdp);\n        }catch(e){\n            this.logError1(e,\"sending local description\");\n        }\n    }\n\n    setSessionDescriptionError = error => {\n        //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n        console.log(`Failed to create session description: ${error.toString()}.`);\n    }\n\n    logError1 = (error,where) => {\n        //displaySignalMessage(\"problems in \" + where +\" \"+ error.name + ': ' + error.message );\n        console.log(\"problems in \" + where +\" \"+ error.name + ': ' + error.message )\n    }\n\n    render() {\n        return(\n            <div>\n                <button onClick = {this.callAction}>start Call</button>\n            </div>\n        )\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}