{"ast":null,"code":"import _toConsumableArray from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/src/wrtconf/NewPeer.js\";\nimport React, { Component } from 'react';\n\nvar NewPeer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewPeer, _Component);\n\n  function NewPeer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NewPeer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NewPeer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fileBuffer: [],\n      fileSize: [],\n      icesReq: [],\n      rtcPeerConna: [],\n      sendDataChannel: [],\n      catchDataChannel: []\n    };\n\n    _this.callAction = function () {\n      //sendFile.disabled = true\n      console.log('Starting operation call.'); //let i = null        \n\n      console.log(0, _this.state);\n      var createPC = new Promise(function (resolve, reject) {\n        //let {rtcPeerConn,sendDataChannel,catchDataChannel} = this.state\n        var rtcPeerConn = _toConsumableArray(_this.state.rtcPeerConna);\n\n        var sendDataChannel = _toConsumableArray(_this.state.sendDataChannel);\n\n        var catchDataChannel = _toConsumableArray(_this.state.catchDataChannel);\n\n        console.log(rtcPeerConn);\n        var i = rtcPeerConn.length;\n        console.log('is', i);\n        var initiator = null;\n        rtcPeerConn.push(initiator);\n        sendDataChannel.push(initiator);\n        catchDataChannel.push(initiator); //this.setState({i,rtcPeerConn,sendDataChannel,catchDataChannel})\n\n        resolve([i, rtcPeerConn, sendDataChannel, catchDataChannel]);\n        reject('error...');\n      }).then(function (result) {\n        console.log('data after createPC function: ', result);\n\n        var _ref = _toConsumableArray(result),\n            i = _ref[0],\n            rtcPeerConn = _ref[1],\n            sendDataChannel = _ref[2],\n            catchDataChannel = _ref[3];\n\n        console.log(\"i\", i);\n\n        if (i >= 0) {\n          return new Promise(function (resolve, reject) {\n            //let {i,rtcPeerConn,sendDataChannel,catchDataChannel} = this.state\n            var servers = {\n              'iceServers': [{\n                'url': 'stun:stun.l.google.com:19302'\n              }, {\n                'url': 'stun:stun.services.mozilla.com'\n              }]\n            };\n            var dataChannelOptions = {\n              ordered: true //false, //not guaranteed delivery, unreliable but faster\n              //maxRetransmitTime:  1000 //miliseconds\n              //callButton.disabled = true;\n              //hangupButton.disabled = false;\n\n            };\n            console.log(rtcPeerConn, i);\n            rtcPeerConn[i] = new window.webkitRTCPeerConnection(servers);\n            console.log(\"a\");\n            console.log('Created local peer connection object rtcPeerConn index: ' + i);\n            var name = 'textMessages' + i;\n            sendDataChannel[i] = rtcPeerConn[i].createDataChannel(name, dataChannelOptions);\n\n            rtcPeerConn[i].ondatachannel = function (e) {\n              return _this.receiveDataChannel(e, i, catchDataChannel);\n            };\n\n            rtcPeerConn[i].addEventListener('icecandidate', _this.handleConnection);\n            rtcPeerConn[i].addEventListener('iceconnectionstatechange', _this.handleConnectionChange);\n            resolve([rtcPeerConn, sendDataChannel]);\n            reject('Error on setPC...');\n          });\n        } else {\n          return new Promise(function (resolve, reject) {\n            reject('Error on setPC...');\n          });\n        }\n      }).then(function (result) {\n        //let [rtcPeerConn,sendDataChannel] = result\n        console.log(result);\n      }).catch(function (e) {\n        return console.log(e);\n      }); //displaySignalMessage('peerConnection createOffer start.')\n      //console.log('peerConnection createOffer start.')\n      //rtcPeerConn[i].createOffer()\n      //.then(e => this.createdOffer(rtcPeerConn,e,i)).catch(this.setSessionDescriptionError)\n    };\n\n    _this.receiveDataChannel = function (event, i, catchDataChannel) {\n      console.log(\"Receiving a data channel\");\n      catchDataChannel[i] = event.channel; //seteando el canal de datos a ser el que el   \n\n      catchDataChannel[i].onmessage = function (e) {\n        return _this.receiveDataChannelMessage(e, i);\n      };\n\n      catchDataChannel[i].onopen = function (e) {\n        return _this.dataChannelStateChanged(e, i, catchDataChannel);\n      };\n\n      catchDataChannel[i].onclose = function (e) {\n        return _this.dataChannelStateChanged(e, i, catchDataChannel);\n      }; //return catchDataChannel;\n\n\n      _this.setState({\n        catchDataChannel: catchDataChannel\n      });\n    };\n\n    _this.receiveDataChannelMessage = function (event, i) {\n      var fileBuffer = _toConsumableArray(_this.state.fileBuffer);\n\n      fileBuffer.push(event.data); //pushing each chunk of the incoming file\n      //into fileBuffer\n\n      var fileSize = _this.state.fileSize;\n      var receivedFileSize = _this.state.receivedFileSize;\n      fileSize += event.data.byteLength; //updating the size of the file    \n      //fileProgress.value = fileSize  //------------------------>>>\n\n      if (fileSize === receivedFileSize) {\n        //var received = new window.Blob(fileBuffer)\n        fileBuffer = []; //displaySignalMessage(\"clearing fileBuffer...\" + \"length buffer = \"+fileBuffer.length)\n\n        console.log(\"clearing fileBuffer...\" + \"length buffer = \" + fileBuffer.length); //displaySignalMessage(\"all done... data received\")\n\n        console.log(\"all done... data received\"); //downloadLink.href = URL.createObjectURL(received)//finally when all is received\n        //the peer will get the link to download de file\n        //downloadLink.download = receivedFileName\n        //removeAllChildItems(downloadLink)\n        //downloadLink.appendChild(document.createTextNode(receivedFileName + \"(\" + \n        //fileSize + \") bytes\" ))\n        //displaySignalMessage(\"Received... \" + fileSize + \"/\" + receivedFileSize )\n\n        console.log(\"Received... \" + fileSize + \"/\" + receivedFileSize);\n        fileSize = 0;\n        receivedFileSize = 0;\n\n        _this.setState({\n          fileSize: fileSize,\n          receivedFileSize: receivedFileSize,\n          fileBuffer: fileBuffer\n        });\n      } else {\n        _this.setState({\n          fileSize: fileSize,\n          receivedFileSize: receivedFileSize,\n          fileBuffer: fileBuffer\n        });\n      }\n    };\n\n    _this.setSessionDescriptionError = function (error) {\n      //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n      console.log(\"Failed to create session description: \".concat(error.toString(), \".\"));\n    };\n\n    _this.handleConnectionChange = function (event) {\n      var peerConnection = event.target;\n      console.log('ICE state change event: ', event);\n      if (peerConnection.iceConnectionState == \"connected\") ; //sendFile.disabled = false;\n      //displaySignalMessage(`ICE state: ` +\n      //        `${peerConnection.iceConnectionState}.`);\n\n      console.log(\"ICE state: \" + \"\".concat(peerConnection.iceConnectionState, \".\"));\n    };\n\n    _this.createdOffer = function (rtcPeerConn, description, i) {\n      console.log('offer from this local peer connection: ', description.sdp); //displaySignalMessage('localPeerConnection setLocalDescription start.');\n\n      console.log('localPeerConnection setLocalDescription start.');\n      rtcPeerConn[i].setLocalDescription(description).then(function () {\n        _this.setLocalDescriptionSuccess(rtcPeerConn[i]);\n\n        console.log('Local description created: ', rtcPeerConn[i].localDescription); //displaySignalMessage(\"Local description created..\")\n\n        console.log(\"Local description created..\");\n\n        _this.sendLocalDesc(rtcPeerConn[i].localDescription);\n      }).catch(_this.setSessionDescriptionError);\n    };\n\n    _this.setLocalDescriptionSuccess = function (peerConnection) {\n      _this.setDescriptionSuccess(peerConnection, 'setLocalDescription');\n    };\n\n    _this.setDescriptionSuccess = function (peerConnection, functionName) {\n      //displaySignalMessage(`${functionName} complete.`);\n      console.log(\"\".concat(functionName, \" complete.\"));\n    };\n\n    _this.sendLocalDesc = function (desc) {\n      var socket = _this.props.socket;\n      console.log(\"sending local description\", desc);\n\n      try {\n        //displaySignalMessage(\"16. Sending Local description\");\n        console.log(\"16. Sending Local description\");\n        var sdp = {\n          type: \"SDP\",\n          message: JSON.stringify({\n            'sdp': desc\n          }) //room:SIGNAL_ROOM\n\n        };\n        console.log(\"sdp sent to other nodes in sendLocalDescription: \", sdp);\n        socket.emit('signal', sdp);\n      } catch (e) {\n        _this.logError1(e, \"sending local description\");\n      }\n    };\n\n    _this.setSessionDescriptionError = function (error) {\n      //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n      console.log(\"Failed to create session description: \".concat(error.toString(), \".\"));\n    };\n\n    _this.logError1 = function (error, where) {\n      //displaySignalMessage(\"problems in \" + where +\" \"+ error.name + ': ' + error.message );\n      console.log(\"problems in \" + where + \" \" + error.name + ': ' + error.message);\n    };\n\n    return _this;\n  }\n\n  _createClass(NewPeer, [{\n    key: \"dataChannelStateChanged\",\n    value: function dataChannelStateChanged(e, i, catchDataChannel) {\n      if (catchDataChannel[i].readyState === 'open') {\n        //si el readyState es abierto\n        //displaySignalMessage(\"Data Channel Opened\")\n        console.log(\"Data Channel Opened\");\n      } else {\n        //displaySignalMessage(\"data channel is : \" + catchDataChannel[i].readyState)\n        console.log(\"data channel is : \" + catchDataChannel[i].readyState);\n      }\n    }\n  }, {\n    key: \"handleConnection\",\n    value: function handleConnection(event) {\n      var iceCandidate = event.candidate;\n\n      if (iceCandidate) {\n        var icesReq = this.state.icesReq;\n        icesReq.push(iceCandidate);\n        this.setState({\n          icesReq: icesReq\n        });\n      } else if (!iceCandidate && this.state.icesReq.length > 0) {\n        var socket = this.props.socket;\n        var len = this.state.icesReq.length;\n        var iter = 0; //displaySignalMessage(\"ICE protocol gathered \" + len + \" candidates..\" )\n\n        console.log(\"ICE protocol gathered \" + len + \" candidates..\");\n        var newIceCandidate;\n\n        var _icesReq = _toConsumableArray(this.state.icesReq);\n\n        _icesReq.forEach(function (iceCandidate) {\n          iter++;\n          newIceCandidate = iceCandidate;\n          console.log(\"candidate created ready to be sent: \", newIceCandidate);\n          socket.emit('signal', {\n            \"type\": \"ice candidate\",\n            \"message\": JSON.stringify({\n              'candidate': newIceCandidate\n            }) //\"room\":SIGNAL_ROOM\n\n          }); //displaySignalMessage( iter +\". Sending Ice candidate ...\");\n\n          console.log(iter + \". Sending Ice candidate ...\");\n        });\n\n        socket.emit('signal', {\n          \"type\": \"noIce\",\n          \"message\": \"\" //\"room\":SIGNAL_ROOM})\n\n        }); //icesReq = []\n      } else if (!iceCandidate && this.state.icesReq.length == 0) {\n        //displaySignalMessage(\"Candidate received is null, no candidates received yet, check your code!..\")\n        console.log(\"Candidate received is null, no candidates received yet, check your code!..\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.callAction,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, \"start Call\"));\n    }\n  }]);\n\n  return NewPeer;\n}(Component);\n\nexport { NewPeer as default };","map":{"version":3,"sources":["/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/src/wrtconf/NewPeer.js"],"names":["React","Component","NewPeer","state","fileBuffer","fileSize","icesReq","rtcPeerConna","sendDataChannel","catchDataChannel","callAction","console","log","createPC","Promise","resolve","reject","rtcPeerConn","i","length","initiator","push","then","result","servers","dataChannelOptions","ordered","window","webkitRTCPeerConnection","name","createDataChannel","ondatachannel","e","receiveDataChannel","addEventListener","handleConnection","handleConnectionChange","catch","event","channel","onmessage","receiveDataChannelMessage","onopen","dataChannelStateChanged","onclose","setState","data","receivedFileSize","byteLength","setSessionDescriptionError","error","toString","peerConnection","target","iceConnectionState","createdOffer","description","sdp","setLocalDescription","setLocalDescriptionSuccess","localDescription","sendLocalDesc","setDescriptionSuccess","functionName","desc","socket","props","type","message","JSON","stringify","emit","logError1","where","readyState","iceCandidate","candidate","len","iter","newIceCandidate","forEach"],"mappings":"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","sourcesContent":["import React , {Component} from 'react'\n\nexport default class NewPeer extends Component {    \n\n    state = {\n        fileBuffer : [],\n        fileSize : [],\n        icesReq : [],\n        rtcPeerConna : [],\n        sendDataChannel : [],\n        catchDataChannel : []\n    }\n\n    callAction = () => {\n        //sendFile.disabled = true\n        console.log('Starting operation call.')\n        //let i = null        \n        console.log(0, this.state)\n\n        let createPC = new Promise((resolve,reject) => {                \n                //let {rtcPeerConn,sendDataChannel,catchDataChannel} = this.state\n                let rtcPeerConn = [...this.state.rtcPeerConna]\n                let sendDataChannel = [...this.state.sendDataChannel]\n                let catchDataChannel = [...this.state.catchDataChannel]\n                console.log(rtcPeerConn)\n                const i = rtcPeerConn.length\n                console.log('is',i)\n                const initiator = null\n                rtcPeerConn.push(initiator)\n                sendDataChannel.push(initiator)\n                catchDataChannel.push(initiator)\n                //this.setState({i,rtcPeerConn,sendDataChannel,catchDataChannel})\n                resolve([i,rtcPeerConn,sendDataChannel,catchDataChannel])\n                reject('error...')\n            }).then(result =>{\n                console.log('data after createPC function: ',result)\n                let [i,rtcPeerConn,sendDataChannel,catchDataChannel] = [...result]\n                console.log(\"i\",i)\n                if(i>=0){\n                    return new Promise((resolve,reject)=>{\n                        //let {i,rtcPeerConn,sendDataChannel,catchDataChannel} = this.state\n                        const servers = {\n                            'iceServers':[{\n                                'url':'stun:stun.l.google.com:19302'\n                            },{'url': 'stun:stun.services.mozilla.com'}]\n                        }\n                        const dataChannelOptions = {\n                            ordered: true//false, //not guaranteed delivery, unreliable but faster\n                            //maxRetransmitTime:  1000 //miliseconds\n                        }\n                        //callButton.disabled = true;\n                        //hangupButton.disabled = false;\n                        console.log(rtcPeerConn,i)\n                        rtcPeerConn[i] = new window.webkitRTCPeerConnection(servers)\n                        console.log(\"a\")\n                        console.log('Created local peer connection object rtcPeerConn index: ' + i )\n                        const name = 'textMessages' + i\n                        sendDataChannel[i] = rtcPeerConn[i].createDataChannel(name,dataChannelOptions)    \n                        rtcPeerConn[i].ondatachannel = e=>this.receiveDataChannel(e,i,catchDataChannel)\n                        rtcPeerConn[i].addEventListener('icecandidate', this.handleConnection)\n                        rtcPeerConn[i].addEventListener(\n                        'iceconnectionstatechange', this.handleConnectionChange)\n                        resolve([rtcPeerConn,sendDataChannel])\n                        reject('Error on setPC...')\n                    })\n\n                }else{\n                    return new Promise((resolve,reject)=>{                        \n                        reject('Error on setPC...')\n                    })\n\n                }\n            }).then(result =>{            \n                //let [rtcPeerConn,sendDataChannel] = result\n                console.log(result)\n            }).catch(e=>console.log(e))\n        \n        //displaySignalMessage('peerConnection createOffer start.')\n        //console.log('peerConnection createOffer start.')\n        //rtcPeerConn[i].createOffer()\n        //.then(e => this.createdOffer(rtcPeerConn,e,i)).catch(this.setSessionDescriptionError)\n    }\n\n    \n    \n    \n    receiveDataChannel = (event,i,catchDataChannel)=>{\n        console.log(\"Receiving a data channel\")\n        catchDataChannel[i] = event.channel;//seteando el canal de datos a ser el que el   \n        catchDataChannel[i].onmessage = e=>this.receiveDataChannelMessage(e,i);\n        catchDataChannel[i].onopen = e=>this.dataChannelStateChanged(e,i,catchDataChannel);\n        catchDataChannel[i].onclose = e => this.dataChannelStateChanged(e,i,catchDataChannel);\n        //return catchDataChannel;\n        this.setState({catchDataChannel})\n    }\n    \n    receiveDataChannelMessage = (event, i) => {\n        let fileBuffer = [...this.state.fileBuffer]\n        fileBuffer.push(event.data) //pushing each chunk of the incoming file\n        //into fileBuffer\n        let fileSize = this.state.fileSize\n        let receivedFileSize = this.state.receivedFileSize\n        fileSize += event.data.byteLength //updating the size of the file    \n        //fileProgress.value = fileSize  //------------------------>>>\n        if(fileSize === receivedFileSize){\n            //var received = new window.Blob(fileBuffer)\n            fileBuffer = []\n            //displaySignalMessage(\"clearing fileBuffer...\" + \"length buffer = \"+fileBuffer.length)\n            console.log(\"clearing fileBuffer...\" + \"length buffer = \"+fileBuffer.length)\n            //displaySignalMessage(\"all done... data received\")\n            console.log(\"all done... data received\")\n            //downloadLink.href = URL.createObjectURL(received)//finally when all is received\n            //the peer will get the link to download de file\n            //downloadLink.download = receivedFileName\n            //removeAllChildItems(downloadLink)\n            //downloadLink.appendChild(document.createTextNode(receivedFileName + \"(\" + \n            //fileSize + \") bytes\" ))\n            //displaySignalMessage(\"Received... \" + fileSize + \"/\" + receivedFileSize )\n            console.log(\"Received... \" + fileSize + \"/\" + receivedFileSize)\n            fileSize = 0\n            receivedFileSize = 0\n            this.setState({fileSize,receivedFileSize,fileBuffer})\n        }else{\n            this.setState({fileSize,receivedFileSize,fileBuffer})\n        }\n    }\n\n    dataChannelStateChanged(e,i,catchDataChannel){\n        if(catchDataChannel[i].readyState === 'open'){//si el readyState es abierto\n            //displaySignalMessage(\"Data Channel Opened\")\n            console.log(\"Data Channel Opened\")\n        }else{\n            //displaySignalMessage(\"data channel is : \" + catchDataChannel[i].readyState)\n            console.log(\"data channel is : \" + catchDataChannel[i].readyState)\n        }\n    }\n\n    handleConnection(event) {\n        const iceCandidate = event.candidate;\n        if(iceCandidate){\n            let icesReq = this.state.icesReq\n            icesReq.push(iceCandidate)\n            this.setState({icesReq})\n        }\n        else if (!iceCandidate && this.state.icesReq.length>0) {\n            const {socket} = this.props\n            let len = this.state.icesReq.length\n            let iter = 0\n            //displaySignalMessage(\"ICE protocol gathered \" + len + \" candidates..\" )\n            console.log(\"ICE protocol gathered \" + len + \" candidates..\")\n            let newIceCandidate\n            let icesReq = [...this.state.icesReq]\n            icesReq.forEach(iceCandidate=>{\n                iter++\n                newIceCandidate = iceCandidate\n                console.log(\"candidate created ready to be sent: \", newIceCandidate)\n                socket.emit('signal',{\n                    \"type\":\"ice candidate\",\n                    \"message\":JSON.stringify({'candidate':newIceCandidate}),\n                    //\"room\":SIGNAL_ROOM\n                })\n                //displaySignalMessage( iter +\". Sending Ice candidate ...\");\n                console.log(iter + \". Sending Ice candidate ...\")\n            })\n            socket.emit('signal',{\n                \"type\":\"noIce\",\n                \"message\":\"\",\n                //\"room\":SIGNAL_ROOM})\n            })\n            //icesReq = []\n        }else if(!iceCandidate && this.state.icesReq.length==0){\n            //displaySignalMessage(\"Candidate received is null, no candidates received yet, check your code!..\")\n            console.log(\"Candidate received is null, no candidates received yet, check your code!..\")\n        }\n    }\n\n    setSessionDescriptionError = (error) => {\n        //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n        console.log(`Failed to create session description: ${error.toString()}.`);\n    }\n\n    handleConnectionChange = (event) => {\n        const peerConnection = event.target;\n        console.log('ICE state change event: ', event);\n        if(peerConnection.iceConnectionState == \"connected\"); //sendFile.disabled = false;\n        //displaySignalMessage(`ICE state: ` +\n        //        `${peerConnection.iceConnectionState}.`);\n        console.log(`ICE state: ` +\n                `${peerConnection.iceConnectionState}.`)\n    }\n    \n    createdOffer = (rtcPeerConn,description , i) => {\n        console.log('offer from this local peer connection: ',description.sdp)\n        //displaySignalMessage('localPeerConnection setLocalDescription start.');\n        console.log('localPeerConnection setLocalDescription start.');\n        rtcPeerConn[i].setLocalDescription(description)\n        .then(() => {\n        this.setLocalDescriptionSuccess(rtcPeerConn[i]);\n        console.log('Local description created: ',rtcPeerConn[i].localDescription)\n        //displaySignalMessage(\"Local description created..\")\n        console.log(\"Local description created..\")\n        this.sendLocalDesc(rtcPeerConn[i].localDescription)\n        }).catch(this.setSessionDescriptionError);\n    }\n\n    setLocalDescriptionSuccess = (peerConnection) => {\n        this.setDescriptionSuccess(peerConnection, 'setLocalDescription');\n    }\n\n    setDescriptionSuccess = (peerConnection, functionName) => {\n        //displaySignalMessage(`${functionName} complete.`);\n        console.log(`${functionName} complete.`)\n    }\n\n    sendLocalDesc = (desc) => {\n        const {socket} = this.props\n        console.log(\"sending local description\",desc);\n        try{\n            //displaySignalMessage(\"16. Sending Local description\");\n            console.log(\"16. Sending Local description\")\n            var sdp = {\n                type:\"SDP\",\n                message:JSON.stringify({'sdp':desc}),\n                //room:SIGNAL_ROOM\n            }\n            console.log(\"sdp sent to other nodes in sendLocalDescription: \",sdp)\n            socket.emit('signal',sdp);\n        }catch(e){\n            this.logError1(e,\"sending local description\");\n        }\n    }\n\n    setSessionDescriptionError = error => {\n        //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n        console.log(`Failed to create session description: ${error.toString()}.`);\n    }\n\n    logError1 = (error,where) => {\n        //displaySignalMessage(\"problems in \" + where +\" \"+ error.name + ': ' + error.message );\n        console.log(\"problems in \" + where +\" \"+ error.name + ': ' + error.message )\n    }\n\n    render() {\n        return(\n            <div>\n                <button onClick = {this.callAction}>start Call</button>                \n            </div>\n        )\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}