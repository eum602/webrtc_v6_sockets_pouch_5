{"ast":null,"code":"import _classCallCheck from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/src/App.js\";\n// import packages\nimport React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client'; // Making the App component\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this));\n\n    _this.send = function () {\n      var socket = socketIOClient(_this.state.endpoint); // this emits an event to the socket (your server) with an argument of 'red'\n      // you can make the argument any color you would like, or any kind of data you want to send.\n\n      socket.emit('change color', 'red'); // socket.emit('change color', 'red', 'yellow') | you can have multiple arguments\n    };\n\n    _this.state = {\n      endpoint: \"http://localhost:4001\" // this is where we are connecting to with sockets\n\n    };\n    return _this;\n  } // method for emitting a socket.io event\n\n\n  _createClass(App, [{\n    key: \"render\",\n    // render method that renders in code if the state is updated\n    value: function render() {\n      var _this2 = this;\n\n      // Within the render method, we will be checking for any sockets.\n      // We do it in the render method because it is ran very often.\n      var socket = socketIOClient(this.state.endpoint); // socket.on is another method that checks for incoming events from the server\n      // This method is looking for the event 'change color'\n      // socket.on takes a callback function for the first argument\n\n      socket.on('change color', function (color) {\n        // setting the color of our button\n        document.body.style.backgroundColor = color;\n      });\n      return React.createElement(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.send();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, \"Change Color\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/src/App.js"],"names":["React","Component","socketIOClient","App","send","socket","state","endpoint","emit","on","color","document","body","style","backgroundColor","textAlign"],"mappings":";;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B,C,CAEA;;IACMC,G;;;;;AACJ,iBAAc;AAAA;;AAAA;;AACZ;;AADY,UASdC,IATc,GASP,YAAM;AACX,UAAMC,MAAM,GAAGH,cAAc,CAAC,MAAKI,KAAL,CAAWC,QAAZ,CAA7B,CADW,CAGX;AACA;;AAEAF,MAAAA,MAAM,CAACG,IAAP,CAAY,cAAZ,EAA4B,KAA5B,EANW,CAOX;AACD,KAjBa;;AAGZ,UAAKF,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,uBADC,CACuB;;AADvB,KAAb;AAHY;AAMb,G,CAED;;;;;AAWA;6BACS;AAAA;;AACP;AACA;AACA,UAAMF,MAAM,GAAGH,cAAc,CAAC,KAAKI,KAAL,CAAWC,QAAZ,CAA7B,CAHO,CAKP;AACA;AACA;;AACAF,MAAAA,MAAM,CAACI,EAAP,CAAU,cAAV,EAA0B,UAACC,KAAD,EAAW;AACnC;AACAC,QAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,eAApB,GAAsCJ,KAAtC;AACD,OAHD;AAKA,aACE;AAAK,QAAA,KAAK,EAAE;AAAEK,UAAAA,SAAS,EAAE;AAAb,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACX,IAAL,EAAN;AAAA,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CADF;AAKD;;;;EAvCeH,S;;AA0ClB,eAAeE,GAAf","sourcesContent":["// import packages\nimport React, { Component } from 'react'\nimport socketIOClient from 'socket.io-client'\n\n// Making the App component\nclass App extends Component {\n  constructor() {\n    super()\n    \n    this.state = {\n      endpoint: \"http://localhost:4001\" // this is where we are connecting to with sockets\n    }\n  }\n  \n  // method for emitting a socket.io event\n  send = () => {\n    const socket = socketIOClient(this.state.endpoint)\n    \n    // this emits an event to the socket (your server) with an argument of 'red'\n    // you can make the argument any color you would like, or any kind of data you want to send.\n    \n    socket.emit('change color', 'red')\n    // socket.emit('change color', 'red', 'yellow') | you can have multiple arguments\n  }\n  \n  // render method that renders in code if the state is updated\n  render() {\n    // Within the render method, we will be checking for any sockets.\n    // We do it in the render method because it is ran very often.\n    const socket = socketIOClient(this.state.endpoint)\n    \n    // socket.on is another method that checks for incoming events from the server\n    // This method is looking for the event 'change color'\n    // socket.on takes a callback function for the first argument\n    socket.on('change color', (color) => {\n      // setting the color of our button\n      document.body.style.backgroundColor = color\n    })\n     \n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <button onClick={() => this.send()}>Change Color</button>\n      </div>\n    )\n  }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}