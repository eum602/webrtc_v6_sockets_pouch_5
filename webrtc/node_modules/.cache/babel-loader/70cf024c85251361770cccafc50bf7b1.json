{"ast":null,"code":"import _slicedToArray from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/src/wrtconf/NewPeer.js\";\nimport React, { Component } from 'react';\nvar icesReq = [];\nvar socket = null;\n\nvar NewPeer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(NewPeer, _Component);\n\n  function NewPeer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, NewPeer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(NewPeer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fileBuffer: [],\n      fileSize: [],\n      //icesReq : [],\n      rtcPeerConn: [],\n      sendDataChannel: [],\n      catchDataChannel: []\n    };\n\n    _this.callAction = function () {\n      socket = _this.props.socket; //sendFile.disabled = true\n\n      console.log('Starting operation call.'); //let i = null        \n\n      console.log(0, _this.state);\n      new Promise(function (resolve, reject) {\n        //this.setState({i,rtcPeerConn,sendDataChannel,catchDataChannel})\n        resolve(_this.createPC());\n        reject('error...');\n      }).then(function (result) {\n        console.log('state data after create: ', _this.state);\n        console.log('data after createPC function: ', result);\n\n        var _ref = _toConsumableArray(result),\n            i = _ref[0],\n            rtcPeerConn = _ref[1],\n            sendDataChannel = _ref[2],\n            catchDataChannel = _ref[3];\n\n        console.log(\"i\", i);\n\n        if (i >= 0) {\n          return new Promise(function (resolve, reject) {\n            resolve(_this.setPC(result));\n            reject('Error on setPC...');\n          }).then(function (result) {\n            //displaySignalMessage('peerConnection createOffer start.')\n            var _result = _slicedToArray(result, 2),\n                rtcPeerConn = _result[0],\n                sendDataChannel = _result[1];\n\n            console.log('peerConnection createOffer start.');\n            rtcPeerConn[i].createOffer().then(function (e) {\n              return _this.createdOffer(rtcPeerConn, e, i);\n            }).catch(_this.setSessionDescriptionError);\n          });\n        } else {\n          return new Promise(function (resolve, reject) {\n            reject('Error on nowhere...');\n          });\n        }\n      }).then(function (result) {\n        //let [rtcPeerConn,sendDataChannel] = result\n        console.log(result);\n      }).catch(function (e) {\n        return console.log(e);\n      });\n    };\n\n    _this.createPC = function () {\n      //let {rtcPeerConn,sendDataChannel,catchDataChannel} = this.state\n      var rtcPeerConn1 = _toConsumableArray(_this.state.rtcPeerConn);\n\n      var sendDataChannel1 = _toConsumableArray(_this.state.sendDataChannel);\n\n      var catchDataChannel1 = _toConsumableArray(_this.state.catchDataChannel);\n\n      console.log(\"rtcPeerConn1: \", rtcPeerConn1);\n      var i = rtcPeerConn1.length;\n      console.log('is', i);\n      var initiator = null;\n      rtcPeerConn1.push(initiator);\n      sendDataChannel1.push(initiator);\n      catchDataChannel1.push(initiator);\n      return [i, rtcPeerConn1, sendDataChannel1, catchDataChannel1];\n    };\n\n    _this.setPC = function (result) {\n      var _ref2 = _toConsumableArray(result),\n          i = _ref2[0],\n          rtcPeerConn = _ref2[1],\n          sendDataChannel = _ref2[2],\n          catchDataChannel = _ref2[3]; //let {i,rtcPeerConn,sendDataChannel,catchDataChannel} = this.state\n\n\n      var servers = {\n        'iceServers': [{\n          'url': 'stun:stun.l.google.com:19302'\n        }, {\n          'url': 'stun:stun.services.mozilla.com'\n        }]\n      };\n      var dataChannelOptions = {\n        ordered: true //false, //not guaranteed delivery, unreliable but faster\n        //maxRetransmitTime:  1000 //miliseconds\n        //callButton.disabled = true;\n        //hangupButton.disabled = false;\n\n      };\n      console.log(rtcPeerConn, i);\n      rtcPeerConn[i] = new window.webkitRTCPeerConnection(servers);\n      console.log(\"a\");\n      console.log('Created local peer connection object rtcPeerConn index: ' + i);\n      var name = 'textMessages' + i;\n      sendDataChannel[i] = rtcPeerConn[i].createDataChannel(name, dataChannelOptions);\n\n      rtcPeerConn[i].ondatachannel = function (e) {\n        return _this.receiveDataChannel(e, i, catchDataChannel);\n      };\n\n      rtcPeerConn[i].addEventListener('icecandidate', _this.handleConnection);\n      rtcPeerConn[i].addEventListener('iceconnectionstatechange', _this.handleConnectionChange);\n      return [rtcPeerConn, sendDataChannel];\n    };\n\n    _this.receiveDataChannel = function (event, i, catchDataChannel) {\n      console.log(\"Receiving a data channel\");\n      catchDataChannel[i] = event.channel; //seteando el canal de datos a ser el que el   \n\n      catchDataChannel[i].onmessage = function (e) {\n        return _this.receiveDataChannelMessage(e, i);\n      };\n\n      catchDataChannel[i].onopen = function (e) {\n        return _this.dataChannelStateChanged(e, i, catchDataChannel);\n      };\n\n      catchDataChannel[i].onclose = function (e) {\n        return _this.dataChannelStateChanged(e, i, catchDataChannel);\n      }; //return catchDataChannel;\n\n\n      _this.setState({\n        catchDataChannel: catchDataChannel\n      });\n    };\n\n    _this.receiveDataChannelMessage = function (event, i) {\n      var fileBuffer = _toConsumableArray(_this.state.fileBuffer);\n\n      fileBuffer.push(event.data); //pushing each chunk of the incoming file\n      //into fileBuffer\n\n      var fileSize = _this.state.fileSize;\n      var receivedFileSize = _this.state.receivedFileSize;\n      fileSize += event.data.byteLength; //updating the size of the file    \n      //fileProgress.value = fileSize  //------------------------>>>\n\n      if (fileSize === receivedFileSize) {\n        //var received = new window.Blob(fileBuffer)\n        fileBuffer = []; //displaySignalMessage(\"clearing fileBuffer...\" + \"length buffer = \"+fileBuffer.length)\n\n        console.log(\"clearing fileBuffer...\" + \"length buffer = \" + fileBuffer.length); //displaySignalMessage(\"all done... data received\")\n\n        console.log(\"all done... data received\"); //downloadLink.href = URL.createObjectURL(received)//finally when all is received\n        //the peer will get the link to download de file\n        //downloadLink.download = receivedFileName\n        //removeAllChildItems(downloadLink)\n        //downloadLink.appendChild(document.createTextNode(receivedFileName + \"(\" + \n        //fileSize + \") bytes\" ))\n        //displaySignalMessage(\"Received... \" + fileSize + \"/\" + receivedFileSize )\n\n        console.log(\"Received... \" + fileSize + \"/\" + receivedFileSize);\n        fileSize = 0;\n        receivedFileSize = 0;\n\n        _this.setState({\n          fileSize: fileSize,\n          receivedFileSize: receivedFileSize,\n          fileBuffer: fileBuffer\n        });\n      } else {\n        _this.setState({\n          fileSize: fileSize,\n          receivedFileSize: receivedFileSize,\n          fileBuffer: fileBuffer\n        });\n      }\n    };\n\n    _this.setSessionDescriptionError = function (error) {\n      //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n      console.log(\"Failed to create session description: \".concat(error.toString(), \".\"));\n    };\n\n    _this.handleConnectionChange = function (event) {\n      var peerConnection = event.target;\n      console.log('ICE state change event: ', event);\n      if (peerConnection.iceConnectionState == \"connected\") ; //sendFile.disabled = false;\n      //displaySignalMessage(`ICE state: ` +\n      //        `${peerConnection.iceConnectionState}.`);\n\n      console.log(\"ICE state: \" + \"\".concat(peerConnection.iceConnectionState, \".\"));\n    };\n\n    _this.createdOffer = function (rtcPeerConn, description, i) {\n      console.log('offer from this local peer connection: ', description.sdp); //displaySignalMessage('localPeerConnection setLocalDescription start.');\n\n      console.log('localPeerConnection setLocalDescription start.');\n      rtcPeerConn[i].setLocalDescription(description).then(function () {\n        _this.setLocalDescriptionSuccess(rtcPeerConn[i]);\n\n        console.log('Local description created: ', rtcPeerConn[i].localDescription); //displaySignalMessage(\"Local description created..\")\n\n        console.log(\"Local description created..\");\n\n        _this.sendLocalDesc(rtcPeerConn[i].localDescription);\n      }).catch(_this.setSessionDescriptionError);\n    };\n\n    _this.setLocalDescriptionSuccess = function (peerConnection) {\n      _this.setDescriptionSuccess(peerConnection, 'setLocalDescription');\n    };\n\n    _this.setDescriptionSuccess = function (peerConnection, functionName) {\n      //displaySignalMessage(`${functionName} complete.`);\n      console.log(\"\".concat(functionName, \" complete.\"));\n    };\n\n    _this.sendLocalDesc = function (desc) {\n      var socket = _this.props.socket;\n      console.log(\"sending local description\", desc);\n\n      try {\n        //displaySignalMessage(\"16. Sending Local description\");\n        console.log(\"16. Sending Local description\");\n        var sdp = {\n          type: \"SDP\",\n          message: JSON.stringify({\n            'sdp': desc\n          }),\n          //room:SIGNAL_ROOM\n          peer_id: _this.props.peer_id\n        };\n        console.log(\"sdp sent to other nodes in sendLocalDescription: \", sdp);\n        socket.emit('signal', sdp);\n      } catch (e) {\n        _this.logError1(e, \"sending local description\");\n      }\n    };\n\n    _this.setSessionDescriptionError = function (error) {\n      //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n      console.log(\"Failed to create session description: \".concat(error.toString(), \".\"));\n    };\n\n    _this.logError1 = function (error, where) {\n      //displaySignalMessage(\"problems in \" + where +\" \"+ error.name + ': ' + error.message );\n      console.log(\"problems in \" + where + \" \" + error.name + ': ' + error.message);\n    };\n\n    return _this;\n  }\n\n  _createClass(NewPeer, [{\n    key: \"dataChannelStateChanged\",\n    value: function dataChannelStateChanged(e, i, catchDataChannel) {\n      if (catchDataChannel[i].readyState === 'open') {\n        //si el readyState es abierto\n        //displaySignalMessage(\"Data Channel Opened\")\n        console.log(\"Data Channel Opened\");\n      } else {\n        //displaySignalMessage(\"data channel is : \" + catchDataChannel[i].readyState)\n        console.log(\"data channel is : \" + catchDataChannel[i].readyState);\n      }\n    }\n  }, {\n    key: \"handleConnection\",\n    value: function handleConnection(event) {\n      var iceCandidate = event.candidate;\n\n      if (iceCandidate) {\n        //console.log('state data after create.....: ' , this.state)\n        //let icesReq = [...this.state.icesReq]\n        icesReq.push(iceCandidate); //this.setState({icesReq})\n      } //else if (!iceCandidate && this.state.icesReq.length>0) {\n      else if (!iceCandidate && icesReq.length > 0) {\n          console.log(\"icesReq: \", icesReq); //const {socket} = this.props\n          //let len = this.state.icesReq.length\n\n          var len = icesReq.length;\n          var iter = 0; //displaySignalMessage(\"ICE protocol gathered \" + len + \" candidates..\" )\n\n          console.log(\"ICE protocol gathered \" + len + \" candidates..\");\n          var newIceCandidate; //let icesReq = [...this.state.icesReq]\n\n          icesReq.forEach(function (iceCandidate) {\n            iter++;\n            newIceCandidate = iceCandidate;\n            console.log(\"candidate created ready to be sent: \", newIceCandidate);\n            socket.emit('signal', {\n              \"type\": \"ice candidate\",\n              \"message\": JSON.stringify({\n                'candidate': newIceCandidate\n              }) //\"room\":SIGNAL_ROOM\n\n            }); //displaySignalMessage( iter +\". Sending Ice candidate ...\");\n\n            console.log(iter + \". Sending Ice candidate ...\");\n          });\n          socket.emit('signal', {\n            \"type\": \"noIce\",\n            \"message\": \"\" //\"room\":SIGNAL_ROOM})\n\n          }); //icesReq = []\n        } //else if(!iceCandidate && this.state.icesReq.length==0){\n        else if (!iceCandidate && icesReq.length == 0) {\n            //displaySignalMessage(\"Candidate received is null, no candidates received yet, check your code!..\")\n            console.log(\"Candidate received is null, no candidates received yet, check your code!..\");\n          }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.callAction,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, \"start Call\"));\n    }\n  }]);\n\n  return NewPeer;\n}(Component);\n\nexport { NewPeer as default };","map":{"version":3,"sources":["/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_2/webrtc/src/wrtconf/NewPeer.js"],"names":["React","Component","icesReq","socket","NewPeer","state","fileBuffer","fileSize","rtcPeerConn","sendDataChannel","catchDataChannel","callAction","props","console","log","Promise","resolve","reject","createPC","then","result","i","setPC","createOffer","e","createdOffer","catch","setSessionDescriptionError","rtcPeerConn1","sendDataChannel1","catchDataChannel1","length","initiator","push","servers","dataChannelOptions","ordered","window","webkitRTCPeerConnection","name","createDataChannel","ondatachannel","receiveDataChannel","addEventListener","handleConnection","handleConnectionChange","event","channel","onmessage","receiveDataChannelMessage","onopen","dataChannelStateChanged","onclose","setState","data","receivedFileSize","byteLength","error","toString","peerConnection","target","iceConnectionState","description","sdp","setLocalDescription","setLocalDescriptionSuccess","localDescription","sendLocalDesc","setDescriptionSuccess","functionName","desc","type","message","JSON","stringify","peer_id","emit","logError1","where","readyState","iceCandidate","candidate","len","iter","newIceCandidate","forEach"],"mappings":"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","sourcesContent":["import React , {Component} from 'react'\nlet icesReq = []\nlet socket = null\n\nexport default class NewPeer extends Component {    \n\n    state = {\n        fileBuffer : [],\n        fileSize : [],\n        //icesReq : [],\n        rtcPeerConn : [],\n        sendDataChannel : [],\n        catchDataChannel : []\n    }\n\n    callAction = () => {\n        socket = this.props.socket\n        //sendFile.disabled = true\n        console.log('Starting operation call.')\n        //let i = null        \n        console.log(0, this.state)\n        new Promise((resolve,reject) => {\n                //this.setState({i,rtcPeerConn,sendDataChannel,catchDataChannel})\n                resolve(this.createPC())\n                reject('error...')\n            }).then(result =>{\n                console.log('state data after create: ' , this.state)\n                console.log('data after createPC function: ',result)\n                let [i,rtcPeerConn,sendDataChannel,catchDataChannel] = [...result]\n                console.log(\"i\",i)\n                if(i>=0){\n                    return new Promise((resolve,reject)=>{\n                        resolve(this.setPC(result))\n                        reject('Error on setPC...')\n                    }).then(result => {\n                        //displaySignalMessage('peerConnection createOffer start.')\n                        let [rtcPeerConn,sendDataChannel] = result\n                        console.log('peerConnection createOffer start.')\n                        rtcPeerConn[i].createOffer()\n                        .then(e => this.createdOffer(rtcPeerConn,e,i)).catch(this.setSessionDescriptionError)\n                    })\n                }else{\n                    return new Promise((resolve,reject)=>{                        \n                        reject('Error on nowhere...')\n                    })\n\n                }\n            }).then(result =>{          \n                //let [rtcPeerConn,sendDataChannel] = result\n                console.log(result)\n\n            }).catch(e=>console.log(e))       \n        \n    }\n\n    createPC = () => {\n        //let {rtcPeerConn,sendDataChannel,catchDataChannel} = this.state\n        let rtcPeerConn1 = [...this.state.rtcPeerConn]        \n        let sendDataChannel1 = [...this.state.sendDataChannel]\n        let catchDataChannel1 = [...this.state.catchDataChannel]\n        console.log(\"rtcPeerConn1: \",rtcPeerConn1)\n        const i = rtcPeerConn1.length\n        console.log('is',i)\n        const initiator = null\n        rtcPeerConn1.push(initiator)\n        sendDataChannel1.push(initiator)\n        catchDataChannel1.push(initiator)\n\n        return [i,rtcPeerConn1,sendDataChannel1,catchDataChannel1]\n    }\n\n    setPC = (result) => {\n        let [i,rtcPeerConn,sendDataChannel,catchDataChannel] = [...result]\n        //let {i,rtcPeerConn,sendDataChannel,catchDataChannel} = this.state\n        const servers = {\n            'iceServers':[{\n                'url':'stun:stun.l.google.com:19302'\n            },{'url': 'stun:stun.services.mozilla.com'}]\n        }\n        const dataChannelOptions = {\n            ordered: true//false, //not guaranteed delivery, unreliable but faster\n            //maxRetransmitTime:  1000 //miliseconds\n        }\n        //callButton.disabled = true;\n        //hangupButton.disabled = false;\n        console.log(rtcPeerConn,i)\n        rtcPeerConn[i] = new window.webkitRTCPeerConnection(servers)\n        console.log(\"a\")\n        console.log('Created local peer connection object rtcPeerConn index: ' + i )\n        const name = 'textMessages' + i\n        sendDataChannel[i] = rtcPeerConn[i].createDataChannel(name,dataChannelOptions)    \n        rtcPeerConn[i].ondatachannel = e=>this.receiveDataChannel(e,i,catchDataChannel)\n        rtcPeerConn[i].addEventListener('icecandidate', this.handleConnection)\n        rtcPeerConn[i].addEventListener(\n        'iceconnectionstatechange', this.handleConnectionChange)\n\n        return [rtcPeerConn,sendDataChannel]\n    }\n    \n    \n    receiveDataChannel = (event,i,catchDataChannel)=>{\n        console.log(\"Receiving a data channel\")\n        catchDataChannel[i] = event.channel;//seteando el canal de datos a ser el que el   \n        catchDataChannel[i].onmessage = e=>this.receiveDataChannelMessage(e,i);\n        catchDataChannel[i].onopen = e=>this.dataChannelStateChanged(e,i,catchDataChannel);\n        catchDataChannel[i].onclose = e => this.dataChannelStateChanged(e,i,catchDataChannel);\n        //return catchDataChannel;\n        this.setState({catchDataChannel})\n    }\n    \n    receiveDataChannelMessage = (event, i) => {\n        let fileBuffer = [...this.state.fileBuffer]\n        fileBuffer.push(event.data) //pushing each chunk of the incoming file\n        //into fileBuffer\n        let fileSize = this.state.fileSize\n        let receivedFileSize = this.state.receivedFileSize\n        fileSize += event.data.byteLength //updating the size of the file    \n        //fileProgress.value = fileSize  //------------------------>>>\n        if(fileSize === receivedFileSize){\n            //var received = new window.Blob(fileBuffer)\n            fileBuffer = []\n            //displaySignalMessage(\"clearing fileBuffer...\" + \"length buffer = \"+fileBuffer.length)\n            console.log(\"clearing fileBuffer...\" + \"length buffer = \"+fileBuffer.length)\n            //displaySignalMessage(\"all done... data received\")\n            console.log(\"all done... data received\")\n            //downloadLink.href = URL.createObjectURL(received)//finally when all is received\n            //the peer will get the link to download de file\n            //downloadLink.download = receivedFileName\n            //removeAllChildItems(downloadLink)\n            //downloadLink.appendChild(document.createTextNode(receivedFileName + \"(\" + \n            //fileSize + \") bytes\" ))\n            //displaySignalMessage(\"Received... \" + fileSize + \"/\" + receivedFileSize )\n            console.log(\"Received... \" + fileSize + \"/\" + receivedFileSize)\n            fileSize = 0\n            receivedFileSize = 0\n            this.setState({fileSize,receivedFileSize,fileBuffer})\n        }else{\n            this.setState({fileSize,receivedFileSize,fileBuffer})\n        }\n    }\n\n    dataChannelStateChanged(e,i,catchDataChannel){\n        if(catchDataChannel[i].readyState === 'open'){//si el readyState es abierto\n            //displaySignalMessage(\"Data Channel Opened\")\n            console.log(\"Data Channel Opened\")\n        }else{\n            //displaySignalMessage(\"data channel is : \" + catchDataChannel[i].readyState)\n            console.log(\"data channel is : \" + catchDataChannel[i].readyState)\n        }\n    }\n\n    handleConnection(event) {\n        const iceCandidate = event.candidate;\n        if(iceCandidate){\n            //console.log('state data after create.....: ' , this.state)\n            //let icesReq = [...this.state.icesReq]\n            icesReq.push(iceCandidate)\n            //this.setState({icesReq})\n        }\n        //else if (!iceCandidate && this.state.icesReq.length>0) {\n        else if (!iceCandidate && icesReq.length>0) {\n            console.log(\"icesReq: \",icesReq)\n            //const {socket} = this.props\n            //let len = this.state.icesReq.length\n            let len = icesReq.length\n            let iter = 0\n            //displaySignalMessage(\"ICE protocol gathered \" + len + \" candidates..\" )\n            console.log(\"ICE protocol gathered \" + len + \" candidates..\")\n            let newIceCandidate\n            //let icesReq = [...this.state.icesReq]\n            icesReq.forEach(iceCandidate=>{\n                iter++\n                newIceCandidate = iceCandidate\n                console.log(\"candidate created ready to be sent: \", newIceCandidate)\n                socket.emit('signal',{\n                    \"type\":\"ice candidate\",\n                    \"message\":JSON.stringify({'candidate':newIceCandidate}),\n                    //\"room\":SIGNAL_ROOM\n                })\n                //displaySignalMessage( iter +\". Sending Ice candidate ...\");\n                console.log(iter + \". Sending Ice candidate ...\")\n            })\n            socket.emit('signal',{\n                \"type\":\"noIce\",\n                \"message\":\"\",\n                //\"room\":SIGNAL_ROOM})\n            })\n            //icesReq = []\n        }//else if(!iceCandidate && this.state.icesReq.length==0){\n            else if(!iceCandidate && icesReq.length==0){\n            //displaySignalMessage(\"Candidate received is null, no candidates received yet, check your code!..\")\n            console.log(\"Candidate received is null, no candidates received yet, check your code!..\")\n        }\n    }\n\n    setSessionDescriptionError = (error) => {\n        //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n        console.log(`Failed to create session description: ${error.toString()}.`);\n    }\n\n    handleConnectionChange = (event) => {\n        const peerConnection = event.target;\n        console.log('ICE state change event: ', event);\n        if(peerConnection.iceConnectionState == \"connected\"); //sendFile.disabled = false;\n        //displaySignalMessage(`ICE state: ` +\n        //        `${peerConnection.iceConnectionState}.`);\n        console.log(`ICE state: ` +\n                `${peerConnection.iceConnectionState}.`)\n    }\n    \n    createdOffer = (rtcPeerConn,description , i) => {\n        console.log('offer from this local peer connection: ',description.sdp)\n        //displaySignalMessage('localPeerConnection setLocalDescription start.');\n        console.log('localPeerConnection setLocalDescription start.');\n        rtcPeerConn[i].setLocalDescription(description)\n        .then(() => {\n        this.setLocalDescriptionSuccess(rtcPeerConn[i]);\n        console.log('Local description created: ',rtcPeerConn[i].localDescription)\n        //displaySignalMessage(\"Local description created..\")\n        console.log(\"Local description created..\")\n        this.sendLocalDesc(rtcPeerConn[i].localDescription)\n        }).catch(this.setSessionDescriptionError);\n    }\n\n    setLocalDescriptionSuccess = (peerConnection) => {\n        this.setDescriptionSuccess(peerConnection, 'setLocalDescription');\n    }\n\n    setDescriptionSuccess = (peerConnection, functionName) => {\n        //displaySignalMessage(`${functionName} complete.`);\n        console.log(`${functionName} complete.`)\n    }\n\n    sendLocalDesc = (desc) => {\n        const {socket} = this.props\n        console.log(\"sending local description\",desc)\n        try{\n            //displaySignalMessage(\"16. Sending Local description\");\n            console.log(\"16. Sending Local description\")\n            var sdp = {\n                type:\"SDP\",\n                message:JSON.stringify({'sdp':desc}),              \n                //room:SIGNAL_ROOM\n                peer_id:this.props.peer_id\n            }\n            console.log(\"sdp sent to other nodes in sendLocalDescription: \",sdp)\n            socket.emit('signal',sdp);\n        }catch(e){\n            this.logError1(e,\"sending local description\");\n        }\n    }\n\n    setSessionDescriptionError = error => {\n        //displaySignalMessage(`Failed to create session description: ${error.toString()}.`);\n        console.log(`Failed to create session description: ${error.toString()}.`);\n    }\n\n    logError1 = (error,where) => {\n        //displaySignalMessage(\"problems in \" + where +\" \"+ error.name + ': ' + error.message );\n        console.log(\"problems in \" + where +\" \"+ error.name + ': ' + error.message )\n    }\n\n    render() {\n        return(\n            <div>\n                <button onClick = {this.callAction}>start Call</button>                \n            </div>\n        )\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}