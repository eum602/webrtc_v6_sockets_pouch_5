{"ast":null,"code":"import _toConsumableArray from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/src/App.js\";\n// import packages\nimport React, { Component } from 'react'; //import socketIOClient from 'socket.io-client'\n\nimport io from 'socket.io-client';\nimport { v1 } from 'uuid';\nvar endpoint = \"http://localhost:4001\"; // this is where we are connecting to with sockets\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      //node_id:v1(),\n      newReload: true,\n      socket: io(endpoint),\n      otherNodes_id: []\n    };\n\n    _this.initSocket = function () {\n      //variables\n      var node_index = null;\n      var other_node = null;\n\n      var otherNodes_id = _toConsumableArray(_this.state.otherNodes_id);\n\n      var node_id = null;\n\n      _this.state.socket.on('newPeer', function (data) {\n        other_node = data.other_node;\n        console.log(\"Entering to register new peer\"); //if(this.state.nodes_id) {nodes_id = this.state.nodes_id}else{nodes_id = []}      \n\n        var k = 0;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = otherNodes_id[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _node_id = _step.value;\n\n            if (_node_id === other_node) {\n              node_index = k;\n            }\n\n            k++;\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      });\n\n      if (!node_index) {\n        console.log(\"setting node_id and other nodes: \", node_id, otherNodes_id);\n\n        _this.setState({\n          node_id: node_id,\n          otherNodes_id: otherNodes_id\n        });\n      }\n    };\n\n    _this.send = function () {\n      _this.state.socket.emit('change color', _this.state.color); //'red'\n      // socket.emit('change color', 'red', 'yellow') | you can have multiple arguments\n\n    };\n\n    _this.setColor = function (color) {\n      _this.setState({\n        color: color\n      });\n    };\n\n    _this.setReload = function (e) {\n      console.log(\"e: \", e);\n      if (e === \"OK\") _this.setState({\n        newReload: false\n      });\n    };\n\n    _this.pqr = function (otherNodes_id) {\n      _this.setState({\n        otherNodes_id: otherNodes_id\n      }); //displaySignalMessage('New candidate peer ... trying to connect ' + data.node_id)\n\n\n      console.log('New candidate peer ... trying to connect ', otherNodes_id[otherNodes_id.length - 1]);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.initSocket();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var socket = this.state.socket;\n      socket.on('connect', function () {\n        console.log(\"triggered socket.id: \", _this2.state.socket.id);\n      });\n\n      if (this.state.newReload) {\n        socket.emit('initiate', {\n          \"set_room\": \"SET_ROOM\"\n        }, this.setReload);\n      }\n\n      socket.on('change color', function (color) {\n        document.body.style.backgroundColor = color;\n      });\n      return React.createElement(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.send();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Change Color\"), React.createElement(\"button\", {\n        id: \"blue\",\n        onClick: function onClick() {\n          return _this2.setColor('blue');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Blue\"), React.createElement(\"button\", {\n        id: \"red\",\n        onClick: function onClick() {\n          return _this2.setColor('red');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Red\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/src/App.js"],"names":["React","Component","io","v1","endpoint","App","state","newReload","socket","otherNodes_id","initSocket","node_index","other_node","node_id","on","data","console","log","k","setState","send","emit","color","setColor","setReload","e","pqr","length","id","document","body","style","backgroundColor","textAlign"],"mappings":"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","sourcesContent":["// import packages\nimport React, { Component } from 'react'\n//import socketIOClient from 'socket.io-client'\nimport io from 'socket.io-client'\nimport { v1 } from 'uuid';\nconst endpoint = \"http://localhost:4001\" // this is where we are connecting to with sockets\nclass App extends Component {\n    state = {\n      //node_id:v1(),\n      newReload: true,\n      socket:io(endpoint),\n      otherNodes_id:[]\n    }\n\n  componentWillMount() {\n    this.initSocket()\n  }\n\n  initSocket = () => {\n    //variables\n    let node_index = null\n    let other_node = null\n    let otherNodes_id = [...this.state.otherNodes_id]\n    let node_id = null    \n    this.state.socket.on('newPeer', data => {\n      other_node = data.other_node\n      console.log(\"Entering to register new peer\")     \n      //if(this.state.nodes_id) {nodes_id = this.state.nodes_id}else{nodes_id = []}      \n      let k = 0\n      for(let node_id of otherNodes_id){\n          if(node_id === other_node){\n              node_index = k\n          }\n          k++\n      }\n    })\n    if(!node_index){\n      console.log(\"setting node_id and other nodes: \", node_id , otherNodes_id)\n      this.setState({node_id, otherNodes_id})\n    }\n  } \n  // method for emitting a socket.io event\n  send = () => {\n    this.state.socket.emit('change color', this.state.color) //'red'\n    // socket.emit('change color', 'red', 'yellow') | you can have multiple arguments\n  }\n\n  setColor = (color) => {\n    this.setState({ color })\n  }\n\n  setReload = (e) => {\n    console.log(\"e: \",e)\n    if(e===\"OK\")this.setState({newReload:false});\n  }\n\n  pqr = (otherNodes_id) =>{\n    this.setState({otherNodes_id})\n    //displaySignalMessage('New candidate peer ... trying to connect ' + data.node_id)\n    console.log('New candidate peer ... trying to connect ' , otherNodes_id[otherNodes_id.length-1])\n  }\n  render() {\n    const {socket} = this.state\n\n    \n    socket.on('connect', ()=>{      \n      console.log(\"triggered socket.id: \",this.state.socket.id)\n    })\n    \n    if(this.state.newReload){\n      socket.emit('initiate',\n      {\"set_room\":\"SET_ROOM\"},this.setReload)\n    }    \n\n    socket.on('change color', (color) => {\n      document.body.style.backgroundColor = color\n    })\n    \n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <button onClick={() => this.send()}>Change Color</button>\n        <button id=\"blue\" onClick={() => this.setColor('blue')}>Blue</button>\n        <button id=\"red\" onClick={() => this.setColor('red')}>Red</button>\n      </div>\n    )\n  }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}