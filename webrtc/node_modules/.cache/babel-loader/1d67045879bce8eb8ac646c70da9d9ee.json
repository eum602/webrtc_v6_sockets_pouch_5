{"ast":null,"code":"import _regeneratorRuntime from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_3/webrtc/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_3/webrtc/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_3/webrtc/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_3/webrtc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_3/webrtc/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_3/webrtc/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_3/webrtc/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_3/webrtc/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_3/webrtc/src/App.js\";\nimport React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport DB from './DB'; //import Wrtc from './wrtconf/Wrtc'\n\nimport NewPeer from './wrtconf/NewPeer';\nvar endpoint = \"http://localhost:4001\"; // this is where we are connecting to with sockets\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      db: new DB('blockchain1'),\n      //socket:io(endpoint),\n      socket: io.connect(endpoint),\n      otherNodes_id: [],\n      flag: true,\n      cPc: []\n    };\n\n    _this.signalingMessageHandler = function (data) {\n      console.log(\"signalingMessageHandler en App.js\");\n      var candidate_socket_id = data.candidate_socket_id;\n\n      if (candidate_socket_id) {\n        var otherNodes_id = _toConsumableArray(_this.state.otherNodes_id);\n\n        otherNodes_id.push(candidate_socket_id); //this.setState({flag:false , otherNodes_id })\n\n        var socket = _this.state.socket.socket;\n        var pc = new NewPeer({\n          socket: socket,\n          peer_id: candidate_socket_id\n        });\n\n        var cPc = _toConsumableArray(_this.state.cPc);\n\n        cPc.push(pc);\n\n        _this.setState({\n          otherNodes_id: otherNodes_id,\n          cPc: cPc\n        });\n      }\n    };\n\n    _this.connect = function () {\n      var socket = _this.state.socket;\n      socket.emit('searchingPeer', {\n        'id': socket.id,\n        'node_uuid': _this.state.node_uuid\n      });\n    };\n\n    _this.showUUID =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var node_uuid, msg;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              node_uuid = _this.state.db.createUUID();\n              msg = null;\n              _context2.next = 4;\n              return _this.state.db.getUUID().then(function (r) {\n                if (r === 'not_found') {\n                  console.log('creando uuid...');\n\n                  var fcn_uuid =\n                  /*#__PURE__*/\n                  function () {\n                    var _ref2 = _asyncToGenerator(\n                    /*#__PURE__*/\n                    _regeneratorRuntime.mark(function _callee() {\n                      return _regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              _context.next = 2;\n                              return _this.state.db.saveUUID(node_uuid);\n\n                            case 2:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee, this);\n                    }));\n\n                    return function fcn_uuid() {\n                      return _ref2.apply(this, arguments);\n                    };\n                  }();\n\n                  fcn_uuid(node_uuid);\n                  console.log('uuid', node_uuid);\n                  msg = 'uuid created!... : ';\n                } else {\n                  node_uuid = r;\n                  msg = 'uuid catched!... : ';\n                }\n\n                _this.setState({\n                  node_uuid: node_uuid\n                }, function () {\n                  return console.log(msg, node_uuid);\n                });\n              });\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    _this.connect_peer = function () {\n      //console.log(\"other nodes to be sent: \" , this.state.otherNodes_id)\n      if (_this.state.otherNodes_id.length > 0) {\n        console.log(_this.state.cPc[0].render());\n        return _this.state.cPc[0].render(); //return <Wrtc socket = {this.state.socket} peer_id = {this.state.otherNodes_id[0]} />\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var socket = this.state.socket;\n      socket.on('connect', function () {\n        console.log(\"triggered socket.id: \", socket.id);\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var socket = this.state.socket;\n      socket.on('startCallee', function (data) {\n        console.log(\"receiving calling from peer: \", data.candidate_socket_id);\n        socket.emit('xyz', data, _this2.signalingMessageHandler);\n      });\n      socket.on('newCandidate', function (candidates) {\n        return socket.emit('receiveCandidate', candidates, _this2.signalingMessageHandler);\n      });\n    }\n    /*\n    receiveCandidateHandler = (data) => {\n      console.log(\"candidate received\",data)\n      const candidate = data[0]\n      if(!this.state.otherNodes_id.length>0) {\n        const nodes_id = [...this.state.otherNodes_id]\n        nodes_id.push(candidate)\n        this.setState({otherNodes_id:[...nodes_id]},\n          console.log('updated other nodes: ',this.state.otherNodes_id))\n      }\n    }*/\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"blue\",\n        onClick: function onClick() {\n          return _this3.connect();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"connect\"), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this3.showUUID();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"showUUID\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, this.state.node_uuid), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, this.connect_peer()));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/usuario1/Desktop/projects_P2P/webrtc_v6_sockets_pouch_3/webrtc/src/App.js"],"names":["React","Component","io","DB","NewPeer","endpoint","App","state","db","socket","connect","otherNodes_id","flag","cPc","signalingMessageHandler","data","console","log","candidate_socket_id","push","pc","peer_id","setState","emit","id","node_uuid","showUUID","createUUID","msg","getUUID","then","r","fcn_uuid","saveUUID","connect_peer","length","render","on","candidates","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport io from 'socket.io-client'\nimport DB from './DB'\n//import Wrtc from './wrtconf/Wrtc'\nimport NewPeer from './wrtconf/NewPeer';\n\nconst endpoint = \"http://localhost:4001\" // this is where we are connecting to with sockets\nclass App extends Component {\n    state = {\n      db:new DB('blockchain1'),   \n      //socket:io(endpoint),\n      socket:io.connect(endpoint),\n      otherNodes_id:[],\n      flag:true,\n      cPc:[]\n    }\n\n  componentWillMount() {\n    const {socket} =this.state\n    socket.on('connect', ()=>{\n      console.log(\"triggered socket.id: \",socket.id)\n    })\n  }\n\n  componentDidMount() {\n    const {socket} = this.state\n    \n    socket.on('startCallee', data => {\n    console.log(\"receiving calling from peer: \", data.candidate_socket_id)\n    socket.emit('xyz',\n    data,this.signalingMessageHandler)})\n  \n\n    socket.on('newCandidate', candidates => socket.emit('receiveCandidate',\n    candidates,this.signalingMessageHandler))\n  }\n\n  /*\n  receiveCandidateHandler = (data) => {\n    console.log(\"candidate received\",data)\n    const candidate = data[0]\n    if(!this.state.otherNodes_id.length>0) {\n      const nodes_id = [...this.state.otherNodes_id]\n      nodes_id.push(candidate)\n      this.setState({otherNodes_id:[...nodes_id]},\n        console.log('updated other nodes: ',this.state.otherNodes_id))\n    }\n  }*/\n\n  signalingMessageHandler = (data) => {\n    console.log(\"signalingMessageHandler en App.js\")\n    const {candidate_socket_id} = data\n    if(candidate_socket_id){\n      let otherNodes_id = [...this.state.otherNodes_id]\n      otherNodes_id.push(candidate_socket_id)\n      //this.setState({flag:false , otherNodes_id })\n      const {socket} = this.state.socket\n      let pc = new NewPeer({socket:socket , peer_id:candidate_socket_id})\n      let cPc = [...this.state.cPc]\n      cPc.push(pc)\n      this.setState({otherNodes_id,cPc})\n    }\n  }\n\n  connect = () => {\n    const {socket} = this.state\n    socket.emit('searchingPeer',{'id':socket.id,'node_uuid':this.state.node_uuid})\n  }\n\n  showUUID = async () => {\n    let node_uuid = this.state.db.createUUID()\n    let msg = null\n    await this.state.db.getUUID().then(r=>{\n      if(r==='not_found'){\n        console.log('creando uuid...')\n        const fcn_uuid = async()=>{await this.state.db.saveUUID(node_uuid)}\n        fcn_uuid(node_uuid)\n        console.log('uuid',node_uuid)\n        msg='uuid created!... : '\n      }else{\n        node_uuid = r\n        msg='uuid catched!... : '\n      }\n      this.setState({node_uuid},()=>console.log(msg , node_uuid))\n    })\n  }\n\n  connect_peer = () =>{\n    //console.log(\"other nodes to be sent: \" , this.state.otherNodes_id)\n    if(this.state.otherNodes_id.length>0){\n      console.log(this.state.cPc[0].render())\n      return this.state.cPc[0].render()\n      //return <Wrtc socket = {this.state.socket} peer_id = {this.state.otherNodes_id[0]} />\n    }\n  }\n\n\n  render() {\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <button id=\"blue\" onClick={() => this.connect()}>connect</button>\n        <button onClick={() => this.showUUID()}>showUUID</button>\n        <h2>{this.state.node_uuid}</h2>\n        <div>{this.connect_peer()}</div>\n      </div>\n    )\n  }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}