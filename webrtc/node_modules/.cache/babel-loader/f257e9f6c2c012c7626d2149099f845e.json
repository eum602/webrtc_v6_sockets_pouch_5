{"ast":null,"code":"import _objectSpread from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/src/App.js\";\n// import packages\nimport React, { Component } from 'react'; //import socketIOClient from 'socket.io-client'\n\nimport io from 'socket.io-client';\nimport { v1 } from 'uuid';\nvar endpoint = \"http://localhost:4001\"; // this is where we are connecting to with sockets\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      //node_id:v1(),\n      sent: false,\n      socket: io(\"http://localhost:4001\"),\n      otherNodes_id: {}\n    };\n\n    _this.receiveCandidateHandler = function (data) {\n      var candidate = data.candidate;\n\n      if (!_this.state.otherNodes_id.candidate) {\n        var nodes_id = _objectSpread({}, _this.state.otherNodes_id);\n\n        var newId = {\n          candidate: candidate\n        };\n        console.log(\"otherNodes_id\", _this.state.otherNodes_id);\n\n        _this.setState({\n          otherNodes_id: _objectSpread({}, nodes_id, {\n            newId: newId\n          }),\n          sent: true\n        });\n      } else {\n        _this.setState({\n          sent: true\n        });\n      }\n    };\n\n    _this.connect = function () {\n      var socket = _this.state.socket;\n      socket.emit('searchingPeer', {\n        'id': _this.state.socket.id\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var socket = this.state.socket;\n      socket.on('connect', function () {\n        console.log(\"triggered socket.id: \", socket.id);\n      }); //socket.emit('searchingPeer',{'id':this.state.socket.id})\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var socket = this.state.socket;\n      socket.on('newCandidate', function (candidates) {\n        return socket.emit('receiveCandidate', candidates, _this2.receiveCandidateHandler);\n      });\n      return React.createElement(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"blue\",\n        onClick: function onClick() {\n          return _this2.connect();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"connect\"));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/usuario1/Desktop/projects_P2P/webrtc_v6_multiple_datachannel_4/webrtc/src/App.js"],"names":["React","Component","io","v1","endpoint","App","state","sent","socket","otherNodes_id","receiveCandidateHandler","data","candidate","nodes_id","newId","console","log","setState","connect","emit","id","on","candidates","textAlign"],"mappings":";;;;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,IAAMC,QAAQ,GAAG,uBAAjB,C,CAAyC;;IACnCC,G;;;;;;;;;;;;;;;;;UACFC,K,GAAQ;AACN;AACAC,MAAAA,IAAI,EAAE,KAFA;AAGNC,MAAAA,MAAM,EAACN,EAAE,CAAC,uBAAD,CAHH;AAINO,MAAAA,aAAa,EAAC;AAJR,K;;UAcVC,uB,GAA0B,UAACC,IAAD,EAAS;AAAA,UAC1BC,SAD0B,GACbD,IADa,CAC1BC,SAD0B;;AAEjC,UAAG,CAAC,MAAKN,KAAL,CAAWG,aAAX,CAAyBG,SAA7B,EAAwC;AACtC,YAAMC,QAAQ,qBAAO,MAAKP,KAAL,CAAWG,aAAlB,CAAd;;AACA,YAAMK,KAAK,GAAG;AAACF,UAAAA,SAAS,EAACA;AAAX,SAAd;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,MAAKV,KAAL,CAAWG,aAAxC;;AACA,cAAKQ,QAAL,CAAc;AAACR,UAAAA,aAAa,oBAAKI,QAAL;AAAcC,YAAAA,KAAK,EAALA;AAAd,YAAd;AAAmCP,UAAAA,IAAI,EAAC;AAAxC,SAAd;AACD,OALD,MAKK;AACH,cAAKU,QAAL,CAAc;AAACV,UAAAA,IAAI,EAAC;AAAN,SAAd;AACD;AACF,K;;UACDW,O,GAAU,YAAM;AAAA,UACPV,MADO,GACG,MAAKF,KADR,CACPE,MADO;AAEdA,MAAAA,MAAM,CAACW,IAAP,CAAY,eAAZ,EAA4B;AAAC,cAAK,MAAKb,KAAL,CAAWE,MAAX,CAAkBY;AAAxB,OAA5B;AACD,K;;;;;;;yCArBoB;AAAA,UACZZ,MADY,GACH,KAAKF,KADF,CACZE,MADY;AAEnBA,MAAAA,MAAM,CAACa,EAAP,CAAU,SAAV,EAAqB,YAAI;AACvBN,QAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAoCR,MAAM,CAACY,EAA3C;AACD,OAFD,EAFmB,CAKnB;AACD;;;6BAgBQ;AAAA;;AAAA,UACAZ,MADA,GACU,KAAKF,KADf,CACAE,MADA;AAGPA,MAAAA,MAAM,CAACa,EAAP,CAAU,cAAV,EAAyB,UAACC,UAAD;AAAA,eAAgBd,MAAM,CAACW,IAAP,CAAY,kBAAZ,EAA+BG,UAA/B,EAA0C,MAAI,CAACZ,uBAA/C,CAAhB;AAAA,OAAzB;AAEA,aACE;AAAK,QAAA,KAAK,EAAE;AAAEa,UAAAA,SAAS,EAAE;AAAb,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,EAAE,EAAC,MAAX;AAAkB,QAAA,OAAO,EAAE;AAAA,iBAAM,MAAI,CAACL,OAAL,EAAN;AAAA,SAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CADF;AAKD;;;;EAxCejB,S;;AA2ClB,eAAeI,GAAf","sourcesContent":["// import packages\nimport React, { Component } from 'react'\n//import socketIOClient from 'socket.io-client'\nimport io from 'socket.io-client'\nimport { v1 } from 'uuid';\nconst endpoint = \"http://localhost:4001\" // this is where we are connecting to with sockets\nclass App extends Component {\n    state = {\n      //node_id:v1(),\n      sent: false,\n      socket:io(\"http://localhost:4001\"),\n      otherNodes_id:{}\n    }\n\n  componentWillMount() {\n    const {socket} =this.state\n    socket.on('connect', ()=>{\n      console.log(\"triggered socket.id: \",socket.id)\n    })\n    //socket.emit('searchingPeer',{'id':this.state.socket.id})\n  }\n  receiveCandidateHandler = (data) =>{\n    const {candidate} = data\n    if(!this.state.otherNodes_id.candidate) {\n      const nodes_id = {...this.state.otherNodes_id}\n      const newId = {candidate:candidate}\n      console.log(\"otherNodes_id\", this.state.otherNodes_id)\n      this.setState({otherNodes_id:{...nodes_id,newId},sent:true})\n    }else{\n      this.setState({sent:true})\n    }\n  }\n  connect = () => {\n    const {socket} = this.state\n    socket.emit('searchingPeer',{'id':this.state.socket.id})\n  }\n  render() {\n    const {socket} = this.state\n\n    socket.on('newCandidate',(candidates) => socket.emit('receiveCandidate',candidates,this.receiveCandidateHandler))\n\n    return (\n      <div style={{ textAlign: \"center\" }}>\n        <button id=\"blue\" onClick={() => this.connect()}>connect</button>        \n      </div>\n    )\n  }\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}